<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Container and Docker</title>
    <url>/Container_and_Docker/</url>
    <content><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br><span id="more"></span></p>
<h4 id="容器与Docker"><a href="#容器与Docker" class="headerlink" title="容器与Docker"></a>容器与Docker</h4><p>容器技术起源于Linux，是一种内核虚拟化技术，提供轻量级的虚拟化，以便隔离进程和资源。尽管容器技术已经出现很久，却是随着Docker的出现而变得广为人知。Docker是第一个使容器能在不同机器之间移植的系统。它不仅简化了打包应用的流程，也简化了打包应用的库和依赖，甚至整个操作系统的文件系统能被打包成一个简单的可移植的包，这个包可以被用来在任何其他运行Docker的机器上使用。</p>
<p>容器和虚拟机具有相似的资源隔离和分配方式，容器虚拟化了操作系统而不是硬件，更加便携和高效。</p>
<p><img src="/Container_and_Docker/./zh-cn_image_0257565965.png" alt="img"></p>
<p>相比于使用虚拟机，容器有如下优点：</p>
<ul>
<li><p>更高效的利用系统资源</p>
<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，容器对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>
</li>
<li><p>更快速的启动时间</p>
<p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间，大大节约了开发、测试、部署的时间。</p>
</li>
<li><p>一致的运行环境</p>
<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些问题并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性。</p>
</li>
<li><p>更轻松的迁移</p>
<p>由于Docker确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机，其运行结果是一致的。因此可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>
</li>
<li><p>更轻松的维护和扩展</p>
<p>Docker使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>
</li>
</ul>
<h4 id="Docker容器典型使用流程"><a href="#Docker容器典型使用流程" class="headerlink" title="Docker容器典型使用流程"></a>Docker容器典型使用流程</h4><p>Docker容器有如下三个主要概念。</p>
<ul>
<li><strong>镜像</strong>：Docker镜像里包含了已打包的应用程序及其所依赖的环境。它包含应用程序可用的文件系统和其他元数据，如镜像运行时的可执行文件路径。</li>
<li><strong>镜像仓库</strong>：Docker镜像仓库用于存放Docker镜像，以及促进不同人和不同电脑之间共享这些镜像。当编译镜像时，要么可以在编译它的电脑上运行，要么可以先上传镜像到一个镜像仓库，然后下载到另外一台电脑上并运行它。某些仓库是公开的，允许所有人从中拉取镜像，同时也有一些是私有的，仅部分人和机器可接入。</li>
<li><strong>容器</strong>：Docker容器通常是一个Linux容器，它基于Docker镜像被创建。一个运行中的容器是一个运行在Docker主机上的进程，但它和主机，以及所有运行在主机上的其他进程都是隔离的。这个进程也是资源受限的，意味着它只能访问和使用分配给它的资源（CPU、内存等）。</li>
</ul>
<p>典型的使用流程如下图所示。</p>
<p>图2 Docker容器典型使用流程</p>
<p><img src="/Container_and_Docker/./zh-cn_image_0258868444.png" alt="img"></p>
<ol>
<li><p>首先开发者在开发环境机器上开发应用并制作镜像。</p>
<p>Docker执行命令，构建镜像并存储在机器上。</p>
</li>
<li><p>开发者发送上传镜像命令。</p>
<p>Docker收到命令后，将本地镜像上传到镜像仓库。</p>
</li>
<li><p>开发者向生产环境机器发送运行镜像命令。</p>
<p>生产环境机器收到命令后，Docker会从镜像仓库拉取镜像到机器上，然后基于镜像运行容器。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie &amp; Session</title>
    <url>/Cookie-Session/</url>
    <content><![CDATA[<p>Cookie  &amp; Session<br><span id="more"></span></p>
<blockquote>
<p><a href="https://www.cnblogs.com/liwenzhou/p/8343243.html">https://www.cnblogs.com/liwenzhou/p/8343243.html</a></p>
</blockquote>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h4 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h4><p>保存在浏览器端的键值对</p>
<h4 id="为什么要有Cookie"><a href="#为什么要有Cookie" class="headerlink" title="为什么要有Cookie"></a>为什么要有Cookie</h4><p>因为HTTP请求是无状态的</p>
<h4 id="Cookie的原理"><a href="#Cookie的原理" class="headerlink" title="Cookie的原理"></a>Cookie的原理</h4><p>服务端可以在返回响应的时候 做手脚<br>在浏览器上写入键值对，就是Cookie，浏览器发送请求的时候会自动携带该网站保存在浏览器中的键值对</p>
<h4 id="Cookie的使用场景"><a href="#Cookie的使用场景" class="headerlink" title="Cookie的使用场景"></a>Cookie的使用场景</h4><ol>
<li>保存登录信息</li>
<li>保存用户的搜索关键词</li>
</ol>
<h4 id="Django中操作Cookie"><a href="#Django中操作Cookie" class="headerlink" title="Django中操作Cookie"></a>Django中操作Cookie</h4><h5 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.COOKIES[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">request.get_signed_cookie(key, default=RAISE_ERROR, salt=<span class="string">&#x27;&#x27;</span>, max_age=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">    default: 默认值</span><br><span class="line">    salt: 加密盐</span><br><span class="line">    max_age: 后台控制过期时间</span><br></pre></td></tr></table></figure>
<h5 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep = HttpResponse(...)</span><br><span class="line">rep ＝ render(request, ...)</span><br><span class="line"></span><br><span class="line">rep.set_cookie(key,value,...)</span><br><span class="line">rep.set_signed_cookie(key,value,salt=<span class="string">&#x27;加密盐&#x27;</span>, max_age=<span class="literal">None</span>, ...)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">     key, 键</span><br><span class="line">     value=<span class="string">&#x27;&#x27;</span>, 值</span><br><span class="line">     max_age=<span class="literal">None</span>, 超时时间</span><br><span class="line">     expires=<span class="literal">None</span>, 超时时间(IE requires expires, so <span class="built_in">set</span> it <span class="keyword">if</span> hasn<span class="string">&#x27;t been already.)</span></span><br><span class="line"><span class="string">     path=&#x27;</span>/<span class="string">&#x27;, Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问</span></span><br><span class="line"><span class="string">     domain=None, Cookie生效的域名</span></span><br><span class="line"><span class="string">     secure=False, https传输</span></span><br><span class="line"><span class="string">     httponly=False 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure>
<h5 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    rep = redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">&quot;user&quot;</span>)  <span class="comment"># 删除用户浏览器上之前设置的usercookie值</span></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure>
<h5 id="完整views-py示例："><a href="#完整views-py示例：" class="headerlink" title="完整views.py示例："></a>完整views.py示例：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">request,*args,**kwargs</span>):</span></span><br><span class="line">        Cookies = request.COOKIES.get(<span class="string">&quot;is_login&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;yes&#x27;</span> != Cookies:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index界面&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;test01/login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    rep = redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">&#x27;is_login&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> rep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_username</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;z&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            rep = render(request,<span class="string">&#x27;test01/home.html&#x27;</span>,&#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line">            <span class="comment">#rep.set_cookie(&#x27;is_login&#x27;,&#x27;yes&#x27;)</span></span><br><span class="line">            rep.set_signed_cookie(<span class="string">&#x27;is_login&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, expires=<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rep = redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rep =  redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Cookie虽然在一定程度上解决了“保持状态”的需求，但是由于Cookie本身最大支持4096字节，以及Cookie本身保存在客户端，可能被拦截或窃取，因此就需要有一种新的东西，它能支持更多的字节，并且他保存在服务器，有较高的安全性。这就是Session。</p>
<p>问题来了，基于HTTP协议的无状态特征，服务器根本就不知道访问者是“谁”。那么上述的Cookie就起到桥接的作用。</p>
<p>我们可以给每个客户端的Cookie分配一个唯一的id，这样用户在访问时，通过Cookie，服务器就知道来的人是“谁”。然后我们再根据不同的Cookie的id，在服务器上保存一段时间的私密资料，如“账号密码”等等。</p>
<p>总结而言：Cookie弥补了HTTP无状态的不足，让服务器知道来的人是“谁”；但是Cookie以文本的形式保存在本地，自身安全性较差；所以我们就通过Cookie识别不同的用户，对应的在Session里保存私密的信息以及超过4096字节的文本。<br>另外，上述所说的Cookie和Session其实是共通性的东西，不限于语言和框架。</p>
<h4 id="Django中操作Session"><a href="#Django中操作Session" class="headerlink" title="Django中操作Session"></a>Django中操作Session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取、设置、删除Session中数据</span></span><br><span class="line">request.session[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line">request.session.get(<span class="string">&#x27;k1&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">request.session[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">123</span></span><br><span class="line">request.session.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">123</span>) <span class="comment"># 存在则不设置</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有 键、值、键值对</span></span><br><span class="line">request.session.keys()</span><br><span class="line">request.session.values()</span><br><span class="line">request.session.items()</span><br><span class="line">request.session.iterkeys()</span><br><span class="line">request.session.itervalues()</span><br><span class="line">request.session.iteritems()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话session的key</span></span><br><span class="line">request.session.session_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有Session失效日期小于当前日期的数据删除</span></span><br><span class="line">request.session.clear_expired()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话session的key在数据库中是否存在</span></span><br><span class="line">request.session.exists(<span class="string">&quot;session_key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前会话的所有Session数据</span></span><br><span class="line">request.session.delete()</span><br><span class="line">　　</span><br><span class="line"><span class="comment"># 删除当前的会话数据并删除会话的Cookie。</span></span><br><span class="line">request.session.flush() </span><br><span class="line">    这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br><span class="line">    例如，django.contrib.auth.logout() 函数中就会调用它。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置会话Session和Cookie的超时时间</span></span><br><span class="line">request.session.set_expiry(value)</span><br><span class="line">    * 如果value是个整数，session会在些秒数后失效。</span><br><span class="line">    * 如果value是个datatime或timedelta，session就会在这个时间后失效。</span><br><span class="line">    * 如果value是<span class="number">0</span>,用户关闭浏览器session就会失效。</span><br><span class="line">    * 如果value是<span class="literal">None</span>,session会依赖全局session失效策略。</span><br></pre></td></tr></table></figure>
<h4 id="Seesion版验证登录"><a href="#Seesion版验证登录" class="headerlink" title="Seesion版验证登录"></a>Seesion版验证登录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        next_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">&quot;user&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&quot;/login/?next=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(next_url))</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;alex&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;alex1234&quot;</span>:</span><br><span class="line">            <span class="comment"># 设置session</span></span><br><span class="line">            request.session[<span class="string">&quot;user&quot;</span>] = user</span><br><span class="line">            <span class="comment"># 获取跳到登陆页面之前的URL</span></span><br><span class="line">            next_url = request.GET.get(<span class="string">&quot;next&quot;</span>)</span><br><span class="line">            <span class="comment"># 如果有，就跳转回登陆之前的URL</span></span><br><span class="line">            <span class="keyword">if</span> next_url:</span><br><span class="line">                <span class="keyword">return</span> redirect(next_url)</span><br><span class="line">            <span class="comment"># 否则默认跳转到index页面</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">&quot;/index/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 删除所有当前请求相关的session</span></span><br><span class="line">    request.session.delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    current_user = request.session.get(<span class="string">&quot;user&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>, &#123;<span class="string">&quot;user&quot;</span>: current_user&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Django中的Session配置"><a href="#Django中的Session配置" class="headerlink" title="Django中的Session配置"></a>Django中的Session配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.db&#x27;</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&#x27;default&#x27;</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.file&#x27;</span>    <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cached_db&#x27;</span>        <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.signed_cookies&#x27;</span>   <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ <span class="string">&quot;sessionid&quot;</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">SESSION_COOKIE_PATH ＝ <span class="string">&quot;/&quot;</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>GoAccess-Nginx_log</title>
    <url>/GoAccess-Nginx-log/</url>
    <content><![CDATA[<p>GoAccess - 可视化 Web 日志分析工具。</p>
<span id="more"></span>
<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p><strong>GoAccess</strong> 是一款开源的且具有交互视图界面的<strong>实时</strong> <strong>Web 日志分析工具</strong>，通过你的 <strong>Web 浏览器</strong>或者 *nix 系统下的<strong>终端程序(terminal)</strong>即可访问。</p>
<p>能为系统管理员提供<strong>快速</strong>且有价值的 HTTP 统计，并以在线可视化服务器的方式呈现。</p>
<p>官网：<a href="https://www.goaccess.cc/">https://www.goaccess.cc/</a></p>
<h5 id="为什么要用GoAccess"><a href="#为什么要用GoAccess" class="headerlink" title="为什么要用GoAccess"></a>为什么要用GoAccess</h5><p>GoAccess 被设计成快速的并基于终端的日志分析工具。其核心理念是不需要通过 Web 浏览器就能快速分析并<strong>实时</strong>查看 Web 服务器的统计数据(<em>这对于需要使用 SSH 来对访问日志进行快速分析或者就是喜欢在终端环境下工作的人来说是超赞的</em>)。</p>
<p>终端输出仅仅是默认的输出方式，GoAccess 还支持生成完整的<strong>实时</strong> <a href="http://rt.goaccess.io/?20170729002319"><code>HTML</code></a> 报告(<em>这对分析、监控以及数据可视化都是极好的</em>)，以及 <a href="https://www.goaccess.cc/json"><code>JSON</code></a> 和 <a href="https://www.goaccess.cc/goaccess_csv_report.csv?20170729002319"><code>CSV</code></a> 格式的报告。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install goaccess -y</span><br></pre></td></tr></table></figure>
<h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><h6 id="生成HTML报告："><a href="#生成HTML报告：" class="headerlink" title="生成HTML报告："></a>生成HTML报告：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goaccess access.log -a -o report.html</span><br></pre></td></tr></table></figure>
<h6 id="实时HTML输出："><a href="#实时HTML输出：" class="headerlink" title="实时HTML输出："></a>实时HTML输出：</h6><p>GoAccess 有能力在 HTML 报告中展示实时数据。您甚至可以通过电子邮件发送 HTML 报告，因为它是由没有外部文件依赖的单个文件组成，是不是很酷！</p>
<p>生成实时 HTML 报告的过程和生成静态报告的过程非常相似。实时报告仅仅需要使用参数 <code>--real-time-html</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goaccess -f access.log -o report.html --log-format=COMBINED --real-time-html </span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果需要在加密连接上输出实时数据，则需要使用 <code>--ssl-cert=&lt;cert.crt&gt;</code> 和 <code>--ssl-key=&lt;priv.key&gt;</code>。</p>
<h6 id="我的启动命令："><a href="#我的启动命令：" class="headerlink" title="我的启动命令："></a>我的启动命令：</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">goaccess -f /var/log/nginx_zhy/nginx_zhy_access.log -o /usr/share/nginx/html/zhy_report.html --log-format=COMBINED --real-time-html --time-format=&#x27;%H:%M:%S&#x27;  --date-format=&#x27;%d/%b/%Y&#x27; --log-format=COMBINED --ssl-cert=&#x27;/etc/nginx/sslfile/zhy/3734963_www.zhaohongye.com.pem&#x27; --ssl-key=&#x27;/etc/nginx/sslfile/zhy/3734963_www.zhaohongye.com.key&#x27; --daemonize</span><br></pre></td></tr></table></figure>
<h5 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim nginx.conf</span></span><br><span class="line"><span class="comment"># 在server段下增加location段</span></span><br><span class="line"></span><br><span class="line"> <span class="attribute">location</span> /report.html &#123;</span><br><span class="line">         <span class="attribute">alias</span> /usr/share/nginx/html/zhy_report.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/GoAccess-Nginx-log/./goaccess.jpg" alt></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>GoAccess</tag>
      </tags>
  </entry>
  <entry>
    <title>Istio-Application Service Mesh</title>
    <url>/Istio-Application-Service-Mesh/</url>
    <content><![CDATA[<p>Istio服务网格支持对运行在Kubernetes集群上的无状态工作负载进行流量治理和流量全方位监控，将服务加入网格后，可以实现服务的灰度发布、限流、熔断、会话保持等流量治理能力以及一站式、图形化拓扑的流量健康与性能、调用链监控。</p>
<span id="more"></span>
<h5 id="什么是应用服务网格"><a href="#什么是应用服务网格" class="headerlink" title="什么是应用服务网格"></a>什么是应用服务网格</h5><p>是一种高性能、高可靠性和易用性的服务网格，以基础设施的方式为用户提供服务流量管理、服务运行监控、服务访问安全以及服务发布能力。控制面和数据面均和开源Istio完全兼容，无缝对接Kubernetes集群</p>
<p>应用服务网格提供非侵入式的微服务治理解决方案，支持完整的生命周期管理和流量治理，兼容Kubernetes和Istio生态，其功能包括负载均衡、熔断、限流等多种治理能力。应用服务网格内置金丝雀、蓝绿、A/B Test等多种灰度发布流程，提供一站式自动化的发布管理。应用服务网格基于无侵入的监控数据采集，提供实时流量拓扑、调用链等服务性能监控和运行诊断，构建全景的服务运行视图。</p>
<h5 id="什么是Istio"><a href="#什么是Istio" class="headerlink" title="什么是Istio"></a>什么是Istio</h5><p><a href="https://istio.io/latest/zh/">https://istio.io/latest/zh/</a></p>
<p><img src="/Istio-Application-Service-Mesh/./istio00.png" alt></p>
<p>Istio是一个提供连接、保护、控制以及观测功能的开放平台，通过提供完整的非侵入式的微服务治理解决方案，能够很好的解决云原生服务的管理、网络连接以及安全管理等服务网络治理问题。</p>
<p>随着微服务的大量应用，其构成的分布式应用架构在运维、调试、和安全管理等维度变得更加复杂，开发者需要面临更大的挑战，如：服务发现、负载均衡、故障恢复、指标收集和监控，以及A/B测试、灰度发布、蓝绿发布、限流、访问控制、端到端认证等。</p>
<p>在较高的层次上，Istio有助于降低这些部署的复杂性，并减轻开发团队的压力。它是一个完全开源的服务网格，可以透明地分层到现有的分布式应用程序上。它也是一个平台，包括允许集成到任何日志记录平台、遥测或策略系统的API。Istio的多样化功能使您能够成功高效地运行分布式微服务架构，并提供保护、连接和监控微服务的统一方法。</p>
<p><strong>服务网格</strong></p>
<p>服务网格（Service Mesh）通常用于描述构成应用程序的微服务网络以及应用之间的交互。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。</p>
<h5 id="为什么要使用Istio"><a href="#为什么要使用Istio" class="headerlink" title="为什么要使用Istio"></a>为什么要使用Istio</h5><p>Istio提供了一个完整的解决方案，通过为整个服务网格提供行为洞察和操作控制来满足微服务应用程序的多样化需求。</p>
<p>Kubernetes提供了部署、升级和有限的运行流量管理能力，但并不具备熔断、限流降级、调用链治理等能力。Istio是基于Kubernetes构建的开放平台，它很好的补齐了Kubernetes在微服务治理上的诸多能力。</p>
<p>Istio和Kubernetes的关系</p>
<p><img src="/Istio-Application-Service-Mesh/./istio01.png" alt></p>
<p>想要让服务支持Istio，只需要在您的环境中部署一个特殊的sidecar代理，使用Istio控制平面功能配置和管理代理，拦截微服务之间的所有网络通信：</p>
<ul>
<li>实现HTTP、gRPC、WebSocket 和 TCP 流量的自动负载均衡。</li>
<li>通过丰富的路由规则、重试、故障转移和故障注入，可以对流量行为进行细粒度控制。</li>
<li>可插入的策略层和配置 API，支持访问控制、速率限制和配额。</li>
<li>对出入集群入口和出口中所有流量自动度量指标、日志记录和追踪。</li>
<li>通过强大的基于身份的验证和授权，在集群中实现安全的服务间通信。</li>
</ul>
<p>Istio 旨在实现可扩展性，满足各种部署需求。</p>
<h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><h6 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h6><p>灰度发布是迭代的软件产品在生产环境安全上线的一种重要手段。</p>
<h6 id="金丝雀发布"><a href="#金丝雀发布" class="headerlink" title="金丝雀发布"></a>金丝雀发布</h6><p>在生产环境上引一部分实际流量对一个新版本进行测试，测试新版本的性能和表现，在保证系统整体稳定运行的前提下，尽早发现新版本在实际环境上的问题。</p>
<h6 id="蓝绿发布"><a href="#蓝绿发布" class="headerlink" title="蓝绿发布"></a>蓝绿发布</h6><p>蓝绿发布提供了一种零宕机的部署方式。不停老版本，部署新版本进行测试，确认运行正常后，将流量切到新版本，然后老版本同时也升级到新版本。始终有两个版本同时在线，有问题可以快速切换。</p>
<h6 id="流量治理"><a href="#流量治理" class="headerlink" title="流量治理"></a>流量治理</h6><p>应用流量治理提供可视化云原生应用的网络状态监控，并实现在线的网络连接和安全策略的管理和配置，当前支持HTTP、TCP流量下的路由规则、负载均衡、会话保持、连接池管理、RBAC等能力。</p>
<h6 id="连接池管理"><a href="#连接池管理" class="headerlink" title="连接池管理"></a>连接池管理</h6><p>配置TCP和HTTP的连接和请求池相关阈值，保护目标服务，避免对服务的过载访问。</p>
<h6 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h6><p>配置快速响应和隔离服务访问故障，防止网络和服务调用故障级联发生，限制故障影响范围，防止故障蔓延导致系统整体性能下降或者雪崩。</p>
<h6 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h6><p>跟踪大规模复杂的分布式系统运行服务调用关系，解决分布式服务故障定位定界问题。</p>
<h5 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h5><p><img src="/Istio-Application-Service-Mesh/./istio02.png" alt></p>
<p>应用服务网格在逻辑上分为控制层面和数据层面：</p>
<ul>
<li><strong>控制层面：</strong>管理代理（默认为Envoy），用于管理流量路由、运行时策略执行等。</li>
<li><strong>数据层面：</strong>由一组以 sidecar 方式部署的智能代理（Envoy）组成。这些代理可以调节和控制微服务及 Mixer之间所有的网络通信。</li>
</ul>
<p>应用服务网格主要由以下组件构成：</p>
<ul>
<li><strong>Istio管理器（Pilot）：</strong>负责收集和验证配置，并将其传播到各种Istio组件。它从策略执行模块（Mixer）和智能代理（Envoy）中抽取环境特定的实现细节，为他们提供用户服务的抽象表示，独立于底层平台。此外，流量管理规则（即通用4层规则和7层HTTP/gRPC路由规则）可以在运行时通过Pilot进行编程。</li>
<li><strong>策略执行模块（Mixer）：</strong>负责在服务网格上执行访问控制和使用策略，并从智能代理（Envoy）和其他服务收集遥测数据。依据智能代理（Envoy）提供的属性执行策略。</li>
<li><strong>Citadel：</strong>Citadel通过内置身份和凭证管理赋能强大的服务间和最终用户身份验证。可用于升级服务网格中未加密的流量，并为运维人员提供基于服务标识而不是网络控制的强制执行策略的能力。</li>
<li><strong>Galley：</strong>Galley 代表其他的 Istio 控制平面组件，用来验证用户编写的 Istio API 配置。</li>
<li><strong>智能代理（Envoy）：</strong>作为一个独立的组件与相关微服务部署在同一个Kubernetes的pod上，并提供一系列的属性给策略执行模块（Mixer）。策略执行模块（Mixer）以此作为执行策略的依据，并发送到监控系统。</li>
</ul>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><h6 id="容器化服务灰度发布"><a href="#容器化服务灰度发布" class="headerlink" title="容器化服务灰度发布"></a>容器化服务灰度发布</h6><p>应用服务网格允许用户按照标准制定一套流量分发规则，并且无侵入的下发到实例中，平滑稳定的实现灰度发布功能。应用服务网格为应用治理提供的灰度发布功能，稳定高效地推动企业应用的迭代升级。</p>
<p>灰度发布内置金丝雀、蓝绿、A/B Testing等典型灰度发布功能，用户无需使用繁琐的命令行配置，而是通过清晰友好的图形界面，轻松直观地完成灰度发布整个过程</p>
<p>灰度发布过程</p>
<p><img src="/Istio-Application-Service-Mesh/./istio03.png" alt></p>
<h6 id="容器化微服务化改造"><a href="#容器化微服务化改造" class="headerlink" title="容器化微服务化改造"></a>容器化微服务化改造</h6><p>微服务目前被越来越多的IT企业重视。微服务是将复杂的应用切分为若干服务，每个服务均可以独立开发、部署和伸缩；微服务和容器组合使用，可进一步简化微服务的交付，提升应用的可靠性和可伸缩性。</p>
<p>随着微服务的大量应用，其构成的分布式应用架构在运维、调试、和安全管理等维度变得更加复杂，开发者需要面临更大的挑战，如：服务发现、负载均衡、故障恢复、指标收集和监控，以及A/B测试、灰度发布、蓝绿发布、限流、访问控制、端到端认证等。</p>
<p>应用服务网格通过无侵入的方式，面向容器云原生应用，提供容器化和治理的完整解决方案。</p>
<p>微服务集成Istio架构</p>
<p><img src="/Istio-Application-Service-Mesh/./istio04.png" alt></p>
<h6 id="容器化服务应用流量治理"><a href="#容器化服务应用流量治理" class="headerlink" title="容器化服务应用流量治理"></a>容器化服务应用流量治理</h6><p>应用服务网格为用户提供基于容器化服务的流量治理能力。</p>
<p>应用服务网格支持根据微服务的流量协议，提供策略化、场景化的网络连接、安全策略管理能力。支持基于应用拓扑对服务配置负载均衡、熔断容错等治理规则，并提供实时的、可视化的服务流量管理。应用无需任何改造，即可进行动态的智能路由和弹性流量管理。</p>
<p>流量治理</p>
<p><img src="/Istio-Application-Service-Mesh/./istio05.png" alt></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
        <category>Istio</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Istio</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-API</title>
    <url>/Jenkins-API/</url>
    <content><![CDATA[<p>Jenkins-API</p>
<h5 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h5><p>在自动化平台中调用jenkins API，实现程序发版、自定义任务等</p>
<h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><p><a href="https://python-jenkins.readthedocs.io/en/latest/api.html">Python API</a></p>
<ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install python-jenkins</span><br></pre></td></tr></table></figure>
</li>
<li><p>examples</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins</span><br><span class="line"></span><br><span class="line">server = jenkins.Jenkins(<span class="string">&#x27;http://localhost:8080&#x27;</span>, username=<span class="string">&#x27;myuser&#x27;</span>, password=<span class="string">&#x27;mypassword&#x27;</span>)</span><br><span class="line">user = server.get_whoami()</span><br><span class="line">version = server.get_version()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello %s from Jenkins %s&#x27;</span> % (user[<span class="string">&#x27;fullName&#x27;</span>], version))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins</span><br><span class="line">job_name=<span class="string">&#x27;k8s/cicd-test-0613&#x27;</span></span><br><span class="line">jenkins_server_url=<span class="string">&#x27;http://jenkins.visualchina.com/jenkins&#x27;</span></span><br><span class="line">user_id=<span class="string">&#x27;vcgdev&#x27;</span></span><br><span class="line">api_token=<span class="string">&#x27;***************************&#x27;</span></span><br><span class="line">server=jenkins.Jenkins(jenkins_server_url, username=user_id, password=api_token)</span><br><span class="line"><span class="comment">#String参数化构建job名为job_name的job, 参数param_dict为字典形式，如：param_dict= &#123;&quot;param1&quot;：“value1”， “param2”：“value2”&#125;</span></span><br><span class="line">param_dict= &#123;<span class="string">&quot;Action&quot;</span>:<span class="string">&quot;程序发版&quot;</span>,<span class="string">&quot;Scope&quot;</span>:<span class="string">&quot;生产环境&quot;</span>,<span class="string">&quot;JenkinsApi&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">server.build_job(job_name, parameters=param_dict)</span><br><span class="line">last_build_number = server.get_job_info(job_name)[<span class="string">&#x27;lastCompletedBuild&#x27;</span>][<span class="string">&#x27;number&#x27;</span>]</span><br><span class="line">build_info = server.get_build_info(job_name, last_build_number)</span><br><span class="line"><span class="built_in">print</span>(build_info)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h5><p><img src="/Jenkins-API/./jenkins.png" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-Pipeline</title>
    <url>/Jenkins-Pipeline/</url>
    <content><![CDATA[<p>Jenkins-Pipeline</p>
<h4 id="Jenkins-Pipeline总体介绍"><a href="#Jenkins-Pipeline总体介绍" class="headerlink" title="Jenkins Pipeline总体介绍"></a>Jenkins Pipeline总体介绍</h4><ul>
<li>Pipeline，简而言之，就是一台运行于Jenkins上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排与可视化。</li>
<li>Pipeline是Jenkins2.X最核心的特性，帮助Jenkins实现从CI到CD与DevOps的转变。</li>
<li>详细介绍可见<a href="https://jenkins.io/2.0/">https://jenkins.io/2.0</a></li>
</ul>
<h4 id="Jenkins-Pipeline"><a href="#Jenkins-Pipeline" class="headerlink" title="Jenkins Pipeline"></a>Jenkins Pipeline</h4><ul>
<li>Jenkins Pipeline是一<strong>组插件</strong>，让Jenkins可以<strong>实现持续交付管道</strong>的落地和实施。</li>
<li>持续交付管道（CD Pipeline）是将软件从<strong>版本控制</strong>阶段到<strong>交付给用户或客户</strong>的<strong>完整过程的自动化表现</strong>。</li>
<li>Pipeline提供了一组可扩展的工具，通过Pipeline Domain Specific Language（DSL）syntax可以达到Pipeline as Code的目的</li>
<li>Pipeline as Code： Jenkinsfile 存储在项目的源代码库</li>
</ul>
<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul>
<li><p>Node</p>
<p>Jenkins节点，或是Master，或是Agent，是执行Step的具体运行环境</p>
</li>
<li><p>Stage</p>
<p>阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作，如：“Build”，“Test”， “Deploy”。</p>
<p>​        <strong>注意</strong>，Stage是一个逻辑分组的概念，可以跨多个Node。</p>
</li>
<li><p>step</p>
<p>步骤，Step是 最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类 Jenkins Plugin提供，例如：sh ‘make’</p>
</li>
</ul>
<h4 id="Pipeline特性"><a href="#Pipeline特性" class="headerlink" title="Pipeline特性"></a>Pipeline特性</h4><ul>
<li><strong>代码（Code）</strong>: Pipeline以代码的形式实现，通常被检入源代码控制，是团队能够编辑，审查 和迭代其CD流程。</li>
<li><strong>可持续性（Durable）</strong>：Jenkins重启或者中断后都不会影响Pipeline Job。</li>
<li><strong>可停顿（Pausable）</strong>:Pipeline可以选择停止并等待人工输入或者批准，然后再继续Pipeline运行。</li>
<li><strong>多功能（Versatile）</strong>：Pipeline支持实现现实世界的复杂CD要求，包括fork/join子进程，循环和并行执行工作的能力。</li>
<li><strong>可拓展（Extensible）</strong>：Pipeline插件支持其DSL的自定义扩展及与其他插件集成的多个选 项。</li>
</ul>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>官网文档：<a href="https://jenkins.io/doc/book/pipeline/syntax/">https://jenkins.io/doc/book/pipeline/syntax/</a></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">	agent any</span><br><span class="line">	options &#123;</span><br><span class="line">		timestamps()</span><br><span class="line">	&#125;</span><br><span class="line">	environment &#123;</span><br><span class="line">		TimeStamp=<span class="string">&quot;$&#123;currentBuild.startTimeInMillis&#125;&quot;</span></span><br><span class="line">		Service=<span class="string">&quot;$&#123;JOB_BASE_NAME&#125;&quot;</span></span><br><span class="line">		Branch=<span class="string">&quot;$&#123;env.gitlabTargetBranch&#125;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	parameters &#123;</span><br><span class="line">		choice(<span class="attr">name:</span> <span class="string">&#x27;Action&#x27;</span>,<span class="attr">choices:</span> <span class="string">&#x27;程序发版\n程序回滚&#x27;</span>,<span class="attr">description:</span> <span class="string">&#x27;请选择操作&#x27;</span>)</span><br><span class="line">		choice(<span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">choices:</span> <span class="string">&#x27;测试环境\n预发环境\n生产环境\n灾备环境&#x27;</span>,<span class="attr">description:</span> <span class="string">&#x27;请选择部署环境&#x27;</span>)</span><br><span class="line">		string(<span class="attr">name:</span> <span class="string">&#x27;JenkinsApi&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;false&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;是否是JenkinsAPI触发&#x27;</span>)</span><br><span class="line">		string(<span class="attr">name:</span> <span class="string">&#x27;BranchOrTag&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;指定分支或tag发版&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	stages &#123;</span><br><span class="line">		stage(<span class="string">&#x27;PrintEnv&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;printenv&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Check Out&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;灾备环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;CheckOut&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;BranchOrTag&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build Package&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;灾备环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;BuildPackage&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build Dockerfile&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;生产环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;灾备环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;BuildDockerfile&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build K8S Yaml&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;生产环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;灾备环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;BuildK8SYaml&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Deploy&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				script &#123;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;测试环境&quot;</span>) &#123;</span><br><span class="line">						echo <span class="string">&quot;测试环境发版&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;预发环境&quot;</span>) &#123;</span><br><span class="line">						echo <span class="string">&quot;预发环境发版&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;灾备环境&quot;</span>) &#123;</span><br><span class="line">						echo <span class="string">&quot;灾备环境发版&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;生产环境&quot;</span>) &#123;</span><br><span class="line">						script &#123;</span><br><span class="line">							<span class="keyword">if</span> (<span class="string">&quot;$&#123;JenkinsApi&#125;&quot;</span> == <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">								sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">								sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span> &#123;</span><br><span class="line">								script &#123;</span><br><span class="line">									<span class="keyword">if</span> (<span class="string">&quot;$&#123;env.Action&#125;&quot;</span> == <span class="string">&quot;程序回滚&quot;</span>) &#123;</span><br><span class="line">										echo <span class="string">&quot;生产环境回滚,等待领导确认&quot;</span></span><br><span class="line">										script &#123;</span><br><span class="line">											input <span class="attr">message:</span> <span class="string">&quot;请确认是否回滚 $&#123;Scope&#125;： &quot;</span>,<span class="attr">ok :</span> <span class="string">&#x27;确认&#x27;</span>,<span class="attr">submitter:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">										&#125;</span><br><span class="line">										echo <span class="string">&#x27;已确认，即将回滚&#x27;</span></span><br><span class="line">										sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">									&#125;</span><br><span class="line">									<span class="keyword">else</span> &#123;</span><br><span class="line">										echo <span class="string">&quot;生产环境发版,等待领导确认&quot;</span></span><br><span class="line">										script &#123;</span><br><span class="line">											input <span class="attr">message:</span> <span class="string">&quot;请确认是否部署 $&#123;Scope&#125;： &quot;</span>,<span class="attr">ok :</span> <span class="string">&#x27;确认&#x27;</span>,<span class="attr">submitter:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">										&#125;</span><br><span class="line">										echo <span class="string">&#x27;已确认，即将发布&#x27;</span></span><br><span class="line">										sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">										sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">									&#125;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins_update_error-Signature verification failed in update site</title>
    <url>/Jenkins-update-error-Signature-verification-failed-in-update-site/</url>
    <content><![CDATA[<p>Signature verification failed in update site</p>
<span id="more"></span>
<h5 id="背景说明："><a href="#背景说明：" class="headerlink" title="背景说明："></a>背景说明：</h5><p>Jenkins升级到<a href="https://jenkins.io/">Jenkins 2.249.2版本</a></p>
<h5 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h5><p><strong>插件管理</strong>  报错：<strong>Signature verification failed in update site</strong></p>
<p><img src="/Jenkins-update-error-Signature-verification-failed-in-update-site/./jenkins_error01.png" alt></p>
<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>启动命令中增加 <strong>-Dhudson.model.DownloadService.noSignatureCheck=true</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /jenkins/tomcat/bin/catalina.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JAVA_OPTS=&#x27;&#x27;&#x27;-server -Xms4096m -Xmx8192m -Dhudson.model.DirectoryBrowserSupport.CSP=&quot;&quot; -Dhudson.model.DownloadService.noSignatureCheck=true &#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="/Jenkins-update-error-Signature-verification-failed-in-update-site/./jenkins_error03.png" alt></p>
<h5 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h5><p><img src="/Jenkins-update-error-Signature-verification-failed-in-update-site/./jenkins_error02.png" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-HostAliases</title>
    <url>/Kubernetes-HostAliases/</url>
    <content><![CDATA[<p>k8s里增加hosts<br><span id="more"></span></p>
<blockquote>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/">https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/</a></p>
</blockquote>
<p>k8s上微服务之间可以通过service的域名来互相访问。域名的解析是一般是通过在集群中的kube-dns来完成的。</p>
<p>如需向Pod的/etc/hosts文件添加条目实现解析需求时，可以使用Pod Spec中的HostAliases字段添加自定义条目。</p>
<p>例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">service/networking/hostaliases-pod.yaml</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hostaliases-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">hostAliases:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="attr">hostnames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;foo.local&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;bar.local&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">&quot;10.1.2.3&quot;</span></span><br><span class="line">    <span class="attr">hostnames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;foo.remote&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;bar.remote&quot;</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cat-hosts</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;/etc/hosts&quot;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">vcg-gateway</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">vcg-gateway</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">vcg-gateway</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">vcg-gateway</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aliyun_logs_vcg-gateway</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">stdout</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            registry-vpc.cn-beijing.aliyuncs.com/vcg/vcg-gateway:pro-20190423162116</span></span><br><span class="line"><span class="string"></span>          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">vcg-gateway</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">4Gi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1000Mi</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">hostAliases:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">hostnames:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">www.vcg.com</span></span><br><span class="line">          <span class="attr">ip:</span> <span class="number">39.97</span><span class="number">.197</span><span class="number">.135</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">hostnames:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">www1.visualchina.com</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">www1.vcg.com</span></span><br><span class="line">          <span class="attr">ip:</span> <span class="number">39.97</span><span class="number">.21</span><span class="number">.16</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">registry-vpc.cn-beijing.aliyuncs.com</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes_Nginx-Ingress</title>
    <url>/Kubernetes-Nginx-Ingress/</url>
    <content><![CDATA[<p>Kubernetes_Nginx-Ingress<br><span id="more"></span></p>
<h2 id="For-example"><a href="#For-example" class="headerlink" title="For example"></a>For example</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/force-ssl-redirect: <span class="string">&#x27;true&#x27;</span> <span class="comment">#代表其中跳转</span></span><br><span class="line">    nginx.ingress.kubernetes.io/service-weight: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-redirect: <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  creationTimestamp: <span class="string">&#x27;2018-12-25T10:29:36Z&#x27;</span></span><br><span class="line">  generation: 1</span><br><span class="line">  name: boss</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&#x27;21429383&#x27;</span></span><br><span class="line">  selfLink: /apis/extensions/v1beta1/namespaces/default/ingresses/boss</span><br><span class="line">  uid: fa56e2a0-082f-11e9-80cf-00163e0e2421</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: boss1.vcg.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - backend:</span><br><span class="line">              serviceName: node-vcg-boss</span><br><span class="line">              servicePort: 80</span><br><span class="line">            path: /</span><br><span class="line">  tls:</span><br><span class="line">    - hosts:</span><br><span class="line">        - boss1.vcg.com</span><br><span class="line">      secretName: vcg-https</span><br><span class="line">status:</span><br><span class="line">  loadBalancer:</span><br><span class="line">    ingress:</span><br><span class="line">      - ip: 39.97.21.16</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-Secrets</title>
    <url>/Kubernetes-Secrets/</url>
    <content><![CDATA[<p>Kubernetes保密字典<br><span id="more"></span></p>
<h4 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h4><p>若您需要在 Kubernetes 集群中使用一些敏感的配置，比如密码、证书等信息时，建议使用密钥（secret），即保密字典。</p>
<p>密钥有多种类型，例如：</p>
<ul>
<li>Service Account：用来访问 Kubernetes API，由 Kubernetes 自动创建，并且会自动挂载到 Pod 的/run/secrets/kubernetes.io/serviceaccount目录中。</li>
<li>Opaque：base64 编码格式的 Secret，用来存储密码、证书等敏感信息。</li>
</ul>
<p>Opaque 类型的数据是一个 map 类型，要求value 是 base64 编码格式</p>
<p>您也可通过命令行手动创建密钥，请参见 <a href="https://kubernetes.io/docs/concepts/configuration/secret/">kubernetes secret</a> 了解更多信息。</p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret</span><br><span class="line"></span><br><span class="line">Create a secret using specified subcommand.</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  docker-registry Create a secret for use with a Docker registry</span><br><span class="line">  generic         Create a secret from a local file, directory or literal value</span><br><span class="line">  tls             Create a TLS secret</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl create secret [flags] [options]</span><br></pre></td></tr></table></figure>
<h5 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ kubectl get secrets</span><br><span class="line">NAME                               TYPE                                  DATA   AGE</span><br><span class="line">default-token-msfm9                kubernetes.io/service-account-token   3      24d</span><br><span class="line">registry.cn-beijing.aliyuncs.com   kubernetes.io/dockerconfigjson        1      24d</span><br><span class="line">veer-https                         kubernetes.io/tls                     2      3h25m</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ kubectl describe secrets veer-https</span><br><span class="line">Name:         veer-https</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/tls</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">tls.crt:  3941 bytes</span><br><span class="line">tls.key:  1676 bytes</span><br></pre></td></tr></table></figure>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete secret $NAME</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="创建SSL证书"><a href="#创建SSL证书" class="headerlink" title="创建SSL证书"></a>创建SSL证书</h5><ol>
<li><h6 id="准备公钥、私钥文件"><a href="#准备公钥、私钥文件" class="headerlink" title="准备公钥、私钥文件"></a>准备公钥、私钥文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ ls</span><br><span class="line">veer.key  veer.pem</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret tls veer-https --cert=./veer.pem --key=./veer.key</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ kubectl get secrets veer-https</span><br><span class="line">NAME         TYPE                DATA   AGE</span><br><span class="line">veer-https   kubernetes.io/tls   2      3h22m</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-kubectl</title>
    <url>/Kubernetes-kubectl/</url>
    <content><![CDATA[<p>管理Kubernetes集群的工具</p>
<span id="more"></span>
<hr>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol>
<li><h6 id="下载最新版的kubectl客户端"><a href="#下载最新版的kubectl客户端" class="headerlink" title="下载最新版的kubectl客户端"></a>下载最新版的kubectl客户端</h6><p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md&gt;">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md&gt;</a></p>
</li>
<li><h6 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h6><p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/&gt;">https://kubernetes.io/docs/tasks/tools/install-kubectl/&gt;</a></p>
</li>
<li><p>验证安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kuberctl version</span><br></pre></td></tr></table></figure>
<p><img src="/Kubernetes-kubectl/kubectl-version.jpg" alt="kuberctl-version.jpg"></p>
</li>
<li><h6 id="配置集群凭证"><a href="#配置集群凭证" class="headerlink" title="配置集群凭证"></a>配置集群凭证</h6><p>您可以使用<strong>scp</strong>命令安全地将主节点的配置从 Kubernetes 集群主 VM 中的 <code>/etc/kubernetes/kube.conf</code> 复制到本地计算机的 <code>$HOME/.kube/config</code>（<code>kubectl</code> 预期凭据所在的位置）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir $HOME/.kube</span><br><span class="line">scp root@&lt;master-public-ip&gt;:/etc/kubernetes/kube.conf $HOME/.kube/config</span><br></pre></td></tr></table></figure>
<p>公有云环境也可以在集群配置页面获取到config配置</p>
</li>
<li><p>验证连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubect get all</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h5><h6 id="help-获取帮助信息"><a href="#help-获取帮助信息" class="headerlink" title="help-获取帮助信息"></a>help-获取帮助信息</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaohongye ~ ^-^ #kubectl help</span><br><span class="line">kubectl controls the Kubernetes cluster manager.</span><br><span class="line"></span><br><span class="line">Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/</span><br><span class="line"></span><br><span class="line">Basic Commands (Beginner):</span><br><span class="line">  create         Create a resource from a file or from stdin.</span><br><span class="line">  expose         使用 replication controller, service, deployment 或者 pod</span><br><span class="line">并暴露它作为一个 新的 Kubernetes Service</span><br><span class="line">  run            在集群中运行一个指定的镜像</span><br><span class="line">  set            为 objects 设置一个指定的特征</span><br><span class="line">  run-container  在集群中运行一个指定的镜像. This command is</span><br><span class="line">deprecated, use &quot;run&quot; instead</span><br><span class="line"></span><br><span class="line">Basic Commands (Intermediate):</span><br><span class="line">  get            显示一个或更多 resources</span><br><span class="line">  explain        查看资源的文档</span><br><span class="line">  edit           在服务器上编辑一个资源</span><br><span class="line">  delete         Delete resources by filenames, stdin, resources and names, or</span><br><span class="line">by resources and label selector</span><br><span class="line"></span><br><span class="line">Deploy Commands:</span><br><span class="line">  rollout        Manage the rollout of a resource</span><br><span class="line">  rolling-update 完成指定的 ReplicationController 的滚动升级</span><br><span class="line">  scale          为 Deployment, ReplicaSet, Replication Controller 或者 Job</span><br><span class="line">设置一个新的副本数量</span><br><span class="line">  autoscale      自动调整一个 Deployment, ReplicaSet, 或者</span><br><span class="line">ReplicationController 的副本数量</span><br><span class="line"></span><br><span class="line">Cluster Management Commands:</span><br><span class="line">  certificate    修改 certificate 资源.</span><br><span class="line">  cluster-info   显示集群信息</span><br><span class="line">  top            Display Resource (CPU/Memory/Storage) usage.</span><br><span class="line">  cordon         标记 node 为 unschedulable</span><br><span class="line">  uncordon       标记 node 为 schedulable</span><br><span class="line">  drain          Drain node in preparation for maintenance</span><br><span class="line">  taint          更新一个或者多个 node 上的 taints</span><br><span class="line"></span><br><span class="line">Troubleshooting and Debugging Commands:</span><br><span class="line">  describe       显示一个指定 resource 或者 group 的 resources 详情</span><br><span class="line">  logs           输出容器在 pod 中的日志</span><br><span class="line">  attach         Attach 到一个运行中的 container</span><br><span class="line">  exec           在一个 container 中执行一个命令</span><br><span class="line">  port-forward   Forward one or more local ports to a pod</span><br><span class="line">  proxy          运行一个 proxy 到 Kubernetes API server</span><br><span class="line">  cp             复制 files 和 directories 到 containers</span><br><span class="line">和从容器中复制 files 和 directories.</span><br><span class="line">  auth           Inspect authorization</span><br><span class="line"></span><br><span class="line">Advanced Commands:</span><br><span class="line">  apply          通过文件名或标准输入流(stdin)对资源进行配置</span><br><span class="line">  patch          使用 strategic merge patch 更新一个资源的 field(s)</span><br><span class="line">  replace        通过 filename 或者 stdin替换一个资源</span><br><span class="line">  convert        在不同的 API versions 转换配置文件</span><br><span class="line"></span><br><span class="line">Settings Commands:</span><br><span class="line">  label          更新在这个资源上的 labels</span><br><span class="line">  annotate       更新一个资源的注解</span><br><span class="line">  completion     Output shell completion code for the specified shell (bash or</span><br><span class="line">zsh)</span><br><span class="line"></span><br><span class="line">Other Commands:</span><br><span class="line">  api-versions   Print the supported API versions on the server, in the form of</span><br><span class="line">&quot;group/version&quot;</span><br><span class="line">  config         修改 kubeconfig 文件</span><br><span class="line">  help           Help about any command</span><br><span class="line">  plugin         Runs a command-line plugin</span><br><span class="line">  version        输出 client 和 server 的版本信息</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl [flags] [options]</span><br><span class="line"></span><br><span class="line">Use &quot;kubectl &lt;command&gt; --help&quot; for more information about a given command.</span><br><span class="line">Use &quot;kubectl options&quot; for a list of global command-line options (applies to all</span><br><span class="line">commands).</span><br></pre></td></tr></table></figure>
<h6 id="get-获取信息"><a href="#get-获取信息" class="headerlink" title="get-获取信息"></a>get-获取信息</h6><p>Display one or many resources</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Examples:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all pods <span class="keyword">in</span> ps output format.</span></span><br><span class="line">  kubectl get pods</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all pods <span class="keyword">in</span> ps output format with more information (such as node name).</span></span><br><span class="line">  kubectl get pods -o wide</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List a single replication controller with specified NAME <span class="keyword">in</span> ps output format.</span></span><br><span class="line">  kubectl get replicationcontroller web</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List a single pod <span class="keyword">in</span> JSON output format.</span></span><br><span class="line">  kubectl get -o json pod web-pod-13je7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List a pod identified by <span class="built_in">type</span> and name specified <span class="keyword">in</span> <span class="string">&quot;pod.yaml&quot;</span> <span class="keyword">in</span> JSON output format.</span></span><br><span class="line">  kubectl get -f pod.yaml -o json</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Return only the phase value of the specified pod.</span></span><br><span class="line">  kubectl get -o template pod/web-pod-13je7 --template=&#123;&#123;.status.phase&#125;&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all replication controllers and services together <span class="keyword">in</span> ps output format.</span></span><br><span class="line">  kubectl get rc,services</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List one or more resources by their <span class="built_in">type</span> and names.</span></span><br><span class="line">  kubectl get rc/web service/frontend pods/web-pod-13je7</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all resources with different types.</span></span><br><span class="line">  kubectl get all</span><br></pre></td></tr></table></figure>
<h6 id="scale-扩缩容"><a href="#scale-扩缩容" class="headerlink" title="scale-扩缩容"></a>scale-扩缩容</h6><p>Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Examples:</span><br><span class="line">  # Scale a replicaset named &#x27;foo&#x27; to 3.</span><br><span class="line">  kubectl scale --replicas=3 rs/foo</span><br><span class="line"></span><br><span class="line">  # Scale a resource identified by type and name specified in &quot;foo.yaml&quot; to 3.</span><br><span class="line">  kubectl scale --replicas=3 -f foo.yaml</span><br><span class="line"></span><br><span class="line">  # If the deployment named mysql&#x27;s current size is 2, scale mysql to 3.</span><br><span class="line">  kubectl scale --current-replicas=2 --replicas=3 deployment/mysql</span><br><span class="line"></span><br><span class="line">  # Scale multiple replication controllers.</span><br><span class="line">  kubectl scale --replicas=5 rc/foo rc/bar rc/baz</span><br><span class="line"></span><br><span class="line">  # Scale statefulset named &#x27;web&#x27; to 3.</span><br><span class="line">  kubectl scale --replicas=3 statefulset/web</span><br><span class="line">  </span><br><span class="line">  kubectl scale Deployment node-vcg-web --replicas=1</span><br><span class="line">  kubectl scale Deployment node-vcg-web --replicas=10</span><br></pre></td></tr></table></figure>
<p>批量扩缩容    </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in `kubectl get deployment | awk &#x27;&#123;print $1&#125;&#x27; |grep -v NAME`; do</span><br><span class="line">   kubectl scale Deployment $i --replicas=1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h6 id="exec-在container中执行命令"><a href="#exec-在container中执行命令" class="headerlink" title="exec-在container中执行命令"></a>exec-在container中执行命令</h6><p>Execute a command in a container.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">  -c, --container=&#x27;&#x27;: Container name. If omitted, the first container in the pod will be chosen</span><br><span class="line">  -p, --pod=&#x27;&#x27;: Pod name</span><br><span class="line">  -i, --stdin=false: Pass stdin to the container</span><br><span class="line">  -t, --tty=false: Stdin is a TTY</span><br><span class="line">Examples:</span><br><span class="line">  kubectl exec 123456-7890 -c ruby-container -it -- bash -il</span><br><span class="line">Usage:</span><br><span class="line">  kubectl exec POD [-c CONTAINER] -- COMMAND [args...] [options]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes</title>
    <url>/Kubernetes/</url>
    <content><![CDATA[<p>Kubernetes是Google开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理。<br><span id="more"></span></p>
<h4 id="Kubernetes是什么"><a href="#Kubernetes是什么" class="headerlink" title="Kubernetes是什么"></a>Kubernetes是什么</h4><p><a href="https://kubernetes.io/">Kubernetes</a>是一个很容易地部署和管理容器化的应用软件系统，使用Kubernetes能够方便对容器进行调度和编排。</p>
<p>对应用开发者而言，可以把Kubernetes看成一个集群操作系统。Kubernetes提供服务发现、伸缩、负载均衡、自愈甚至选举等功能，让开发者从基础设施相关配置等解脱出来。</p>
<p>Kubernetes可以把大量的服务器看做一台巨大的服务器，在一台大服务器上面运行应用程序。无论Kubernetes的集群有多少台服务器，在Kubernetes上部署应用程序的方法永远一样。</p>
<p>图1 在Kubernetes集群上运行应用程序</p>
<p><img src="/Kubernetes/./zh-cn_image_0258869759.png" alt="img"></p>
<h4 id="Kubernetes集群架构"><a href="#Kubernetes集群架构" class="headerlink" title="Kubernetes集群架构"></a>Kubernetes集群架构</h4><p>Kubernetes集群包含master节点和node节点，应用部署在node节点上，且可以通过配置选择应用部署在某些特定的节点上。</p>
<p>Kubernetes集群的架构如下所示。</p>
<p>图2 Kubernetes集群架构</p>
<p><img src="/Kubernetes/./zh-cn_image_0267028603.png" alt="img"></p>
<p><strong>Master节点</strong></p>
<p>Master节点是集群的控制节点，由API Server、Scheduler、Controller Manager和ETCD四个组件构成。</p>
<ul>
<li>API Server：各组件互相通讯的中转站，接受外部请求，并将信息写到ETCD中。</li>
<li>Controller Manager：执行集群级功能，例如复制组件，跟踪Node节点，处理节点故障等等。</li>
<li>Scheduler：负责应用调度的组件，根据各种条件（如可用的资源、节点的亲和性等）将容器调度到Node上运行。</li>
<li>ETCD：一个分布式数据存储组件，负责存储集群的配置信息。</li>
</ul>
<p>在生产环境中，为了保障集群的高可用，通常会部署多个master，如CCE集群的高可用模式就是3个master节点。</p>
<p><strong>Node节点</strong></p>
<p>Node节点是集群的计算节点，即运行容器化应用的节点。</p>
<ul>
<li>kubelet：kubelet主要负责同Container Runtime打交道，并与API Server交互，管理节点上的容器。</li>
<li>kube-proxy：应用组件间的访问代理，解决节点上应用的访问问题。</li>
<li>Container Runtime：容器运行时，如Docker，最主要的功能是下载镜像和运行容器。</li>
</ul>
<h4 id="Kubernetes的扩展性"><a href="#Kubernetes的扩展性" class="headerlink" title="Kubernetes的扩展性"></a>Kubernetes的扩展性</h4><p>Kubernetes开放了容器运行时接口（CRI）、容器网络接口（CNI）和容器存储接口（CSI），这些接口让Kubernetes的扩展性变得最大化，而Kubernetes本身则专注于容器调度。</p>
<ul>
<li>CRI（Container Runtime Interface）：容器运行时接口，提供计算资源，CRI隔离了各个容器引擎之间的差异，而通过统一的接口与各个容器引擎之间进行互动。</li>
<li>CNI（Container Network Interface）：容器网络接口，提供网络资源，通过CNI接口，Kubernetes可以支持不同网络环境。例如华为云CCE就是开发的CNI插件支持Kubernetes集群运行在华为云VPC网络中。</li>
<li>CSI（Container Storage Interface）：容器存储接口，提供存储资源，通过CSI接口，Kubernetes可以支持各种类型的存储。例如华为云CCE就可以方便的对接华为云块存储（EVS）、文件存储（SFS）和对象存储（OBS）。</li>
</ul>
<h4 id="Kubernetes中的基本对象"><a href="#Kubernetes中的基本对象" class="headerlink" title="Kubernetes中的基本对象"></a>Kubernetes中的基本对象</h4><p>上面介绍Kubernetes集群的构成，下面将介绍Kubernetes中基本对象及它们之间的一些关系。</p>
<p>图3 Kubernetes基本对象</p>
<p><img src="/Kubernetes/./zh-cn_image_0258869062.png" alt="img"></p>
<ul>
<li><p>Pod</p>
<p>Pod是Kubernetes创建或部署的最小单位。一个Pod封装一个或多个容器（container）、存储资源（volume）、一个独立的网络IP以及管理控制容器运行方式的策略选项。</p>
</li>
<li><p>Deployment</p>
<p>Deployment是对Pod的服务化封装。一个Deployment可以包含一个或多个Pod，每个Pod的角色相同，所以系统会自动为Deployment的多个Pod分发请求。</p>
</li>
<li><p>StatefulSet</p>
<p>StatefulSet 是用来管理有状态应用的对象。和Deployment相同的是，StatefulSet管理了基于相同容器定义的一组Pod。但和 Deployment 不同的是，StatefulSet为它们的每个Pod维护了一个固定的ID。这些Pod是基于相同的声明来创建的，但是不能相互替换：无论怎么调度，每个Pod都有一个永久不变的ID。</p>
</li>
<li><p>Job</p>
<p>Job是用来控制批处理型任务的对象。批处理业务与长期伺服业务（Deployment）的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出（Pod自动删除）。</p>
</li>
<li><p>CronJob</p>
<p>CronJob是基于时间控制的Job，类似于Linux系统的crontab，在指定的时间周期运行指定的任务。</p>
</li>
<li><p>DaemonSet</p>
<p>DaemonSet 是这样一种对象（守护进程），它在集群的每个节点上运行一个 Pod，且保证只有一个 Pod，这非常适合一些系统层面的应用，例如日志收集、资源监控等，这类应用需要每个节点都运行，且不需要太多实例，一个比较好的例子就是 Kubernetes 的 kube-proxy。</p>
</li>
<li><p>Service</p>
<p>Service是用来解决Pod访问问题的。Service有一个固定IP地址，Service将访问流量转发给Pod，而且Service可以给这些Pod做负载均衡。</p>
</li>
<li><p>Ingress</p>
<p>Service是基于四层TCP和UDP协议转发的，Ingress可以基于七层的HTTP和HTTPS协议转发，可以通过域名和路径做到更细粒度的划分。</p>
</li>
<li><p>ConfigMap</p>
<p>ConfigMap是一种用于存储应用所需配置信息的资源类型，用于保存配置数据的键值对。通过ConfigMap可以方便的做到配置解耦，使得不同环境有不同的配置。</p>
</li>
<li><p>Secret</p>
<p>Secret是一种加密存储的资源对象，您可以将认证信息、证书、私钥等保存在Secret中，而不需要把这些敏感数据暴露到镜像或者Pod定义中，从而更加安全和灵活。</p>
</li>
<li><p>PersistentVolume（PV）</p>
<p>PV指持久化数据存储卷，主要定义的是一个持久化存储在宿主机上的目录，比如一个NFS的挂载目录。</p>
</li>
<li><p>PersistentVolumeClaim（PVC）</p>
<p>Kubernetes提供PVC专门用于持久化存储的申请，PVC可以让您无需关心底层存储资源如何创建、释放等动作，而只需要申明您需要何种类型的存储资源、多大的存储空间。</p>
</li>
</ul>
<h4 id="搭建Kubernetes集群"><a href="#搭建Kubernetes集群" class="headerlink" title="搭建Kubernetes集群"></a>搭建Kubernetes集群</h4><p><a href="https://kubernetes.io/docs/setup/">Kubernetes网站</a>上有多种搭建Kubernetes集群的方法，例如minikube、kubeadm等。</p>
<h4 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h4><p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl</a>是Kubernetes集群的命令行工具，您可以将kubectl安装在任意一台机器上，通过kubectl命令操作Kubernetes集群。</p>
<p>连接后您可以执行kubectl cluster-info查看集群的信息，如下所示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl cluster-info</span></span><br><span class="line">Kubernetes master is running at https://*.*.*.*:5443</span><br><span class="line">CoreDNS is running at https://*.*.*.*:5443/api/v1/namespaces/kube-system/services/coredns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use &#x27;kubectl cluster-info dump&#x27;.</span><br></pre></td></tr></table></figure>
<p>执行kubectl get nodes可以查看集群中的Node节点信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl get nodes</span></span><br><span class="line">NAME            STATUS    ROLES     AGE       VERSION</span><br><span class="line">192.168.0.153   Ready     &lt;none&gt;    7m        v1.15.6-r1-20.3.0.2.B001-15.30.2</span><br><span class="line">192.168.0.207   Ready     &lt;none&gt;    7m        v1.15.6-r1-20.3.0.2.B001-15.30.2</span><br><span class="line">192.168.0.221   Ready     &lt;none&gt;    7m        v1.15.6-r1-20.3.0.2.B001-15.30.2</span><br></pre></td></tr></table></figure>
<h4 id="Kubernetes对象的描述"><a href="#Kubernetes对象的描述" class="headerlink" title="Kubernetes对象的描述"></a>Kubernetes对象的描述</h4><p>kubernetes中资源可以使用YAML描述（如果您对YAML格式不了解，可以参考<a href="https://support.huaweicloud.com/devg-cci/cci_05_1001.html">YAML语法</a>），也可以使用JSON。其内容可以分为如下四个部分。</p>
<ul>
<li>typeMeta：对象类型的元信息，声明对象使用哪个API版本，哪个类型的对象。</li>
<li>objectMeta：对象的元信息，包括对象名称、使用的标签等。</li>
<li>spec：对象的期望状态，例如对象使用什么镜像、有多少副本等。</li>
<li>status：对象的实际状态，只能在对象创建后看到，创建对象时无需指定。</li>
</ul>
<p>图4 YAML描述文件</p>
<p><img src="/Kubernetes/./zh-cn_image_0267047098.png" alt></p>
<h4 id="在Kubernetes上运行应用"><a href="#在Kubernetes上运行应用" class="headerlink" title="在Kubernetes上运行应用"></a>在Kubernetes上运行应用</h4><p>将<a href="https://support.huaweicloud.com/basics-cce/kubernetes_0003.html#kubernetes_0003__fig370933922411">图4</a>中的内容去除status存为一个名为nginx-deployment.yaml的文件，如下所示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span>  <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span>  <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span>  <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span>  <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span>  <span class="string">nginx:alpine</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-secret</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用kubectl连接集群后，执行如下命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl create -f nginx-deployment.yaml</span> </span><br><span class="line">deployment.apps/nginx created</span><br></pre></td></tr></table></figure>
<p>命令执行后，Kubernetes集群中会创建3个Pod，使用如下命令可以查询到Deployment和Pod。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kubectl get deploy</span></span><br><span class="line">NAME    READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx   3/3     3            3           9s</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kubectl get pods</span></span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-685898579b-qrt4d   1/1     Running   0          15s</span><br><span class="line">nginx-685898579b-t9zd2   1/1     Running   0          15s</span><br><span class="line">nginx-685898579b-w59jn   1/1     Running   0          15s</span><br></pre></td></tr></table></figure>
<p>到此为止，您了解容器和Docker、Kubernetes集群、Kubernetes基本概念，并通过一个示例了解kubectl的最基本使用，本文后续将向您深入介绍Kubernetes对象的概念以及使用方法，并介绍对象之间的关系。</p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)阿里巴巴DevOps实践手册</title>
    <url>/ali-devops-practice/</url>
    <content><![CDATA[<p>do what you loveeee<br><span id="more"></span><br><div class="pdfobject-container" data-target="./阿里巴巴DevOps实践手册.pdf" data-height="500px"></div></p>
]]></content>
  </entry>
  <entry>
    <title>Flow cli 扩展云效测试自动化能力--robotframework web UI</title>
    <url>/ali-flow-autotest-robot-web-ui/</url>
    <content><![CDATA[<p>阿里云云效创建企业自定义步骤，增强个性化需求。</p>
<span id="more"></span>
<p>云效飞流作为新一代的持续交付流水线平台，内置了很多好用的步骤组件。可是，每年都有很多新的工具和框架涌现出来，飞流不可能内置所有这些框架和工具的支持。这个时候，作为企业用户的我们该怎么办呢？ 幸运的是，飞流在设计时考虑到了这个问题，提供了非常方便好用的<a href="https://thoughts.aliyun.com/sharespace/5e86a419546fd9001aee81f2/docs/5e86a418546fd9001aee81ea">flow cli工具</a>。</p>
<p>demo：<a href="https://github.com/GeekSRE/ali-flow-step-robotframework.git">https://github.com/GeekSRE/ali-flow-step-robotframework.git</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在flow cli的<a href="https://thoughts.aliyun.com/sharespace/5e86a419546fd9001aee81f2/docs/5e86a418546fd9001aee81ea">帮助页面</a>有提供各个平台的flow工具下载，根据你的系统情况选择对应的链接下载即可。笔者在mac上进行开发，所以下载的是darwin/amd64的版本。下载下来之后，建议将其重命名为flow，并放到系统PATH里面，比如/usr/local/bin。</p>
<p><img src="/ali-flow-autotest-robot-web-ui/./flow01.png" alt></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>在创建具体的step之前，建议先执行flow login进行用户权限认证。 认证通过后，执行flow step init &lt;步骤名&gt;创建一个新的step，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flow step init robotframework</span><br><span class="line">ls -la # 可以看到多出了.step和robotframework目录</span><br><span class="line">cd robotframework # 我们自定义step的工作区就在这个目录，之后run和publish的操作都要在这个目录下执行</span><br><span class="line">ls -la # 可以看到里面包含Dockerfile、step.sh和step.yaml几个文件</span><br></pre></td></tr></table></figure>
<h3 id="配置step-yaml"><a href="#配置step-yaml" class="headerlink" title="配置step.yaml"></a>配置step.yaml</h3><p>首先，我们来配置step.yaml文件，这里只列出需要关注的字段。</p>
<ul>
<li><strong>name:</strong> 步骤名称，显示在飞流界面上</li>
<li><strong>sign: </strong>唯一的step签名，一般不用修改</li>
<li><strong>image: </strong>根据step的Dockerfile构建的镜像名，要求能够被public地docker pull，而且必须要有tag</li>
<li><strong>items: </strong>步骤的配置项，可以配置多个<ul>
<li>普通配置项<ul>
<li>label: 配置项的标签名</li>
<li>name: 变量名，会被export为环境变量</li>
<li>type: 为shell、input、password、textarea、shell、select、text_label、checkbox中的一个，参照<a href="https://thoughts.aliyun.com/sharespace/5e86a419546fd9001aee81f2/docs/5e86a419546fd9001aee81eb">步骤yaml描述语言</a>。</li>
<li>rules: 输入规则</li>
</ul>
</li>
<li>红线配置</li>
</ul>
</li>
</ul>
<p>示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">vcg-robotframework</span></span><br><span class="line"><span class="attr">sign:</span> <span class="string">vcg-robotframework</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">vcg-robotframework</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">registry.cn-beijing.aliyuncs.com/vcg-open/robotframework:1.0</span></span><br><span class="line"><span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">label:</span> <span class="string">执行命令</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">STEP_COMMAND</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">shell</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      # NOTE: output directory should be robot_logs</span></span><br><span class="line"><span class="string">      robot -L Trace -d robot_logs .</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="attr">label:</span> <span class="string">红线信息</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">CHECK_REDLINES</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">addable_group</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">require:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">add_button:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">icon</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">plus</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">增加红线</span></span><br><span class="line">      <span class="attr">tip:</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">question-circle</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">红线校验失败步骤标记为失败</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redline</span></span><br><span class="line">          <span class="attr">label:</span> <span class="string">红线</span></span><br><span class="line">          <span class="attr">position:</span> <span class="string">flat</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">custom_redline_dropdown</span></span><br><span class="line">          <span class="attr">datamap:</span> <span class="string">&#x27;[&#123;&quot;key&quot;: &quot;PassRate&quot;, &quot;type&quot;:&quot;GE&quot;&#125;]&#x27;</span></span><br><span class="line">          <span class="attr">rules:</span></span><br><span class="line">            <span class="string">-requires:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>通常只需要关注datamap字段，这里的key是红线判断的字段，必须与step.sh里面redline的参数中的字段对应。</p>
<h3 id="编写step-sh"><a href="#编写step-sh" class="headerlink" title="编写step.sh"></a>编写step.sh</h3><p>具体的执行步骤在step.sh中定义，前半部分的变量定义不需要修改。</p>
<ol>
<li>根据用户输入执行命令，robotframework这个例子中是“bash -c “$STEP_COMMAND””，这里的STEP_COMMAND在step.yaml里面定义</li>
<li>如果有红线配置，通过redline命令进行显示，其每个参数的格式为key:text:value:style。</li>
</ol>
<p>示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统提供参数，从流水线上下文获取</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] PIPELINE_ID=<span class="variable">$PIPELINE_ID</span>       <span class="comment"># 流水线ID</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] PIPELINE_NAME=<span class="variable">$PIPELINE_NAME</span>   <span class="comment"># 流水线名称</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] BUILD_NUMBER=<span class="variable">$BUILD_NUMBER</span>     <span class="comment"># 流水线运行实例编号</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] EMPLOYEE_ID=<span class="variable">$EMPLOYEE_ID</span>       <span class="comment"># 触发流水线用户ID</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] WORK_SPACE=<span class="variable">$WORK_SPACE</span>         <span class="comment"># /root/workspace容器中目录</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] PROJECT_DIR=<span class="variable">$PROJECT_DIR</span>       <span class="comment"># 代码库根路径，默认为/root/workspace/code</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] PLUGIN_DIR=<span class="variable">$PLUGIN_DIR</span>         <span class="comment"># 插件路径，默认为/root/workspace/plugins</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] BUILD_JOB_ID=<span class="variable">$BUILD_JOB_ID</span>     <span class="comment"># build-service 任务ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># custom variable</span></span><br><span class="line">OUTPUT_DIR=<span class="string">&quot;<span class="variable">$PROJECT_DIR</span>/robot_logs&quot;</span></span><br><span class="line">OUTPUT_XML=<span class="string">&quot;<span class="variable">$OUTPUT_DIR</span>/output.xml&quot;</span></span><br><span class="line"><span class="built_in">echo</span> [INFO] OUTPUT_XML=<span class="variable">$OUTPUT_XML</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PROJECT_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sh -ex $WORK_SPACE/user_command.sh</span></span><br><span class="line">bash -c <span class="string">&quot;<span class="variable">$STEP_COMMAND</span>&quot;</span></span><br><span class="line"></span><br><span class="line">output=`python3 /root/parse_output.py <span class="variable">$OUTPUT_XML</span>`</span><br><span class="line"></span><br><span class="line">STEP_ROBOT_PASS=`<span class="built_in">echo</span> <span class="variable">$output</span> | awk -F, <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">STEP_ROBOT_FAILED=`<span class="built_in">echo</span> <span class="variable">$output</span> | awk -F, <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">STEP_ROBOT_PASSRATE=`<span class="built_in">echo</span> <span class="variable">$output</span> | awk -F, <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">redline Passed:成功:<span class="variable">$STEP_ROBOT_PASS</span>:Success Failed:失败:<span class="variable">$STEP_ROBOT_FAILED</span>:Error PassRate:成功率:<span class="variable">$STEP_ROBOT_PASSRATE</span>:Default</span><br></pre></td></tr></table></figure>
<h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><p>注意：基础镜像不能为alpine，同时要安装有bash和jq。 建议采用debian作为基础镜像，确保.step/*.sh被拷贝到/root/目录下，并且保持ENTRYPOINT为”/root/entry.sh”。 </p>
<h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><p>以Ubuntu/Debian Linux系统为例，需要安装：</p>
<ul>
<li>python3</li>
<li>xvfb</li>
<li>robotframework</li>
<li>robotframework-selenium2library</li>
<li>pyvirtualdisplay</li>
<li>chromedriver和chrome浏览器</li>
</ul>
<p>示例：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> registry.cn-beijing.aliyuncs.com/rdc-builds/base:<span class="number">1.0</span></span><br><span class="line"><span class="comment">#FROM ubuntu:18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> .step/*.sh /root/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> robotframework/step.sh /root/step.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> robotframework/parse_output.py /root/parse_output.py</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> robotframework/jq /usr/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i -E <span class="string">&#x27;s/[a-z]+.ubuntu.com/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp;\</span></span><br><span class="line"><span class="bash">        apt-get update &amp;&amp; apt-get install -y python3 xvfb python3 python3-pip xvfb unzip wget &amp;&amp;\</span></span><br><span class="line"><span class="bash">        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb &amp;&amp;\</span></span><br><span class="line"><span class="bash">        apt-get install ./google-chrome-stable_current_amd64.deb -y &amp;&amp; rm -f google-chrome-stable_current_amd64.deb &amp;&amp;\</span></span><br><span class="line"><span class="bash">        wget http://npm.taobao.org/mirrors/chromedriver/87.0.4280.88/chromedriver_linux64.zip &amp;&amp; unzip chromedriver_linux64.zip &amp;&amp; mv chromedriver /usr/bin &amp;&amp; rm -f chromedriver_linux64.zip &amp;&amp;\</span></span><br><span class="line"><span class="bash">        pip3 install -i https://pypi.douban.com/simple --no-cache-dir robotframework robotframework-selenium2library pyvirtualdisplay</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y curl language-pack-zh-hans fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;LANG=\&quot;zh_CN.UTF-8\&quot;&quot;</span> &gt;&gt; /etc/environment &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;LANGUAGE=\&quot;zh_CN:zh:en_US:en\&quot;&quot;</span> &gt;&gt; /etc/environment &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;en_US.UTF-8 UTF-8&quot;</span> &gt;&gt; /var/lib/locales/supported.d/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;zh_CN.UTF-8 UTF-8&quot;</span> &gt;&gt; /var/lib/locales/supported.d/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;zh_CN.GBK GBK&quot;</span> &gt;&gt; /var/lib/locales/supported.d/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;zh_CN GB2312&quot;</span> &gt;&gt; /var/lib/locales/supported.d/<span class="built_in">local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> locale-gen &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;export LANG=C.UTF-8&quot;</span> &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /root/*.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/root/entry.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<h3 id="保存和显示结果报告"><a href="#保存和显示结果报告" class="headerlink" title="保存和显示结果报告"></a>保存和显示结果报告</h3><p>飞流提供了报告上传的步骤，在自定义步骤之后加上报告上传步骤即可上传和显示结果报告，非常方便，见下面使用部分。</p>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><p>在robotframework目录下执行flow step run即可在本地进行运行调试。 按照提示设置WORK_SPACE和两个变量，这些会保存在robotframework目录下的params.env文件中，你也可以手动编辑该文件。 示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STEP_COMMAND=&#x27;robot -d robot_logs .&#x27;</span><br><span class="line">CHECK_REDLINES=&#x27;[&#123;\&quot;identifier\&quot;:\&quot;10_1581409320500__10_1581421770772__CHECK_REDLINES__0\&quot;,\&quot;key\&quot;:\&quot;PassRate\&quot;,\&quot;type\:\&quot;GE\&quot;&#125;]&#x27;</span><br><span class="line">WORK_SPACE=&#x27;/Users/zhaohongye/yunxiao/robotframework&#x27;   # 根据自己实际路径填写</span><br></pre></td></tr></table></figure>
<p>执行flow step run，如果最后的执行结果显示“SUCCESS”，则步骤执行成功。</p>
<p><img src="/ali-flow-autotest-robot-web-ui/./robot01.png" alt></p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>通过flow step publish即可将步骤发布到选择的企业中。 发布前，需要确保：</p>
<ol>
<li>如果之前没有登录过或是长时间未登录，重新执行flow login</li>
<li>发布的过程会将docker镜像上传到step.yaml文件定义的地址，确保有对应docker仓库的上传权限</li>
<li>在飞流步骤中使用，该镜像要能被匿名下载访问，请配置正确的镜像访问权限</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>编辑流水线，添加一个空白任务</li>
</ol>
<p><img src="/ali-flow-autotest-robot-web-ui/./robot02.png" alt></p>
<ol>
<li>添加自定义步骤，如“RobotFramework测试”，配置红线</li>
</ol>
<p><img src="/ali-flow-autotest-robot-web-ui/./robot03.png" alt></p>
<ol>
<li>添加上传报告步骤</li>
</ol>
<p><img src="/ali-flow-autotest-robot-web-ui/./robot04.png" alt></p>
<ol>
<li>保存，运行流水线</li>
</ol>
<p><img src="https://code.aliyun.com/yunxiao-solution/flow-step-robotframework/raw/master/images/create_step_4.png" alt="create step 4"></p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>自定义flow step适用于很多场景，常见的有：</p>
<ol>
<li>支持特定语言的构建</li>
</ol>
<p>当前飞流支持的语言有Java、Python、Go、Javascript等，如果企业使用其他的开发语言，则可以通过自定义flow step的方式创建自己的构建步骤。同时，还可以使用自己优化过的SDK、内部工具等提升效率。</p>
<ol>
<li>支持特定的代码扫描工具，并进行红线卡点</li>
</ol>
<p>代码扫描工具千差万别，无法全部支持，特别是企业会对工具进行二次开发，导致无法在飞流中使用。这种情况下，创建自己的flow step就可以非常好地解决这个问题。</p>
<ol>
<li>支持特定的测试框架或工具</li>
</ol>
<p>测试可能是创建自定义flow step最主要的一类需求，很多企业或团队有自己的测试工具和框架，很难用飞流现有的组件组装，同时，在红线上侧重点也不同。以单元测试覆盖率为例，有的团队关注行覆盖率，有的更看重条件覆盖率等等。此时，通过自定义flow step就可以满足各类团队的测试需求。</p>
<ol>
<li>与企业自研系统对接</li>
</ol>
<p>最常见的可能是发布部署的时候，很多企业有自己的发布流程管控系统，逻辑一般比较复杂，通过脚本很难处理和维护。而通过flow step就容易多了，可以在里面使用自研的工具和脚本，集成起来非常方便。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol>
<li>在飞流上执行自定义步骤时遇到“jq: command not found” &gt; 检查你的Dockerfile文件，确保基于Dockerfile构建的镜像中包含jq命令，如果没有的话，从jq官网下载适合的版本，在Dockerfile里面添加拷贝jq的步骤，如：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY robotframework/jq /usr/bin/</span><br></pre></td></tr></table></figure>
<ol>
<li><p>“flow step publish”的时候出现“panic: invalid character ‘&lt;’ looking for beginning of value”错误</p>
<blockquote>
<p>可能是登录信息过期了，重新执行flow login，再执行flow step publish</p>
</blockquote>
</li>
<li><p>“flow step run”的时候出现“redline: command not found”</p>
<blockquote>
<p>查看step.sh的第一行，如果是“#!/bin/sh”，改成“#!/bin/bash”再试一下。 如果还有问题，在flow step目录的父目录再次执行flow step init，再重试。如flow step目录名为robotframework，就在它的父目录下执行flow init，再cd robotframework; flow step run</p>
</blockquote>
</li>
<li><p>“flow step publish”的时候提示“Step sign 已被占用”</p>
<blockquote>
<p>一个flow step只能publish到一个企业中，如果已经publish到A企业，再publish到B企业就会有这个问题。可以修改step.yaml文件里面的sign，再次尝试publish。</p>
</blockquote>
</li>
<li><p>在飞流上执行自定义步骤时遇到“standard_init_linux.go:211: exec user process caused “no such file or directory””</p>
<blockquote>
<p>Dockerfile里的基础镜像不能基于alpine，改为采用debian等作为基础镜像</p>
</blockquote>
</li>
<li><p>在自定义步骤上配置了红线，但是无论是否满足红线，步骤总是成功</p>
<blockquote>
<p>检查字段的数据必须是整数，如果是浮点数，会出现判断问题。 之后检查执行日志，在日志的最后看是否有类似： <code>[07:41:25] [10_1582788661882__10_1582788671425] REDLINE_ITEM_LINE: &#123;&quot;key&quot;:&quot;PassRate&quot;,&quot;threshold&quot;:100,&quot;checkVal&quot;:50.00,&quot;type&quot;:&quot;GE&quot;,&quot;checked&quot;:true,&quot;checkResult&quot;:false&#125;</code> 这样的输出，有这个输出才表示进行了红线卡点。</p>
</blockquote>
</li>
<li><p>在飞流上执行自定义步骤时报“运行失败，请检查日志”</p>
<blockquote>
<p>红线检查前的执行步骤必须是成功的，如果命令执行出错，则后面的步骤不会生效。如： robot atest 修改为 robot atest || echo “got error!”</p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>ali_kt</title>
    <url>/ali-kt/</url>
    <content><![CDATA[<p>阿里开源 KT Connnect，轻量级云原生测试环境治理平台来啦！<br><span id="more"></span></p>
<h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://developer.aliyun.com/article/751321?scm=20140722.184.2.173">https://developer.aliyun.com/article/751321?scm=20140722.184.2.173</a></p>
<p><a href="https://www.v2ex.com/t/584314">https://www.v2ex.com/t/584314</a></p>
<p><a href="https://github.com/alibaba/kt-connect">https://github.com/alibaba/kt-connect</a></p>
<p><a href="https://alibaba.github.io/kt-connect/#/">https://alibaba.github.io/kt-connect/#/</a></p>
<p>目前越来越多的开发者开始采纳 Kubernetes 管理基础设施环境，并通过 Kubernetes 完成日常的开发，测试以及生产发布活动，为了能够有效的帮助开发者提升在 Kubernetes 场景下的本地开发测试效率，阿里巴巴研发效能云效团队面向原生 Kubernetes 开源了一款轻量级的开发者工具 KT Connect。</p>
<h3 id="1、KT-Connect-是什么"><a href="#1、KT-Connect-是什么" class="headerlink" title="1、KT Connect 是什么"></a>1、KT Connect 是什么</h3><p>KT Connect （ Kubernetes Developer Tool ） 是轻量级的面向 Kubernetes 用户的开发测试环境治理辅助工具。其核心是通过建立本地到集群以及集群到本地的双向通道，从而提升在持续交付生命周期中开发环节的效率问题以及开发测试环境的复用问题：</p>
<p><img src="/ali-kt/./kt1.png" alt></p>
<p>KT Connect 包含一组用于快速实现本地与集群联调的 Cli 命令集： <strong>connect，exchange，mesh </strong>以及一个集中式的可视化 <strong>Dashboard</strong>。</p>
<ul>
<li><strong>connect： </strong>在 kubectl 的基础上基于 SSH 协议构建本地到 Kubernetes 集群的 VPN 网络，使得用户本地能够直接访问 Kubernetes 集群的内部网络如 PodIP, ClusterIP。同时基于内置的 DNS 服务，开发者本地可以直接访问集群内的 Service DNS 地址。</li>
<li><strong>exchange： </strong>通过部署代理容器接管集群内对特定应用的全部流量并转发到开发者本地端口，从而帮助开发者将本地服务加入到集群中从而实现联调测试。</li>
<li><strong>mesh： </strong>与 exchange 类似，区别在于 mesh 不会完全接管所有流量，而是在 Service 后部署一个带有特定版本号的 Pod 实例，配合 Istio 的流量管理规则，从而可以将特定流量转发到开发者本地。</li>
</ul>
<p>通过 KT Connect 提供的上述能力，开发者可以从传统的“开发-构建-部署”的场景中解脱，直接实现本地开发本地联调，从而可以极大的提升开发效率。同时通过 Mesh 提供混合能力，通过复用测试环境减少在基础设施层面的资源投入。</p>
<h3 id="2、KT-Connect-的优势"><a href="#2、KT-Connect-的优势" class="headerlink" title="2、KT Connect 的优势"></a>2、KT Connect 的优势</h3><p>KT Connect 源于阿里巴巴研发效能在测试规模化环境治理上的丰富经验，同时受启发于像 Azure Dev Spaces 和 Telepresence 这样的开发者工具，而形成的一套面向原生 Kubernetes 用户的测试环境治理以及本地联调解决方案：</p>
<ul>
<li>原生 Kubernetes 支持：兼容任意 Kubernetes 集群，同时支持以 kubectl 插件的方式运行；</li>
<li>轻量级：基于 Go 实现，且只在 connect 的 VPN 网络能力方面主要依赖 SSHUttle 工具，无其它任何第三方依赖；用户可以在任意能正常运行 kubectl 的环境中使用 KT Connect ；</li>
<li>多种应用场景：通过与原生 Istio 的集成，支持用户独占式或者共享开发测试环境；</li>
<li>可视化：基于同一的 Dashboard 以及可视化能力，让用户更直观的了解测试环境的使用情况。</li>
<li>可扩展性：KT Connect 中提供了详细的元数据信息，用户可以快速基于 Kubernetes API 扩展 Dashboard 以及功能；</li>
</ul>
<h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><h4 id="安装-kubectl"><a href="#安装-kubectl" class="headerlink" title="安装 kubectl"></a>安装 kubectl</h4><p>安装文档：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">https://kubernetes.io/docs/tasks/tools/install-kubectl/</a></p>
<h4 id="配置K8S集群凭证"><a href="#配置K8S集群凭证" class="headerlink" title="配置K8S集群凭证"></a>配置K8S集群凭证</h4><p>在用户家目录创建 .kube目录，并将config文件放入该目录</p>
<h4 id="安装-KT"><a href="#安装-KT" class="headerlink" title="安装 KT"></a>安装 KT</h4><h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><h6 id="Install-sshuttle"><a href="#Install-sshuttle" class="headerlink" title="Install sshuttle"></a>Install sshuttle</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install sshuttle</span><br></pre></td></tr></table></figure>
<h6 id="Download-And-Install-KT"><a href="#Download-And-Install-KT" class="headerlink" title="Download And Install KT"></a>Download And Install KT</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -OL https://rdc-incubators.oss-cn-beijing.aliyuncs.com/stable/ktctl_darwin_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xzvf ktctl_darwin_amd64.tar.gz</span><br><span class="line">mv ktctl_darwin_amd64 /usr/local/bin/ktctl</span><br><span class="line"></span><br><span class="line">ktctl -h</span><br></pre></td></tr></table></figure>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p><a href="https://github.com/alibaba/kt-connect/releases下载安装包![](./kt2.png)">https://github.com/alibaba/kt-connect/releases下载安装包![](./kt2.png)</a></p>
<p>解压安装包获取ktctl.exe文件。</p>
<h3 id="4、连接"><a href="#4、连接" class="headerlink" title="4、连接"></a>4、连接</h3><h4 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ktctl connect</span><br></pre></td></tr></table></figure>
<h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ktctl connect --method=socks5 --dump2hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新开CMD窗口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">export http_proxy=socks5://127.0.0.1:2223</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 访问集群服务</span></span><br><span class="line"></span><br><span class="line">curl http://&lt;POD_IP&gt;:&lt;PORT&gt; #本地直接访问PodIP</span><br><span class="line">curl http://&lt;CLUSTER_IP&gt;:&lt;PORT&gt; # 本地直接访问ClusterIP</span><br><span class="line">curl http://&lt;SVC_NAME&gt;:&lt;PORT&gt; #使用Service的域名访问</span><br></pre></td></tr></table></figure>
<p><img src="/ali-kt/./kt3.png" alt></p>
<p><img src="/ali-kt/./kt4.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>阿里云OSS对象存储中的图片数据迁移到京东云OSS</title>
    <url>/ali-oss-cp-jd-oss/</url>
    <content><![CDATA[<p>阿里云OSS对象存储中的图片数据迁移到京东云OSS</p>
<h4 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h4><p>使用阿里云提供的 <a href="https://help.aliyun.com/document_detail/50452.html">ossutil</a> 工具进行下载操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ossutil cp oss://static-vcg/veer/static/ veer/static/</span><br></pre></td></tr></table></figure>
<h4 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h4><p>使用Amazon提供的 <a href="https://docs.jdcloud.com/cn/object-storage-service/s3cmd">s3cmd</a> 工具进行上传操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">s3cmd put --recursive static/ s3://vcg-veer-static/static/</span><br></pre></td></tr></table></figure>
<h4 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h4><p>上传到京东云后发现浏览器访问oss里的图片，会以下载的形式展示，需要更改为在线展示。</p>
<p>询问京东技术后重新上传，增加 <strong>–content-type=”image/svg+xml”</strong>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup s3cmd put --recursive --content-type=&quot;image/svg+xml&quot;   static/ s3://vcg-veer-static/static/ &amp;</span><br></pre></td></tr></table></figure>
<p>重新上传后，清除本地缓存，刷新CDN目录或指定资源即可正常访问。</p>
<h4 id="调用京东云SDK获取OSS文件的属性"><a href="#调用京东云SDK获取OSS文件的属性" class="headerlink" title="调用京东云SDK获取OSS文件的属性"></a>调用京东云SDK获取OSS文件的属性</h4><p><a href="https://docs.jdcloud.com/cn/object-storage-service/sdk-python">SDK-Python</a></p>
<h5 id="安装pip和boto3"><a href="#安装pip和boto3" class="headerlink" title="安装pip和boto3"></a>安装pip和boto3</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install boto3</span><br></pre></td></tr></table></figure>
<p>创建client</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3  </span><br><span class="line">        </span><br><span class="line">ACCESS_KEY = <span class="string">&#x27;your accesskey&#x27;</span>  </span><br><span class="line">SECRET_KEY = <span class="string">&#x27;your secretkey&#x27;</span>  </span><br><span class="line">s3 = boto3.client(  </span><br><span class="line">    <span class="string">&#x27;s3&#x27;</span>,  </span><br><span class="line">    aws_access_key_id=ACCESS_KEY,  </span><br><span class="line">    aws_secret_access_key=SECRET_KEY,  </span><br><span class="line">    <span class="comment">#下面给出一个endpoint_url的例子  </span></span><br><span class="line">    endpoint_url=<span class="string">&#x27;https://s3.cn-north-1.jdcloud-oss.com&#x27;</span>  </span><br><span class="line">    )  </span><br><span class="line">s3.head_object(Bucket=<span class="string">&#x27;vcg-veer-static&#x27;</span>,Key=<span class="string">&#x27;static/landing/icon_search_white.svg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>返回值如下：</p>
<p><img src="/ali-oss-cp-jd-oss/./jd-sdk-python.jpg" alt="jd-sdk-python.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>ali_safe-centos_7&amp;8_hostBase</title>
    <url>/ali-safe-centos-7-8-hostBase/</url>
    <content><![CDATA[<p>阿里云标准-CentOS Linux 7/8安全基线检查<br><span id="more"></span><br><strong>注意：操作时建议做好记录或备份</strong></p>
<h5 id="身份鉴别"><a href="#身份鉴别" class="headerlink" title="身份鉴别"></a>身份鉴别</h5><ul>
<li><p>确保root是唯一的UID为0的帐户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">除root以外其他UID为0的用户都应该删除，或者为其分配新的UID</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">除root以外其他UID为0的用户(查看命令`cat /etc/passwd | awk -F: &#x27;($3 == 0) &#123; print $1 &#125;&#x27;|grep -v &#x27;^root$&#x27;`)都应该删除，或者为其分配新的UID</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保密码到期警告天数为7或更多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">确保密码到期警告天数为7或更多</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">在 /etc/login.defs 中将 PASS_WARN_AGE 参数设置为7-14之间，建议为7：</span><br><span class="line"></span><br><span class="line">PASS_WARN_AGE 7</span><br><span class="line"></span><br><span class="line">同时执行命令使root用户设置生效：</span><br><span class="line"></span><br><span class="line">chage --warndays 7 root</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查系统空密码账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">检查系统空密码账户</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">为用户设置一个非空密码，或者执行passwd -l &lt;username&gt;锁定用户</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查密码重用是否受限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">强制用户不重用最近使用的密码，降低密码猜测攻击风险</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">在/etc/pam.d/password-auth和/etc/pam.d/system-auth中password sufficient pam_unix.so 这行的末尾配置remember参数为5-24之间，原来的内容不用更改，只在末尾加了remember=5。</span><br></pre></td></tr></table></figure>
</li>
<li><p>密码复杂度检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">检查密码长度和密码是否使用多种字符类型</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">编辑/etc/security/pwquality.conf，把minlen（密码最小长度）设置为8-32位，把minclass（至少包含小写字母、大写字母、数字、特殊字符等4类字符中等3类或4类）设置为3或4。如：</span><br><span class="line"></span><br><span class="line">minlen=10</span><br><span class="line">minclass=3</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置密码修改最小间隔时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">设置密码修改最小间隔时间，限制密码更改过于频繁</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">在 /etc/login.defs 中将 PASS_MIN_DAYS 参数设置为7-14之间,建议为7：</span><br><span class="line"></span><br><span class="line">PASS_MIN_DAYS 7</span><br><span class="line"></span><br><span class="line">需同时执行命令为root用户设置：</span><br><span class="line"></span><br><span class="line">chage --mindays 7 root</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置密码失效时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">设置密码失效时间，强制定期修改密码，减少密码被泄漏和猜测风险，使用非密码登陆方式(如密钥对)请忽略此项。</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">使用非密码登陆方式如密钥对，请忽略此项。在 /etc/login.defs中将 PASS_MAX_DAYS 参数设置为 60-180之间，如:</span><br><span class="line"></span><br><span class="line">PASS_MAX_DAYS 90</span><br><span class="line"></span><br><span class="line">需同时执行命令设置root密码失效时间：</span><br><span class="line"></span><br><span class="line">chage --maxdays 90 root</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="入侵防范"><a href="#入侵防范" class="headerlink" title="入侵防范"></a>入侵防范</h5><ul>
<li><p>开启地址空间布局随机化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">它将进程的内存空间地址随机化来增大入侵者预测目的地址难度，从而降低进程被成功入侵的风险</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">在/etc/sysctl.conf或/etc/sysctl.d/*文件中设置以下参数： kernel.randomize_va_space = 2 执行命令： sysctl -w kernel.randomize_va_space=2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h5><ul>
<li><p>确保SSH LogLevel设置为INFO</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">确保SSH LogLevel设置为INFO</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数(取消注释):</span><br><span class="line"></span><br><span class="line">LogLevel INFO</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置SSH空闲超时退出时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">设置SSH空闲超时退出时间,可降低未授权用户访问其他用户ssh会话的风险</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">编辑/etc/ssh/sshd_config，将ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax设置为0-3之间。</span><br><span class="line"></span><br><span class="line">ClientAliveInterval 600</span><br><span class="line">ClientAliveCountMax 2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a>安全审计</h5><ul>
<li><p>确保rsyslog服务已启用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">确保rsyslog服务已启用，记录日志用于审计</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">运行以下命令启用rsyslog服务：</span><br><span class="line"></span><br><span class="line">systemctl enable rsyslog</span><br><span class="line">systemctl start rsyslog</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="SSH服务配置"><a href="#SSH服务配置" class="headerlink" title="SSH服务配置"></a>SSH服务配置</h5><ul>
<li><p>禁止SSH空密码用户登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">禁止SSH空密码用户登录</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">编辑文件/etc/ssh/sshd_config，将PermitEmptyPasswords配置为no:</span><br><span class="line"></span><br><span class="line">PermitEmptyPasswords no</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保SSH MaxAuthTries设置为3到6之间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险。</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">在/etc/ssh/sshd_config中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，建议为4：</span><br><span class="line"></span><br><span class="line">MaxAuthTries 4</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h5><ul>
<li><p>设置用户权限配置文件的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">设置用户权限配置文件的权限</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">执行以下5条命令</span><br><span class="line"></span><br><span class="line">chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadow</span><br><span class="line">chmod 0644 /etc/group  </span><br><span class="line">chmod 0644 /etc/passwd  </span><br><span class="line">chmod 0400 /etc/shadow  </span><br><span class="line">chmod 0400 /etc/gshadow </span><br></pre></td></tr></table></figure>
</li>
<li><p>访问控制配置文件的权限设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述:</span><br><span class="line">访问控制配置文件的权限设置</span><br><span class="line"></span><br><span class="line">加固建议:</span><br><span class="line">运行以下4条命令：</span><br><span class="line"></span><br><span class="line">chown root:root /etc/hosts.allow </span><br><span class="line">chown root:root /etc/hosts.deny </span><br><span class="line">chmod 644 /etc/hosts.deny</span><br><span class="line">chmod 644 /etc/hosts.allow</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Safe</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里日志服务-费用优化实践</title>
    <url>/ali-sls-cost-optimization/</url>
    <content><![CDATA[<p><img src="/ali-sls-cost-optimization/z.jpg" alt></p>
<span id="more"></span>
<h2 id="背景情况"><a href="#背景情况" class="headerlink" title="背景情况"></a>背景情况</h2><p>日志服务存储量较大，费用明显增高</p>
<p><img src="/ali-sls-cost-optimization/./sls01.png" alt></p>
<p>查看费用账单，可以看到日志服务费用为7万5千块钱，费用较高。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先在<strong>账单明细</strong>中查看日志服务详细的计量计费信息，包括请求次数、存储空间、索引流量、活跃Shard租用等。</p>
<p><img src="/ali-sls-cost-optimization/./sls03.png" alt="image-20210219090909012"></p>
<p>表格排序后看到存储量较大的project和logstore信息。</p>
<h2 id="费用优化"><a href="#费用优化" class="headerlink" title="费用优化"></a>费用优化</h2><p>费用和两方面因素相关：</p>
<ul>
<li>数据量：用户的数据量是业务决定的，无法优化。</li>
<li>配置：使用和数据量相匹配的配置，选择最优的解决方案，才能使成本最小化。</li>
</ul>
<h3 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h3><p>配置可以从以下两个方面进行优化：</p>
<ul>
<li><p>分区个数</p>
<p>一个分区最大可以处理5M/s的数据。只有readwrite的分区会收费。请调整分区个数，使其正好能处理5M/s的数据。减少分区个数请合并分区。</p>
</li>
<li><p>Logstore 数据保存周期</p>
<p>针对您对日志的查询、存储的需求不同，建议您优化Logstore 数据保存周期。</p>
<ul>
<li>如果您收集日志是为了做流计算，建议您只使用LogHub，不创建索引。</li>
<li>如果您需要经常查询最近90天的日志数据，偶尔查询90天前的数据，建议您把Logstore 数据保存周期调整到90天，同时把数据导入MaxCompute。查询90天内数据，使用日志服务，查询90天前数据，使用MaxCompute。</li>
<li>如果您对日志有长时间存储和备份的需求，建议您把日志导入到OSS。</li>
</ul>
</li>
</ul>
<h3 id="其他优化建议"><a href="#其他优化建议" class="headerlink" title="其他优化建议"></a>其他优化建议</h3><ul>
<li>使用Logtail：有 Batch 与断点续传功能，在保障实时性的同时以最优算法传输数据。Logtail 消耗资源是开源软件（Logstash，FluentD）的1/4，减少CPU消耗。</li>
<li>API写入用户尽量使用64KB~1MB大包写入，减少请求次数。</li>
<li>索引关键字段，例如UserID，Action等，对无用字段不配置索引。</li>
</ul>
<h2 id="脚本优化方案："><a href="#脚本优化方案：" class="headerlink" title="脚本优化方案："></a>脚本优化方案：</h2><p>通过脚本实现批量修改logstore数据保存周期</p>
<p>1、获取北京区域日志服务所有logstore的ttl保留时间配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aliyun.log <span class="keyword">import</span> LogClient</span><br><span class="line">endpoint = <span class="string">&#x27;cn-beijing.log.aliyuncs.com&#x27;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读ak即可</span></span><br><span class="line">accessKeyId = <span class="string">&#x27;&#x27;</span></span><br><span class="line">accessKey = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">client = LogClient(endpoint, accessKeyId, accessKey)</span><br><span class="line"></span><br><span class="line">projectsList = client.list_project().get_body()[<span class="string">&#x27;projects&#x27;</span>]</span><br><span class="line"><span class="comment"># project</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> project <span class="keyword">in</span> projectsList:</span><br><span class="line">    projectName = project[<span class="string">&#x27;projectName&#x27;</span>]</span><br><span class="line">    <span class="comment"># 获取所有logstore</span></span><br><span class="line">    logstoresList=client.list_logstore(projectName).get_body()[<span class="string">&#x27;logstores&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> logstoreName <span class="keyword">in</span> logstoresList:</span><br><span class="line">        ttl = client.get_logstore(projectName,logstoreName).get_body()[<span class="string">&#x27;ttl&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(ttl) <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">3</span>,<span class="number">7</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s,%s,%s&#x27;</span> % (projectName,logstoreName,ttl))</span><br></pre></td></tr></table></figure>
<p>2、统一修改ttl</p>
<p>首先要确定数据保留的规则，我们目前的规范为：</p>
<p>生产数据保留7天，非生产保留3天，nginx日志长期保留，特殊日志、有指定需求的日志长期保留。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aliyun.log <span class="keyword">import</span> LogClient</span><br><span class="line">endpoint = <span class="string">&#x27;cn-beijing.log.aliyuncs.com&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#需对日志服务有写权限</span></span><br><span class="line">accessKeyId = <span class="string">&#x27;&#x27;</span></span><br><span class="line">accessKey = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">client = LogClient(endpoint, accessKeyId, accessKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只改特定几个project</span></span><br><span class="line">projectsList = [<span class="string">&#x27;k8s-log-cb16adeacafeb4b9b988ae5d7e8bf0fc1&#x27;</span>,<span class="string">&#x27;k8s-log-c2ab41eea4b8143efa03879fb49a9a282&#x27;</span>,<span class="string">&#x27;k8s-log-c502d303ba7fb4fd5b01aa091f9cc79fe&#x27;</span>,<span class="string">&#x27;proj-xtrace-eb2cce493ffc5c6328dfd9e39e9f38c-cn-beijing&#x27;</span>,<span class="string">&#x27;k8s-log-c37c707c4b45b4b7ab09265f449492802&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> projectName <span class="keyword">in</span> projectsList:</span><br><span class="line">    <span class="comment"># 获取所有logstore</span></span><br><span class="line">    logstoresList=client.list_logstore(projectName).get_body()[<span class="string">&#x27;logstores&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> logstoreName <span class="keyword">in</span> logstoresList:</span><br><span class="line">        ttl = client.get_logstore(projectName,logstoreName).get_body()[<span class="string">&#x27;ttl&#x27;</span>]</span><br><span class="line">        <span class="comment"># 保留时间不是3的，改为3。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(ttl) != <span class="number">3</span>:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;%s,%s,%s&#x27;</span> % (projectName,logstoreName,ttl))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 系统生产的特定logstore，无权修改ttl值，需排除</span></span><br><span class="line">        <span class="keyword">if</span> logstoreName <span class="keyword">in</span> [<span class="string">&#x27;internal-diagnostic_log&#x27;</span>,<span class="string">&#x27;internal-operation_log&#x27;</span>]:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            client.update_logstore(projectName,logstoreName,ttl=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>阿里云产品我想退款如何操作</title>
    <url>/ali-tuikuan/</url>
    <content><![CDATA[<p>阿里云产品退款工单怎么填</p>
<h5 id="进入“工单系统”"><a href="#进入“工单系统”" class="headerlink" title="进入“工单系统”"></a>进入“工单系统”</h5><p><img src="/ali-tuikuan/./1564537171046.jpg" alt></p>
<h5 id="选择相关产品，点击“提问”"><a href="#选择相关产品，点击“提问”" class="headerlink" title="选择相关产品，点击“提问”"></a>选择相关产品，点击“提问”</h5><p><strong>本次演示为ECS实例退款</strong></p>
<p><img src="/ali-tuikuan/./1564537202981.jpg" alt></p>
<h5 id="选择“续费-配置变更”-创建工单"><a href="#选择“续费-配置变更”-创建工单" class="headerlink" title="选择“续费/配置变更”-创建工单"></a>选择“续费/配置变更”-创建工单</h5><p><img src="/ali-tuikuan/./1564537232860.jpg" alt></p>
<h5 id="填写工单"><a href="#填写工单" class="headerlink" title="填写工单"></a>填写工单</h5><p><img src="/ali-tuikuan/./1564537617373.jpg" alt></p>
<p>问题描述内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）退款原因（以便我方改进产品不足）： 业务不再需要</span><br><span class="line">（2）申请退款的产品实例ID：</span><br><span class="line">i-2ze73nwbpiwe8oy2s8fd</span><br><span class="line">i-2zeeif4aj2ietoreexyz</span><br><span class="line">i-2zebsfqkvhcijbbtuqqj</span><br><span class="line">i-2zeixwbfspqnyju4qvdk</span><br><span class="line">i-2zeacxjlg8xlgh1kp053</span><br><span class="line">i-2zeawy8pclj79pt1amvx</span><br><span class="line">i-2ze095o6ifge7szwor5j</span><br><span class="line">i-2zea9n9e5ru6ebvf4nuv</span><br><span class="line">i-2zea410j2fhwth7wp0s6</span><br><span class="line">i-25z4mycbd</span><br><span class="line">i-25m8j9t4v</span><br><span class="line">i-251nzqk8t</span><br><span class="line">i-25zq6kyad</span><br><span class="line">i-25yentipk</span><br><span class="line">（3）已使用时长所对应的费用不退回，请您确认已知晓； 确认</span><br><span class="line">（4）代金券支付部分无法退回，请您确认已知晓： 确认</span><br><span class="line">（5）主机或实例是否已备份？若已备份，请回复“数据已备份”；若无需备份，请回复“数据无需备份” 。（退款后服务器实例立即被清除，数据不再保留，请提前备份数据）  数据已备份。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>阿里云WAF + Kubernetes Ingress 架构下无法拿到客户端真实IP的问题处理</title>
    <url>/ali-waf-realip/</url>
    <content><![CDATA[<p>运维经验分享<br><span id="more"></span></p>
<h5 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h5><p>2019年04月19日晚21:10分进行网络维护，内容如下：</p>
<p>​    将域名CNAME到阿里云的Web防火墙（以下简称为WAF），业务请求经防火墙解析到Kubernetes 的 Ingress 的负载均衡（SLB）地址</p>
<h5 id="故障现象："><a href="#故障现象：" class="headerlink" title="故障现象："></a>故障现象：</h5><p>​    后端应用通过获取请求中的X-Forwarded-For字段，拿到的IP地址为WAF回源地址，非客户端真实IP。</p>
<h5 id="排查记录"><a href="#排查记录" class="headerlink" title="排查记录:"></a>排查记录:</h5><ol>
<li><p>21:15 查看Ingress日志，发现Ingress拿到的IP就是WAF回源地址，为错误IP，确定非前端nodejs代码bug。</p>
</li>
<li><p>21:33  联系阿里云技术团队一起排查问题。</p>
</li>
<li><p>22:20  确认Ingress的模板文件中 the_real_ip 变量是拿的 remote_addr 字段，等待阿里技术联系Ingree研发同学，给出回复。</p>
</li>
<li><p>23:23 Ingree研发同学联系上后确认Ingress没问题，可能是WAF没传真实IP到Ingress。</p>
</li>
<li><p>23:50 在Ingress容器和前端nodejs所在宿主机tcpdump工具抓包后分析得出：</p>
<p>(1)、WAF已经将真实客户端地址放到了 x-Forwarded-For 的字段中传给了ECS<br>(2)、ECS(容器的ingress)将真实的客户端IP，放到了x-Original-Forwarded-For；而将WAF的回源地址放到了 x-Forwarded-For</p>
</li>
<li><p>4月20日 00:29 将compute-full-forwarded-for配置到Ingress的ConfigMap中，问题解决。</p>
</li>
</ol>
<h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system edit cm nginx-configuration</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在data标签下添加如下：</span><br><span class="line">compute-full-forwarded-for: &quot;true&quot;</span><br><span class="line">forwarded-for-header: &quot;X-Forwarded-For&quot;</span><br><span class="line">use-forwarded-headers: &quot;true&quot;</span><br></pre></td></tr></table></figure>
<h5 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h5><p>阿里云容器服务Kubernetes集群的Ingress默认ConfigMap中未配置 compute-full-forwarded-for参数，导致将ingress拿到的WAF回源IP替换为XFF，而非附加到XFF中。</p>
<p><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#compute-full-forwarded-for">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#compute-full-forwarded-for</a></p>
<h5 id="反思："><a href="#反思：" class="headerlink" title="反思："></a>反思：</h5><ol>
<li><p>预览环境和线上环境架构不一致：</p>
<p>此次故障中，预览环境未使用WAF防护，直接解析到K8S集群，未提前发现此次问题，已修正，以后尽量维持环境统一，避免此类问题出现。</p>
</li>
<li><p>故障点定位速度慢：</p>
<p>网络请求问题优先抓包分析，提升故障定位速度，后续夯实基础知识，提升问题排查能力。</p>
</li>
<li><p>Kubernetes专业知识掌握程度较低</p>
<p>目前仅仅在使用层面上能力ok，但是其实现原理、组件实现方式等知识点薄弱，后续还需在K8S学习中多总结，多学习，争取减少故障，提升运维能力。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>2020新版云效-流水线体验</title>
    <url>/ali-yunxiao-tiyan/</url>
    <content><![CDATA[<p>2020新版云效-流水线体验<br><span id="more"></span></p>
<h4 id="云效介绍"><a href="#云效介绍" class="headerlink" title="云效介绍"></a>云效介绍</h4><p>「云效」，企业级一站式DevOps解决方案，源于阿里巴巴先进的管理理念和工程实践，致力于成为数字企业的研发效能引擎!云效提供从“需求 -&gt;开发-&gt;测试-&gt;发布-&gt;运维-&gt;运营”端到端的协同服务和研发工具，支持公共云、专有云和混合云多种部署形态，通过人工智能、自动化 技术的应用助力开发者提升研发效能，持续快速交付有效价值。</p>
<p><img src="/ali-yunxiao-tiyan/./yunxiao.png" alt></p>
<h4 id="新版流水线体验"><a href="#新版流水线体验" class="headerlink" title="新版流水线体验"></a>新版流水线体验</h4><h5 id="登录云效平台"><a href="#登录云效平台" class="headerlink" title="登录云效平台"></a>登录云效平台</h5><p>新地址：<a href="https://devops.aliyun.com/">https://devops.aliyun.com/</a></p>
<h5 id="切换至流水线模块"><a href="#切换至流水线模块" class="headerlink" title="切换至流水线模块"></a>切换至<strong>流水线</strong>模块</h5><p><img src="/ali-yunxiao-tiyan/./yunxiao1.png" alt></p>
<p>可以看到，流水线创建共分四个步骤：</p>
<ol>
<li>选择模版</li>
<li>选择源</li>
<li>配置任务</li>
<li>运行成功</li>
</ol>
<h5 id><a href="#" class="headerlink" title></a><img src="/ali-yunxiao-tiyan/./yunxiao2.png" alt></h5><h5 id="选择模版"><a href="#选择模版" class="headerlink" title="选择模版"></a>选择模版</h5><p>本次演示 服务语言类型为Python，构建Docker镜像后发布到镜像仓库</p>
<p><img src="/ali-yunxiao-tiyan/./yunxiao3.png" alt></p>
<h5 id="配置代码源"><a href="#配置代码源" class="headerlink" title="配置代码源"></a>配置代码源</h5><p>镜像源选择公司自建Gitlab，配置个人证书，用于拉取代码</p>
<p><img src="/ali-yunxiao-tiyan/./yunxiao4.png" alt></p>
<h5 id="配置镜像仓库信息"><a href="#配置镜像仓库信息" class="headerlink" title="配置镜像仓库信息"></a>配置镜像仓库信息</h5><p>需新建服务授权，拿到镜像服务的授权后，配置仓库地址，镜像Tag信息。</p>
<p><img src="/ali-yunxiao-tiyan/./yunxiao5.png" alt></p>
<h5 id="运行流水线"><a href="#运行流水线" class="headerlink" title="运行流水线"></a>运行流水线</h5><p><img src="/ali-yunxiao-tiyan/./yunxiao6.png" alt></p>
<h5 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h5><p><img src="/ali-yunxiao-tiyan/./yunxiao8.png" alt></p>
<p><img src="/ali-yunxiao-tiyan/./yunxiao9.png" alt></p>
<p><img src="/ali-yunxiao-tiyan/./yunxiao10.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Ansible-批量修改密码</title>
    <url>/ansible-change-password/</url>
    <content><![CDATA[<p>介绍使用ansible批量修改用户密码的方法，因为在使用ansible修改用户密码的时候不能使用明文的方式，需要先加密，所以就需要使用一个方法对输入的明文的密码进行加密，下面就直接上干货。<br><span id="more"></span></p>
<h5 id="更改多个固定域名"><a href="#更改多个固定域名" class="headerlink" title="更改多个固定域名"></a>更改多个固定域名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat changePasswd.yaml</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">change</span> <span class="string">user</span> <span class="string">passwd</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">password=&#123;&#123;</span> <span class="string">item.chpass</span> <span class="string">|</span> <span class="string">password_hash(&#x27;sha512&#x27;)</span> <span class="string">&#125;&#125;</span>  <span class="string">update_password=always</span></span><br><span class="line">    <span class="attr">with_items:</span></span><br><span class="line">         <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&#x27;root&#x27;</span>, <span class="attr">chpass:</span> <span class="string">&#x27;***********&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook changePasswd.yaml</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible-快速添加免密码认证</title>
    <url>/ansible-config-password-auth/</url>
    <content><![CDATA[<p>Ansible使用小技巧<br><span id="more"></span></p>
<h4 id="生成管理机的私钥和公钥"><a href="#生成管理机的私钥和公钥" class="headerlink" title="生成管理机的私钥和公钥"></a>生成管理机的私钥和公钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -P &#x27;&#x27; -f /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h4 id="添加主机信息到主机清单中"><a href="#添加主机信息到主机清单中" class="headerlink" title="添加主机信息到主机清单中"></a>添加主机信息到主机清单中</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加分组</span></span><br><span class="line">[test-k8s]</span><br><span class="line">172.20.21.249</span><br><span class="line">172.20.21.250</span><br><span class="line">172.20.21.251</span><br><span class="line">172.20.21.252</span><br><span class="line">172.20.21.253</span><br><span class="line">172.20.21.254</span><br><span class="line">172.20.21.255</span><br><span class="line">172.20.22.0</span><br><span class="line">172.20.22.1</span><br><span class="line">172.20.22.2</span><br></pre></td></tr></table></figure>
<h4 id="配置playbook"><a href="#配置playbook" class="headerlink" title="配置playbook"></a>配置playbook</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/ssh-addkey.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: pro-k8s</span><br><span class="line">  gather_facts: no</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: install ssh key</span><br><span class="line">    authorized_key: user=root</span><br><span class="line">                    key=&quot;&#123;&#123; lookup(&#x27;file&#x27;, &#x27;/root/.ssh/id_rsa.pub&#x27;) &#125;&#125;&quot;</span><br><span class="line">                    state=present</span><br></pre></td></tr></table></figure>
<h4 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i /etc/ansible/hosts -k /etc/ansible/ssh-addkey.yml</span><br></pre></td></tr></table></figure>
<p>输入服务器密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SSH password:</span><br><span class="line"></span><br><span class="line">PLAY [pro-k8s] ***************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [install ssh key] *******************************************************************************************************************</span><br><span class="line">changed: [172.21.5.197]</span><br><span class="line">changed: [172.21.5.196]</span><br><span class="line">changed: [172.21.5.199]</span><br><span class="line">changed: [172.21.5.192]</span><br><span class="line">changed: [172.21.5.195]</span><br><span class="line">changed: [172.21.5.193]</span><br><span class="line">changed: [172.21.2.240]</span><br><span class="line">changed: [172.21.5.198]</span><br><span class="line">changed: [172.21.2.238]</span><br><span class="line">changed: [172.21.5.194]</span><br><span class="line">changed: [172.21.2.236]</span><br><span class="line">changed: [172.21.2.235]</span><br><span class="line">changed: [172.21.2.237]</span><br><span class="line">changed: [172.21.2.239]</span><br><span class="line">changed: [172.21.2.234]</span><br><span class="line">changed: [172.21.0.159]</span><br><span class="line">changed: [172.21.0.155]</span><br><span class="line">changed: [172.21.2.241]</span><br><span class="line">changed: [172.21.0.154]</span><br><span class="line">changed: [172.21.0.153]</span><br><span class="line">changed: [172.21.0.158]</span><br><span class="line">changed: [172.21.0.152]</span><br><span class="line">changed: [172.21.0.160]</span><br><span class="line">changed: [172.21.0.156]</span><br><span class="line">changed: [172.21.0.157]</span><br><span class="line">changed: [172.21.2.232]</span><br><span class="line">changed: [172.21.2.233]</span><br><span class="line">changed: [172.21.0.151]</span><br><span class="line">changed: [172.21.5.191]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************</span><br><span class="line">172.21.0.151               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.152               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.153               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.154               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.155               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.156               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.157               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.158               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.159               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.160               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.232               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.233               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.234               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.235               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.236               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.237               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.238               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.239               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.240               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.241               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.191               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.192               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.193               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.194               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.195               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.196               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.197               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.198               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.199               : ok=1    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Archer</title>
    <url>/archer/</url>
    <content><![CDATA[<h1 id="ARCHER-—-自动化SQL操作平台"><a href="#ARCHER-—-自动化SQL操作平台" class="headerlink" title="ARCHER — 自动化SQL操作平台"></a>ARCHER — 自动化SQL操作平台</h1><p>基于inception的自动化SQL操作平台，支持SQL执行、LDAP认证、发邮件、OSC、SQL查询、SQL优化建议、权限管理等功能，支持docker镜像。<br><span id="more"></span></p>
<p>GitHub项目地址：<a href="https://github.com/jly8866/archer">https://github.com/jly8866/archer</a></p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li>自动审核<br>发起SQL上线，工单提交，由inception自动审核，审核通过后需要由审核人进行人工审核</li>
<li>人工审核<br>inception自动审核通过的工单，由其他研发工程师或研发经理来审核，DBA操作执行SQL<br>为什么要有人工审核？<br>这是遵循运维领域线上操作的流程意识，一个工程师要进行线上数据库SQL更新，最好由另外一个工程师来把关<br>很多时候DBA并不知道SQL的业务含义，所以人工审核最好由其他研发工程师或研发经理来审核. 这是archer的设计理念</li>
<li>回滚数据展示<br>工单内可展示回滚语句，支持一键提交回滚工单</li>
<li>定时执行SQL<br>审核通过的工单可由DBA选择定时执行，执行前可修改执行时间，可随时终止</li>
<li>pt-osc执行<br>支持pt-osc执行进度展示，并且可以点击中止pt-osc进程</li>
<li>MySQL查询<br>库、表、关键字自动补全<br>查询结果集限制、查询结果导出、表结构展示、多结果集展示</li>
<li>MySQL查询权限管理<br>基于inception解析查询语句，查询权限支持限制到表级<br>查询权限申请、审核和管理，支持审核流程配置，多级审核</li>
<li>MySQL查询动态脱敏<br>基于inception解析查询语句，配合脱敏字段配置、脱敏规则(正则表达式)实现敏感数据动态脱敏</li>
<li>慢日志管理<br>基于percona-toolkit的pt_query_digest分析和存储慢日志，并在web端展现</li>
<li>邮件通知<br>可配置邮件提醒，对上线申请、权限申请、审核结果等进行通知<br>对异常登录进行通知</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装docker-、git"><a href="#安装docker-、git" class="headerlink" title="安装docker 、git"></a>安装docker 、git</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y docker git</span><br></pre></td></tr></table></figure>
<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull hhyo/inception</span><br><span class="line">docker pull hhyo/archer</span><br><span class="line">docker pull mysql:5.6.35</span><br></pre></td></tr></table></figure>
<h4 id="创建archer配置文件"><a href="#创建archer配置文件" class="headerlink" title="创建archer配置文件"></a>创建archer配置文件</h4><p>服务目录定为 /vcg/archer/</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /vcg/archer/</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /vcg/archer/inc.cnf</span><br><span class="line"></span><br><span class="line">[inception]</span><br><span class="line">general_log=1</span><br><span class="line">general_log_file=inception.log</span><br><span class="line">port=6669</span><br><span class="line">socket=/tmp/inc.socket</span><br><span class="line">character-set-client-handshake=0</span><br><span class="line">character-set-server=utf8</span><br><span class="line">inception_remote_system_password=root</span><br><span class="line">inception_remote_system_user=wzf1</span><br><span class="line">inception_remote_backup_port=3306</span><br><span class="line">inception_remote_backup_host=127.0.0.1</span><br><span class="line">inception_support_charset=utf8,utf8mb4</span><br><span class="line">inception_enable_nullable=0</span><br><span class="line">inception_check_primary_key=1</span><br><span class="line">inception_check_column_comment=1</span><br><span class="line">inception_check_table_comment=1</span><br><span class="line">inception_osc_on=OFF</span><br><span class="line">inception_osc_bin_dir=/usr/bin</span><br><span class="line">inception_osc_min_table_size=1</span><br><span class="line">inception_osc_chunk_time=0.1</span><br><span class="line">inception_enable_blob_type=1</span><br><span class="line">inception_check_column_default_value=1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/jly8866/archer/blob/master/archer/settings.py</span><br><span class="line">修改其中的数据库地址、用户名、密码</span><br></pre></td></tr></table></figure>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name inception -v /vcg/archer/inc.cnf:/etc/inc.cnf -p 6669:6669 -dti hhyo/inception</span><br><span class="line"></span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.35</span><br><span class="line"></span><br><span class="line">docker run --name archer -v /vcg/archer/settings.py:/opt/archer/archer/settings.py  -e NGINX_PORT=9123 -p 9123:9123 -dti hhyo/archer</span><br></pre></td></tr></table></figure>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS archer_github DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -ti archer /bin/bash</span><br><span class="line">  cd /opt/archer</span><br><span class="line">  source /opt/venv4archer/bin/activate</span><br><span class="line">  # 初始化数据库</span><br><span class="line">  python3 manage.py makemigrations sql</span><br><span class="line">  python3 manage.py migrate</span><br><span class="line">  # 创建管理员账号</span><br><span class="line">  python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>地址： <a href="http://xxxx::9123/">http://xxxx::9123/</a></p>
]]></content>
      <categories>
        <category>Archer</category>
      </categories>
      <tags>
        <tag>Archer</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力破解攻击和防御</title>
    <url>/baoli-pojie-fangyu/</url>
    <content><![CDATA[<p>暴力破解攻击是指攻击者通过系统地组合并尝试所有的可能性以破解用户的用户名、密码等敏感信息。攻击者往往借助自动化脚本工具来发动暴力破解攻击。<br><span id="more"></span></p>
<blockquote>
<p>引用自阿里云<a href="https://help.aliyun.com/knowledge_detail/56269.html">https://help.aliyun.com/knowledge_detail/56269.html</a></p>
</blockquote>
<h3 id="什么是暴力破解攻击"><a href="#什么是暴力破解攻击" class="headerlink" title="什么是暴力破解攻击"></a>什么是暴力破解攻击</h3><p>暴力破解攻击是指攻击者通过系统地组合并尝试所有的可能性以破解用户的用户名、密码等敏感信息。攻击者往往借助自动化脚本工具来发动暴力破解攻击。</p>
<h4 id="攻击行为类型"><a href="#攻击行为类型" class="headerlink" title="攻击行为类型"></a>攻击行为类型</h4><p>根据暴力破解的穷举方式，其攻击行为可以分为：</p>
<ul>
<li><strong>字典攻击法</strong>。大多攻击者并没有高性能的破解算法和CPU/GPU，为节省时间和提高效率，会利用社会工程学或其它方式建立破译字典，使用字典中已存在的用户名、密码进行猜破。</li>
<li><strong>穷举法</strong>。攻击者首先列出密码组合的可能性（如数字、大写字母、小写字母、特殊字符等），然后按密码长度从1位、2位….构成不同的账号和密码对，然后逐个猜试。该方法需要高性能的破解算法和CPU/GPU作支持。</li>
<li><strong>组合式攻击法</strong>。使用字典攻击和穷举法的组合攻击方式。</li>
</ul>
<p>理论上，只要拥有性能足够强的计算机和足够长的时间，大多密码均可以被破解出来。</p>
<h4 id="攻击业务类型"><a href="#攻击业务类型" class="headerlink" title="攻击业务类型"></a>攻击业务类型</h4><ul>
<li>针对Windows操作系统的远程桌面管理协议（RDP）、Linux操作系统的管理协议（SSH）的暴力破解攻击</li>
<li>针对具有登录认证机制的软件服务（如Mysql、SQLserver、FTP、Web前后端登录接口等应用服务）的暴力破解攻击</li>
</ul>
<p>对于防御者而言，给攻击者留得时间越长，其组合出正确的用户名和密码的可能性就越大。因此，时间在检测暴力破解攻击时很重要。</p>
<h3 id="暴力破解攻击有什么危害"><a href="#暴力破解攻击有什么危害" class="headerlink" title="暴力破解攻击有什么危害"></a>暴力破解攻击有什么危害</h3><p>通过自动化工具发起的暴力破解攻击可以获取用户账号和密码。</p>
<h3 id="如何防御暴力破解攻击"><a href="#如何防御暴力破解攻击" class="headerlink" title="如何防御暴力破解攻击"></a>如何防御暴力破解攻击</h3><ul>
<li>制定密码复杂度策略，并进行服务加固。密码的长度要大于 8 位，且最好大于 20 位；密码应由数字、大小写字母和特殊符号混合组成；密码的最长有效期为 90 天。</li>
<li>配置好网络访问控制。严格限制将高危服务管理端口直接发布到互联网；建议您使用 VPN 和堡垒机的方式集中管理和审计。</li>
<li>提高内部全员安全意识，禁止借用或共享使用账号。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS配置yum源</title>
    <url>/centos-yum-repo/</url>
    <content><![CDATA[<p>推荐使用<a href="https://opsx.alibaba.com/?lang=zh-CN">阿里源</a></p>
<h5 id="基础源"><a href="#基础源" class="headerlink" title="基础源"></a>基础源</h5><h6 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS 6</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS 7</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="生成缓存"><a href="#生成缓存" class="headerlink" title="生成缓存"></a>生成缓存</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h5 id="EPEL源"><a href="#EPEL源" class="headerlink" title="EPEL源"></a>EPEL源</h5><h6 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</span><br><span class="line">mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</span><br></pre></td></tr></table></figure>
<h6 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> epel(RHEL 7)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> epel(RHEL 6)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> epel(RHEL 5)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-5.repo</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence数据库SSL警告</title>
    <url>/confluence-db-ssl-warning/</url>
    <content><![CDATA[<p>do what you loveeee<br><span id="more"></span></p>
<h3 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>
<p><img src="/confluence-db-ssl-warning/image-20191126092908807.png" alt="image-20191126092908807"><br>可以看到有很多报警信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tue Nov 26 09:13:39 CST 2019 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">警告:在没有SSL连接的情况下建立SSL连接不建议使用服务器的身份验证。根据MySQL5.5.45+、5.6.26+和5.7.6+要求必须建立SSL连接默认情况下，如果没有设置显式选项不使用SSL的应用程序将verifyServerCertificate属性设置为“false”。您需要通过设置useSSL=false显式禁用SSL，或设置useSSL=true，并为服务器证书提供信任存储验证</span><br></pre></td></tr></table></figure>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入confluence的data-home目录；</span></span><br><span class="line">cd /data/vcg/confluence-home</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、备份配置文件</span></span><br><span class="line">cp confluence.cfg.xml confluence.cfg.xml-bak191126</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、修改内容</span></span><br><span class="line"></span><br><span class="line">vim confluence.cfg.xml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库连接后增加 ?useSSL=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如下：</span></span><br><span class="line">    &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://rm-2zey0d751uapi749y35890.mysql.rds.aliyuncs.com:3306/confluence?useSSL=false&lt;/property&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、重启confluence</span>    </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>申请Confluence和Jira的试用版license</title>
    <url>/confluence-jira-license/</url>
    <content><![CDATA[<ol>
<li><p>访问<a href="https://www.atlassian.com/，登录账号">https://www.atlassian.com/，登录账号</a></p>
<p><img src="/confluence-jira-license/./image2019-7-23_16-56-18.png" alt></p>
<p><img src="/confluence-jira-license/./image2019-7-23_16-58-42.png" alt></p>
</li>
<li><p>点击“licenses”，url为<a href="https://my.atlassian.com/product">https://my.atlassian.com/product</a></p>
<p><img src="/confluence-jira-license/./image2019-7-23_17-0-29.png" alt></p>
</li>
<li><p>创建新的认证：</p>
<p><img src="/confluence-jira-license/./image2019-7-23_17-2-25.png" alt></p>
</li>
<li><p>获取service ID</p>
<p>使用admin账号登录系统，<strong>系统</strong>-<strong>系统信息</strong>可以获取service ID</p>
<p><img src="/confluence-jira-license/./1563872961498.jpg" alt></p>
<p><img src="/confluence-jira-license/./1563872994300.jpg" alt></p>
</li>
<li><p>激活license</p>
<p><img src="/confluence-jira-license/./1563873215131.jpg" alt></p>
<p><img src="/confluence-jira-license/./1563873261297.jpg" alt></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence安装-维护-迁移实践</title>
    <url>/confluence-ops/</url>
    <content><![CDATA[<p>企业wiki-Confluence<br><span id="more"></span></p>
<p><strong>Confluence</strong>介绍</p>
<p><strong>Confluence</strong>是由澳大利亚软件公司<a href="https://en.wikipedia.org/wiki/Atlassian">Atlassian</a>开发和发布的<a href="https://en.wikipedia.org/wiki/Collaboration_software">协作软件</a>程序</p>
<p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。</p>
<p>Confluence为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><hr>
<blockquote>
<p><a href="https://confluence.atlassian.com/conf612/installing-confluence-on-linux-from-archive-file-958778538.html">https://confluence.atlassian.com/conf612/installing-confluence-on-linux-from-archive-file-958778538.html</a></p>
</blockquote>
<h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>Download the <code>tar.gz</code> file for your operating system - <a href="https://www.atlassian.com/software/confluence/download?_ga=2.242479878.561576652.1556502870-546260764.1556502870">https://www.atlassian.com/software/confluence/download</a>. </p>
<p>本次演示我下载的文件包为：atlassian-confluence-6.12.0.zip</p>
<h5 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br><span class="line">java -version   # 验证</span><br></pre></td></tr></table></figure>
<h5 id="创建Confluence用户"><a href="#创建Confluence用户" class="headerlink" title="创建Confluence用户"></a>创建Confluence用户</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -create-home --comment &quot;Account for running Confluence&quot; --shell /bin/bash confluence</span><br></pre></td></tr></table></figure>
<h5 id="解压安装包、创建配置、配置权限"><a href="#解压安装包、创建配置、配置权限" class="headerlink" title="解压安装包、创建配置、配置权限"></a>解压安装包、创建配置、配置权限</h5><p>目录规划：</p>
<p>​        安装目录：/data/vcg/confluence</p>
<p>​        数据目录：/data/vcg/confluence-home</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /root/atlassian-confluence-6.12.0.zip /data/vcg/</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install unzip -y</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/vcg/</span><br><span class="line">unzip atlassian-confluence-6.12.0.zip</span><br><span class="line">mv atlassian-confluence-6.12.0 confluence</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/vcg/confluence-home</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R confluence /data/vcg/confluence/</span><br><span class="line">chmod -R u=rwx,go-rwx /data/vcg/confluence/</span><br><span class="line">chown -R confluence /data/vcg/confluence-home/</span><br><span class="line">chmod -R u=rwx,go-rwx /data/vcg/confluence-home/</span><br></pre></td></tr></table></figure>
<h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p>vcg这边使用的阿里云RDS数据库，未手动安装MySQL</p>
<p>数据库使用MySQL，需安装驱动软件。<br>获取mysql-connector-java的安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.45-bin.jar /data/vcg/confluence/confluence/WEB-INF/lib/</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;confluence.home=/data/vcg/confluence-home/&quot; &gt; confluence/confluence/WEB-INF/classes/confluence-init.properties</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">浏览器访问ip:8090 继续配置Confluence</span><br></pre></td></tr></table></figure>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><h5 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h5><p>登录老Confluence界面，进入”站点管理”—“备份已还原”，点击”备份”，如图</p>
<p>数据备份路径为：/data/vcg/confluence-home/backups/</p>
<p><img src="/confluence-ops/confluence1.png" alt="image-20190429104530362"></p>
<h5 id="拷贝备份数据包到新服务器"><a href="#拷贝备份数据包到新服务器" class="headerlink" title="拷贝备份数据包到新服务器"></a>拷贝备份数据包到新服务器</h5><p>备份必须复制至<code>/data/vcg/confluence-home/restore</code>目录中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /data/vcg/confluence-home/backups/xmlexport-20190225-205713-119.zip  root@&#x27;xxxx&#x27;:/data/vcg/confluence-home/restore/</span><br></pre></td></tr></table></figure>
<h5 id="部署新的Confluence"><a href="#部署新的Confluence" class="headerlink" title="部署新的Confluence"></a>部署新的Confluence</h5><h5 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h5><p>登录新的Confluence的”站点管理”—“备份已还原”。</p>
<p><img src="/confluence-ops/confluence2.png" alt="2"></p>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><h5 id="备份数据定期删除"><a href="#备份数据定期删除" class="headerlink" title="备份数据定期删除"></a>备份数据定期删除</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 15 * * * find /data/vcg/confluence-home/backups/* -type f -mtime +5 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h5 id="漏洞补丁-被植入挖矿程序"><a href="#漏洞补丁-被植入挖矿程序" class="headerlink" title="漏洞补丁(被植入挖矿程序)"></a>漏洞补丁(被植入挖矿程序)</h5><blockquote>
<p><a href="https://help.aliyun.com/noticelist/articleid/1000128459.html?spm=a2c4g.789213612.n2.10.2a716141mqqJjY">https://help.aliyun.com/noticelist/articleid/1000128459.html?spm=a2c4g.789213612.n2.10.2a716141mqqJjY</a></p>
</blockquote>
<p>解决办法：<br>升级Widget Connector 组件</p>
<h4 id="培训文档"><a href="#培训文档" class="headerlink" title="培训文档"></a>培训文档</h4><div class="pdfobject-container" data-target="Confluence基础培训_中文版.pdf" data-height="500px"></div>
<div class="pdfobject-container" data-target="Confluence高级培训_中文版.pdf" data-height="500px"></div>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)全面解读 DevOps 概念：与 k8s、容器、 CI/CD 有什么关系？</title>
    <url>/devops/</url>
    <content><![CDATA[<p>DevOps 是指对企业文化、业务自动化和平台设计等方面进行全方位变革，从而实现迅捷、优质的服务交付，提升企业响应能力和价值。只有通过快速迭代的 IT 服务交付，这一切才能实现。DevOps 可以将传统应用和最新的云原生应用与基础架构彼此相连。</p>
<span id="more"></span>
<p>文章转自<a href="https://www.redhat.com/zh/topics/devops#">https://www.redhat.com/zh/topics/devops#</a>?</p>
<h2 id="DevOps-到底是什么意思？"><a href="#DevOps-到底是什么意思？" class="headerlink" title="DevOps 到底是什么意思？"></a>DevOps 到底是什么意思？</h2><p>从字面上来看，“DevOps”一词是由英文 Development（开发）和 Operations （运维）组合而成，但它所代表的理念和实践要比这广阔的多。DevOps 涵盖了安全、协作方式、数据分析等许多方面。但它是什么呢？</p>
<p>DevOps 强调通过一系列手段来实现既快又稳的工作流程，使每个想法（比如一个新的软件功能，一个功能增强请求或者一个 bug 修复）在从开发到生产环境部署的整个流程中，都能不断地为用户带来价值。这种方式需要开发团队和运维团队密切交流、高效协作并且彼此体谅。此外，DevOps 还要能够方便扩展，灵活部署。有了 DevOps，需求最迫切的工作就能通过自助服务和自动化得到解决；通常在<a href="https://www.redhat.com/zh/topics/middleware/what-is-ide">标准开发环境编写代码</a>的开发人员也可与 IT 运维人员紧密合作，加速软件的构建、测试和发布，同时保障开发成果的稳定可靠。</p>
<p>当然，这意味着更改代码会更频繁，基础架构的使用也会更灵活。所以传统的管理策略无法满足这种需求。您也需要应势而变，赢得先机。</p>
<h2 id="DevOps-与容器"><a href="#DevOps-与容器" class="headerlink" title="DevOps 与容器"></a>DevOps 与容器</h2><p>DevOps 可以加快一个想法从提出到部署的整个过程。DevOps 的核心在于，在应用的整个生命周期中，都要确保日常运维任务自动化和环境的标准化。容器可以提供标准化的环境，您需要一个平台来管理它们，同时提供内置的自动化功能并支持各种基础架构。红帽 OpenShift 4 就是一个支持 DevOps 的企业就绪型 Kubernetes 平台。</p>
<h2 id="DevOps-文化、流程和平台"><a href="#DevOps-文化、流程和平台" class="headerlink" title="DevOps 文化、流程和平台"></a>DevOps 文化、流程和平台</h2><h3 id="DevOps文化"><a href="#DevOps文化" class="headerlink" title="DevOps文化"></a>DevOps文化</h3><p>开发运维依赖于一种协作文化，需要与<a href="https://www.redhat.com/zh/topics/open-source/what-is-open-source">开源原则</a>和透明<a href="https://www.redhat.com/zh/devops/what-is-agile-methodology">敏捷</a>的工作方法协同一致。您可以通过为期 5 天的“<a href="https://www.redhat.com/zh/services/training/do500-devops-culture-and-practice-enablement">文化与实践支持（DO500）</a>”大师班，探索开发运维与敏捷价值相辅相成的关系。</p>
<p>可将<a href="https://www.redhat.com/zh/topics/open-source/what-is-open-source-software">开源软件</a>项目的文化作为蓝图，据此构建开发运维文化。自由共享信息是开源社区默认的协作之道。这有助于实施一系列文化变革，比如提高决策透明度、鼓励实验，战胜对失败的恐惧，或者实施奖励制度，鼓励彼此信任和协作。</p>
<p>有了正确的领导和激励计划，您的开发和运维团队将能更好地促进开放文化。当整个公司都贯彻了这种文化，开发运维就能发挥最佳成效。固然开发运维字面上指的是开发和运维，但它需要每一个人的参与。</p>
<p>红帽的文化根植于开放和透明的基础上。在过去逾 25 年里，红帽人一直秉承着这一思想理念。协助客户采用开源技术策略时，我们始终遵循开放原则，热忱地帮助其逐步实现 DevOps 业务模式。</p>
<h3 id="DevOps流程"><a href="#DevOps流程" class="headerlink" title="DevOps流程"></a>DevOps流程</h3><p>现代应用程序的开发流程不同于以往。许多团队都开始采用敏捷软件开发方法。在他们看来，DevOps 并不是什么新概念。事实上，“持续不断地尽早交付软件以满足客户需要”是《敏捷宣言》12 大原则中第一条原则。这就是为什么持续集成和持续部署（CI/CD）对 DevOps 团队至关重要。</p>
<p>但仅仅改变开发和运维流程还不够。您还需要系统化思考，找到办法真正地优化软件交付方式。也就是说，DevOps 既会为需要开发工作的业务部门带来改变，也会让支持终端用户的团队进行革新。关键是从终端用户到业务的持续反馈周期。</p>
<p>您的流程需要改变的不仅仅是工作方式。您的工作内容也不可避免地会发生变化。DevOps 不仅是为了加速创建原来的单体式应用，还要创建更适合这种持续交付节奏的新软件。</p>
<p>因此，DevOps 团队经常会使用<a href="https://www.redhat.com/zh/topics/microservices">微服务</a>架构来构建软件，并通过 <a href="https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces">API</a> 将这些服务彼此相连。通过构建较小的功能单元，开发团队就可以加速交付。因此，您必须关注如何管理这些服务和 API，并制定敏捷集成等策略，让它们能够协同工作。</p>
<p>这样的变革需要付出大量努力，但有了合适的技术，您就可以马上开始。自动化能够加快流程，并最终帮助你将 DevOps 工作负载迁移至云中。IDC 的一项研究1 表明，85% 的 IT 领导者认为自动化对于其 DevOps 战略至关重要。这是因为自动化使基础架构能够承受 DevOps 带来的代码频繁更改，并让环境能够轻松地连续扩展。自动化可以解决重复繁琐的日常任务，让您的 IT 精英将精力投入到更重要的工作上。</p>
<p>我们的专家可帮助您的组织开发所需的实践、工具和文化，以便更有效地现代化改造现有应用并构建新的应用。</p>
<h3 id="DevOps平台和工具"><a href="#DevOps平台和工具" class="headerlink" title="DevOps平台和工具"></a>DevOps平台和工具</h3><p>选择支持流程的工具对于 DevOps 的成功至关重要。运维团队要跟上快速开发周期，就需要利用高度灵活的平台，并像开发团队对待代码一样，对待平台的基础架构。手动部署不仅速度慢，而且可能出错。</p>
<p>因此，您也可通过自动化来简化平台置备和部署。<a href="https://www.redhat.com/zh/topics/devops/what-is-sre">站点可靠性工程（SRE）</a>承担这些手动操作任务，并使用软件和自动化对其进行管理。SRE 方法可以进一步支持 DevOps 团队的目标。</p>
<p><a href="https://www.redhat.com/zh/topics/containers">容器</a>可以方便地在开发、测试和生产环境之间移动应用。开发人员可以利用容器打包并隔离应用及其运行所需的一切，包括应用程序文件、<a href="https://www.redhat.com/zh/technologies/cloud-computing/openshift/application-runtimes">运行时环境</a>、依赖库和配置。</p>
<h2 id="DevOps-与-k8s"><a href="#DevOps-与-k8s" class="headerlink" title="DevOps 与 k8s"></a>DevOps 与 k8s</h2><p>DevOps 方法加上 Linux® 容器，可为您的团队提供云原生开发所需的底层技术。容器支持集开发、交付、集成和自动化于一体的统一环境。</p>
<p>而 Kubernetes 是实现 Linux 容器操作自动化的现代方法。Kubernetes 可帮助您轻松高效地管理在公共云、私有云或混合云中运行 Linux 容器的集群。 </p>
<p>选择容器内外的可靠平台，如<a href="https://www.redhat.com/zh/enterprise-linux-8">红帽® 企业 Linux</a> 和<a href="https://www.redhat.com/zh/technologies/cloud-computing/openshift">红帽 OpenShift®</a>，可以保障顺利可靠的扩展和自动化。选择好合适的平台后，您就可以充分利用已经实施的文化和流程变更。</p>
<h2 id="DevOps-与-CI-CD"><a href="#DevOps-与-CI-CD" class="headerlink" title="DevOps 与 CI/CD"></a>DevOps 与 CI/CD</h2><p><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd">持续集成和持续部署管道</a>（CI/CD）是实施开发运维 的一大重要成果。CI/CD 可帮助您频繁地向客户交付应用并检验软件质量，而且只需极少的人工干预。</p>
<p>具体而言，CI/CD 在整个应用生命周期内（从集成和测试阶段，到<a href="https://www.redhat.com/zh/topics/automation/what-is-deployment-automation">交付和部署</a>）都引入了持续<a href="https://www.redhat.com/zh/topics/automation/whats-it-automation">自动化</a>和持续监控，让您能够快速识别和改正问题与缺陷。这些关联的事务通常被统称为”<a href="https://www.redhat.com/zh/topics/devops/what-cicd-pipeline">CI/CD 管道</a>“，由开发和运维团队以敏捷方式协同支持。</p>
<h2 id="DevOps-与安全防护"><a href="#DevOps-与安全防护" class="headerlink" title="DevOps 与安全防护"></a>DevOps 与安全防护</h2><p>正如我们前面所说，DevOps 不仅仅涉及开发和运维团队。为了充分利用 DevOps，企业还必须考虑安全防护如何在应用生命周期内发挥作用。所以，您从规划阶段开始就得要考虑核心安防问题。同时，您还应在一些安全功能方面采用自动化技术，防止 DevOps 工作流程阻滞变慢。选择合适的工具来集成安全功能，有助于您实现 DevOps 安全目标。</p>
<p>但是高效的 DevOps 安防需要的不仅是新工具。它更需要整个公司实现 DevOps 文化变革，从而在流程早期就集成进安全团队的工作。DevOps 通过紧密连接开发和运维之间来加速交付速度，但糟糕的安全规划则可能会拖慢速度。</p>
<p>从前，安全防护只是单个团队的责任，在开发的最后阶段才会介入。如今，在 DevOps 协作框架下，安全防护是整个 IT 团队的共同责任，需要贯穿至整个生命周期的每一个环节。</p>
]]></content>
  </entry>
  <entry>
    <title>Django-审计</title>
    <url>/django-audit/</url>
    <content><![CDATA[<p>两种方法实现django审计，可查看API调用情况、登录情况等</p>
<span id="more"></span>
<h1 id="日志审计"><a href="#日志审计" class="headerlink" title="日志审计"></a>日志审计</h1><h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><p>使用插件：<a href="https://github.com/soynatan/django-easy-audit">django-easy-audit</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p><code>pip install django-easy-audit</code></p>
</li>
<li><p>Add ‘easyaudit’ to your <code>INSTALLED_APPS</code> like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;easyaudit&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add Easy Audit’s middleware to your <code>MIDDLEWARE</code> (or <code>MIDDLEWARE_CLASSES</code>) setting like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;easyaudit.middleware.easyaudit.EasyAuditMiddleware&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="4">
<li>Run <code>python manage.py migrate easyaudit</code> to create the app’s models.</li>
</ol>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>访问<code>http://127.0.0.1:8000/admin/</code></p>
<p><img src="/django-audit/./audit01.png" alt></p>
<p><img src="/django-audit/./audit02.png" alt></p>
<p><img src="/django-audit/./audit03.png" alt></p>
<p><img src="/django-audit/./audit04.png" alt></p>
<h2 id="自建app，注册到middleware"><a href="#自建app，注册到middleware" class="headerlink" title="自建app，注册到middleware"></a>自建app，注册到middleware</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li><p>创建app。<code>python manager.py startapp audit</code></p>
</li>
<li><p><code>models.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> base.models <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuditLog</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line"></span><br><span class="line">    url = models.CharField(</span><br><span class="line">        max_length=<span class="number">254</span>,</span><br><span class="line">        db_index=<span class="literal">True</span>,</span><br><span class="line">        verbose_name=<span class="string">&quot;URL&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&#x27;URL&#x27;</span>)</span><br><span class="line">    method = models.CharField(</span><br><span class="line">        max_length=<span class="number">20</span>,</span><br><span class="line">        db_index=<span class="literal">True</span>,</span><br><span class="line">        verbose_name=<span class="string">&quot;请求方式&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&#x27;请求方式&#x27;</span>)</span><br><span class="line">    query_string = models.CharField(</span><br><span class="line">        max_length=<span class="number">254</span>,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        verbose_name=<span class="string">&quot;URL请求参数&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&#x27;URL请求参数&#x27;</span>)</span><br><span class="line">    body = models.TextField(</span><br><span class="line">        verbose_name=<span class="string">&quot;请求Body数据&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&quot;请求Body数据&quot;</span>)</span><br><span class="line">    remote_ip = models.CharField(</span><br><span class="line">        max_length=<span class="number">50</span>,</span><br><span class="line">        verbose_name=<span class="string">&quot;远程主机IP&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&quot;远程主机IP&quot;</span>)</span><br><span class="line">    username = models.CharField(</span><br><span class="line">        max_length=<span class="number">50</span>,</span><br><span class="line">        verbose_name=<span class="string">&quot;请求用户&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&quot;请求用户&quot;</span>)</span><br><span class="line">    status_code = models.IntegerField(</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        verbose_name=<span class="string">&quot;请求状态码&quot;</span>,</span><br><span class="line">        help_text=<span class="string">&quot;请求状态码&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.url</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&quot;audit_log&quot;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;API 审计&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p><code>serlalizers.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> AuditLog</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuditLogModelSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = AuditLog</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="4">
<li><p><code>views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> AuditLog</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> AuditLogModelSerializer</span><br><span class="line"><span class="keyword">from</span> base.views <span class="keyword">import</span> BaseModelViewSet</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuditLogViewSet</span>(<span class="params">BaseModelViewSet</span>):</span></span><br><span class="line">    queryset = AuditLog.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AuditLogModelSerializer</span><br><span class="line">    search_fields = [<span class="string">&quot;url&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;status_code&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>admin.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> AuditLog</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">AuditLog</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuditLogAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = (</span><br><span class="line">        <span class="string">&quot;url&quot;</span>,</span><br><span class="line">        <span class="string">&quot;method&quot;</span>,</span><br><span class="line">        <span class="string">&quot;query_string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>,</span><br><span class="line">        <span class="string">&quot;remote_ip&quot;</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status_code&quot;</span>,</span><br><span class="line">        <span class="string">&quot;create_time&quot;</span>,</span><br><span class="line">        <span class="string">&quot;update_time&quot;</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py migrate audit</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>middleware/audit.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> apps.audit.models <span class="keyword">import</span> AuditLog</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AnonymousUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> load_backend</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.middleware <span class="keyword">import</span> get_user</span><br><span class="line"><span class="keyword">from</span> django.utils.functional <span class="keyword">import</span> SimpleLazyObject</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_jwt</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    user = get_user(request)</span><br><span class="line">    <span class="built_in">print</span>(user)</span><br><span class="line">    <span class="comment"># if user.is_authenticated():</span></span><br><span class="line">    <span class="comment">#     return user</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_jwt = JSONWebTokenAuthentication().authenticate(Request(request))</span><br><span class="line">        <span class="keyword">if</span> user_jwt <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> user_jwt[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventAuditMiddleware</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    HTTP请求审计</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    RequestId = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;接收请求&quot;&quot;&quot;</span></span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user_jwt(request))</span><br><span class="line">        <span class="built_in">print</span>(request.user)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: request.META[<span class="string">&#x27;PATH_INFO&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;method&#x27;</span>: request.META[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;query_string&#x27;</span>: request.META[<span class="string">&#x27;QUERY_STRING&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;remote_ip&#x27;</span>: request.environ[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>],</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: request.user</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] <span class="keyword">in</span> [<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                body = json.loads(request.body)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;RequestEventAuditLog process_request&quot;</span>, e.args)</span><br><span class="line">                body = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            body = <span class="string">&quot;&quot;</span></span><br><span class="line">        data[<span class="string">&#x27;body&#x27;</span>] = body</span><br><span class="line">        request = AuditLog.objects.create(**data)</span><br><span class="line">        self.RequestId = request.pk</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span>(<span class="params">self, request, view_func, view_args, view_kwargs</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        request = AuditLog.objects.get(pk=self.RequestId)</span><br><span class="line">        request.status_code = response.status_code</span><br><span class="line">        request.save()</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;异常&quot;&quot;&quot;</span></span><br><span class="line">        request = AuditLog.objects.get(pk=self.RequestId)</span><br><span class="line">        request.status_code = <span class="number">500</span></span><br><span class="line">        request.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理完成&quot;&quot;&quot;</span></span><br><span class="line">        request = AuditLog.objects.get(pk=self.RequestId)</span><br><span class="line">        request.status_code = response.status_code</span><br><span class="line">        request.save()</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>settings.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;middleware.audit.EventAuditMiddleware&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="/django-audit/./audit05.png" alt></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-Celery异步任务调度工具</title>
    <url>/django-celery/</url>
    <content><![CDATA[<p>Celery是一个异步任务的调度工具。<br><span id="more"></span><br>Django中使用Celery实现异步或定时任务</p>
<p><strong>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></strong></p>
<p><strong>Celery 官方文档英文版</strong>：<a href="http://docs.celeryproject.org/en/latest/index.html"><strong>http://docs.celeryproject.org/en/latest/index.html</strong></a></p>
<p><strong>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></strong></p>
<h3 id="Celery简介"><a href="#Celery简介" class="headerlink" title="Celery简介"></a>Celery简介</h3><p>Celery是一个异步任务的调度工具。</p>
<p>Celery 是 Distributed Task Queue，分布式任务队列，分布式决定了可以有多个 worker 的存在，队列表示其是异步操作，即存在一个产生任务提出需求的工头，和一群等着被分配工作的码农。</p>
<p>在 Python 中定义 Celery 的时候，我们要引入 Broker，中文翻译过来就是“中间人”的意思，在这里 Broker 起到一个中间人的角色。在工头提出任务的时候，把所有的任务放到 Broker 里面，在 Broker 的另外一头，一群码农等着取出一个个任务准备着手做。</p>
<p>这种模式注定了整个系统会是个开环系统，工头对于码农们把任务做的怎样是不知情的。所以我们要引入 Backend 来保存每次任务的结果。这个 Backend 有点像我们的 Broker，也是存储任务的信息用的，只不过这里存的是那些任务的返回结果。我们可以选择只让错误执行的任务返回结果到 Backend，这样我们取回结果，便可以知道有多少任务执行失败了。</p>
<p>Celery(芹菜)是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，但对调度支持也很好。Celery用于生产系统每天处理数以百万计的任务。Celery是用Python编写的，但该协议可以在任何语言实现。它也可以与其他语言通过webhooks实现。Celery建议的消息队列是RabbitMQ，但提供有限支持Redis, Beanstalk, MongoDB, CouchDB, 和数据库（使用SQLAlchemy的或Django的 ORM） 。Celery是易于集成Django, Pylons and Flask，使用 django-celery, celery-pylons and Flask-Celery 附加包即可。</p>
<h3 id="架构组成"><a href="#架构组成" class="headerlink" title="架构组成"></a>架构组成</h3><p><img src="/django-celery/./celery00.png" alt="celery00"></p>
<p>Celery的架构由三部分组成，<strong><em>消息中间件</em></strong>（message broker），<strong><em>任务执行单元\</em></strong>（worker）和<strong><em>任务执行结果存储</em></strong>（task result store）组成。</p>
<p><img src="/django-celery/./celery01.png" alt="celery01"></p>
<p>可以看到，Celery 主要包含以下几个模块：</p>
<ul>
<li><p>任务模块 Task</p>
<p>包含异步任务和定时任务。其中，<strong>异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列</strong>。</p>
</li>
<li><p>消息中间件 Broker</p>
<p>Broker，即为任务调度队列，<strong>接收任务生产者发来的消息（即任务），将任务存入队列</strong>。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 <a href="http://lib.csdn.net/base/redis">Redis</a> 等。</p>
</li>
<li><p>任务执行单元 Worker</p>
<p>Worker 是执行任务的处理单元，<strong>它实时监控消息队列，获取队列中调度的任务，并执行它</strong>。</p>
</li>
<li><p>任务结果存储 Backend</p>
<p>Backend 用于<strong>存储任务的执行结果</strong>，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, <a href="http://lib.csdn.net/base/redis">redis</a> 和 <a href="http://lib.csdn.net/base/mongodb">MongoDB</a> 等。</p>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install django-celery-beta  #任务发送</span><br><span class="line">pip install django-celery-results  #结果存储</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>确保目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- proj/</span><br><span class="line">  - manage.py</span><br><span class="line">  - proj/</span><br><span class="line">    - __init__.py</span><br><span class="line">    - settings.py</span><br><span class="line">    - urls.py</span><br></pre></td></tr></table></figure>
<p>新建<strong>proj/proj/celery.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab, timedelta</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;proj.settings&#x27;</span>)</span><br><span class="line">app = Celery(<span class="string">&#x27;proj&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>, namespace=<span class="string">&#x27;CELERY&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks() <span class="comment"># 自动发现任务文件每个app下的task.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Request: &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(self.request))</span><br></pre></td></tr></table></figure>
<p>编辑<strong>proj/proj/<strong>init</strong>.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">&#x27;celery_app&#x27;</span>,)</span><br></pre></td></tr></table></figure>
<p>编辑<strong>proj/proj/settings.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">&#x27;django_celery_beat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_celery_results&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery</span></span><br><span class="line">CELERY_URL = <span class="string">&#x27;redis://:&#x27;</span> + configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisPassword&#x27;</span>] + <span class="string">&#x27;@&#x27;</span> + configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisHost&#x27;</span>] + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">    configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisPort&#x27;</span>]) + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisDb&#x27;</span>])</span><br><span class="line"><span class="comment"># CELERY_URL = &quot;redis://:&#123; 密码 &#125;@&#123; redis地址 &#125;:6379/4&quot;</span></span><br><span class="line">BROKER_URL = CELERY_URL</span><br><span class="line">CELERY_BROKER_URL = CELERY_URL</span><br><span class="line"><span class="comment"># CELERY_BEAT_SCHEDULER = &#x27;django_celery_beat.schedulers:DatabaseScheduler&#x27;</span></span><br><span class="line"><span class="comment"># CELERY_RESULT_BACKEND = CELERY_URL</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;django-db&#x27;</span>  <span class="comment"># 使用django orm 作为结果存储</span></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">&#x27;application/json&#x27;</span>]</span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">CELERY_ENABLE_UTC = <span class="literal">True</span></span><br><span class="line">CELERYD_CONCURRENCY = <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 创建更改的文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 将生成的py文件应用到数据库</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h4 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 用户密码可以用：</span></span><br><span class="line">python manage.py changepassword username</span><br></pre></td></tr></table></figure>
<h4 id="增加定时任务"><a href="#增加定时任务" class="headerlink" title="增加定时任务"></a>增加定时任务</h4><p>编辑<strong>proj/proj/celery.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.conf.update(</span><br><span class="line">    CELERYBEAT_SCHEDULE=&#123;</span><br><span class="line">        <span class="string">&#x27;task_update_ali_ecs&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_ali_ecs&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;task_update_ali_rds&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_ali_rds&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;task_update_ali_slb&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_ali_slb&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;task_update_tx_cns&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_tx_cns&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;add-every-monday-morning&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;tasks.add&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: crontab(hour=<span class="number">7</span>, minute=<span class="number">30</span>, day_of_week=<span class="number">1</span>),</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>),</span><br><span class="line">    		&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#crontab-schedules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># schedule 可以填写timedelta表示循环时间，隔多久执行一次</span></span><br><span class="line"><span class="comment">#          也可以填写 crontab  表示某个时间去执行，例如示例中，表示 Executes every Monday morning at 7:30 a.m.</span></span><br></pre></td></tr></table></figure>
<h4 id="新增任务的代码"><a href="#新增任务的代码" class="headerlink" title="新增任务的代码"></a>新增任务的代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django_celery_beat.models import PeriodicTask, ClockedSchedule</span><br><span class="line"></span><br><span class="line">#比如创建一个发版任务</span><br><span class="line"># 1.新创建时间clockschedule</span><br><span class="line">clock, create = ClockedSchedule.objects.get_or_create(clocked_time=db_deploy_time)</span><br><span class="line"></span><br><span class="line"># 2.创建任务</span><br><span class="line">PeriodicTask.objects.create(</span><br><span class="line">                                clocked=clock,</span><br><span class="line">                                name=&#x27;vrigo-deploy_&#x27; + db_data[&#x27;service_list&#x27;] + &#x27;-&#x27; + str(db_deploy_time),</span><br><span class="line">                                task=&#x27;services.tasks.task_build_job&#x27;,</span><br><span class="line">                                args=json.dumps([services, int(id)]),</span><br><span class="line">                                start_time=datetime.datetime.now(),</span><br><span class="line">                                one_off=True,</span><br><span class="line">                            )</span><br></pre></td></tr></table></figure>
<p><strong>services/tasks.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> services.api.jenkins <span class="keyword">import</span> JenkinsApi</span><br><span class="line"><span class="keyword">from</span> services.views <span class="keyword">import</span> task_result_to_db</span><br><span class="line"><span class="keyword">from</span> users.api.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_build_job</span>(<span class="params">service,<span class="built_in">id</span></span>):</span></span><br><span class="line">    obj = JenkinsApi()</span><br><span class="line">    data = obj.build_job(service)   <span class="comment">#触发jenkins job</span></span><br><span class="line">    <span class="comment"># id = kwargs.get(&quot;id&quot;, 10)</span></span><br><span class="line">    to_db = task_result_to_db(<span class="built_in">id</span>, data)  <span class="comment">#将结果存入db中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">celery -A proj beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span><br><span class="line"></span><br><span class="line">celery worker -A virgo -l info</span><br><span class="line"></span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<p><img src="/django-celery/./celery02.png" alt></p>
<h3 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery flower -A virgo -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span><br></pre></td></tr></table></figure>
<p><img src="/django-celery/./celery03.png" alt></p>
<p><img src="/django-celery/./celery04.png" alt></p>
<p><img src="/django-celery/./celery05.png" alt></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-LDAP统一认证</title>
    <url>/django-ldap/</url>
    <content><![CDATA[<p>Django接入LDAP，实现用户身份认证<br><span id="more"></span></p>
<p>参考文档：</p>
<ul>
<li><a href="https://django-auth-ldap.readthedocs.io/">https://django-auth-ldap.readthedocs.io/</a></li>
<li><a href="https://pypi.org/project/django-auth-ldap/">https://pypi.org/project/django-auth-ldap/</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-auth-ldap</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Django-auth-ldap 配置部分</span></span><br><span class="line"><span class="keyword">import</span> ldap</span><br><span class="line"><span class="keyword">from</span> django_auth_ldap.config <span class="keyword">import</span> LDAPSearch, GroupOfNamesType, PosixGroupType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先使用ldap进行用户验证</span></span><br><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">&#x27;django_auth_ldap.backend.LDAPBackend&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># LDAP 服务地址</span></span><br><span class="line">AUTH_LDAP_SERVER_URI = configs[<span class="string">&#x27;ldap&#x27;</span>][<span class="string">&#x27;ldhost&#x27;</span>]</span><br><span class="line"><span class="comment"># 管理员账号信息</span></span><br><span class="line">AUTH_LDAP_BIND_DN = <span class="string">&quot;cn=root,dc=vcg,dc=com&quot;</span></span><br><span class="line">AUTH_LDAP_BIND_PASSWORD = <span class="string">&#x27;*****&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户搜索</span></span><br><span class="line">AUTH_LDAP_USER_SEARCH = LDAPSearch(</span><br><span class="line">    <span class="string">&quot;ou=People,dc=vcg,dc=com&quot;</span>, ldap.SCOPE_SUBTREE, <span class="string">&quot;(cn=%(user)s)&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 或者 直接绑定，省略搜索过程</span></span><br><span class="line"><span class="comment"># 直接指定AUTH_LDAP_USER_DN_TEMPLATE来构造用户的DN信息，这里应该有占位符%(user)s</span></span><br><span class="line"><span class="comment"># 写法更高效</span></span><br><span class="line"><span class="comment"># AUTH_LDAP_USER_DN_TEMPLATE = &quot;cn=%(user)s,ou=People,dc=vcg,dc=com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立用户模型和LDAP服务属性名(不区分大小写)的映射：</span></span><br><span class="line">AUTH_LDAP_USER_ATTR_MAP = &#123;</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span>: <span class="string">&quot;givenName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span>: <span class="string">&quot;sn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;mail&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组 搜索</span></span><br><span class="line">AUTH_LDAP_GROUP_SEARCH = LDAPSearch(</span><br><span class="line">    <span class="string">&quot;ou=Group,dc=vcg,dc=com&quot;</span>, ldap.SCOPE_SUBTREE, <span class="string">&quot;(objectClass=posixGroup)&quot;</span></span><br><span class="line">)</span><br><span class="line">AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr=<span class="string">&quot;cn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enbale组</span></span><br><span class="line">AUTH_LDAP_REQUIRE_GROUP = <span class="string">&quot;cn=vcg-tech,ou=Group,dc=vcg,dc=com&quot;</span></span><br><span class="line"><span class="comment">#disabled组</span></span><br><span class="line"><span class="comment"># AUTH_LDAP_DENY_GROUP = &quot;cn=disabled,ou=groups,dc=example,dc=com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组权限分配：可登录、可登录后台、超级管理员</span></span><br><span class="line">AUTH_LDAP_USER_FLAGS_BY_GROUP = &#123;</span><br><span class="line">    <span class="string">&quot;is_active&quot;</span>: <span class="string">&quot;cn=vcg-tech,ou=Group,dc=vcg,dc=com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_staff&quot;</span>: <span class="string">&quot;cn=virgo-admin,ou=Group,dc=vcg,dc=com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_superuser&quot;</span>: <span class="string">&quot;cn=virgo-admin,ou=Group,dc=vcg,dc=com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_MIRROR_GROUPS = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 如果为True，则每次用户登录时，将使用LDAP目录中的最新值来更新用户对象的字段。</span></span><br><span class="line"><span class="comment"># 否则，仅在自动创建用户对象时填充该用户对象。</span></span><br><span class="line">AUTH_LDAP_ALWAYS_UPDATE_USER = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_FIND_GROUP_PERMS = <span class="literal">True</span></span><br><span class="line"><span class="comment"># Cache distinguished names and group memberships for an hour to minimize</span></span><br><span class="line"><span class="comment"># LDAP traffic.</span></span><br><span class="line">AUTH_LDAP_CACHE_TIMEOUT = <span class="number">3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;django_auth_ldap&#x27;</span>)</span><br><span class="line">logger.addHandler(logging.StreamHandler())</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br></pre></td></tr></table></figure>
<h2 id="用户映射"><a href="#用户映射" class="headerlink" title="用户映射"></a>用户映射</h2><p>默认使用<code>AUTH_LDAP_USER_ATTR_MAP</code>字段实现用户信息映射，如果需要额外的用户属性，需要配合使用django 的signals机制，实现用户信息的扩展。</p>
<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>用户通过ldap登录后，在User表中source字段记录为”LDAP”</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h5 id="signale-py"><a href="#signale-py" class="headerlink" title="signale.py"></a>signale.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在app目录新建signale.py文件。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> django_auth_ldap.backend <span class="keyword">import</span> LDAPBackend, populate_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(<span class="params">populate_user, sender=LDAPBackend</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto_groups_upon_ldap</span>(<span class="params">sender, **kwargs</span>):</span></span><br><span class="line">    user = kwargs[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    user.source = <span class="string">&quot;LDAP&quot;</span></span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure>
<h5 id="apps-py"><a href="#apps-py" class="headerlink" title="apps.py"></a>apps.py</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RbacConfig</span>(<span class="params">AppConfig</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;apps.rbac&#x27;</span></span><br><span class="line">    verbose_name = <span class="string">&quot;RBAC&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增以下内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ready</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">from</span> .signals <span class="keyword">import</span> auto_groups_upon_ldap</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-ORM</title>
    <url>/django-orm/</url>
    <content><![CDATA[<p><img src="/django-orm/./orm1.png" alt></p>
<span id="more"></span>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p>
<p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p>
<p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p>
<h3 id="使用ORM的优点"><a href="#使用ORM的优点" class="headerlink" title="使用ORM的优点"></a>使用ORM的优点</h3><ul>
<li>提高开发效率。</li>
<li>不同数据库可以平滑切换。</li>
</ul>
<h3 id="使用ORM的缺点"><a href="#使用ORM的缺点" class="headerlink" title="使用ORM的缺点"></a>使用ORM的缺点</h3><ul>
<li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li>
<li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li>
</ul>
<h3 id="ORM解析过程"><a href="#ORM解析过程" class="headerlink" title="ORM解析过程"></a>ORM解析过程</h3><ol>
<li>ORM 会将 Python 代码转成为 SQL 语句。</li>
<li>SQL 语句通过 pymysql 传送到数据库服务端。</li>
<li>在数据库中执行 SQL 语句并将结果返回。</li>
</ol>
<h3 id="ORM开发步骤"><a href="#ORM开发步骤" class="headerlink" title="ORM开发步骤"></a>ORM开发步骤</h3><ol>
<li>在models.py定义模型类</li>
<li>生成迁移文件： <code>python manage.py makemigrations</code>  –&gt; <strong>在migrations文件夹生成0001_intial.py</strong></li>
<li>执行迁移生成数据库（默认会用sqite3数据库，生成数据库名为：db.sqlite3）</li>
<li><code>python mange.py migrate</code>  -&gt; <strong>在数据库中生成对应的数据 test01_department 等</strong></li>
<li>通过模型类和对象，对数据进行增删改查</li>
</ol>
<h3 id="ORM对应关系表"><a href="#ORM对应关系表" class="headerlink" title="ORM对应关系表"></a>ORM对应关系表</h3><p><img src="/django-orm/./orm2.png" alt></p>
<h2 id="Django配置"><a href="#Django配置" class="headerlink" title="Django配置"></a>Django配置</h2><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database db1 default character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h4 id="2-settings-py"><a href="#2-settings-py" class="headerlink" title="2.settings.py"></a>2.settings.py</h4><p>数据库配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;rm-2zebj2u1pd5c2y29jto.mysql.rds.aliyuncs.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;polaris-dev&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;vcgapp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;******&#x27;</span>,</span><br><span class="line">      	<span class="string">&quot;OPTIONS&quot;</span>: &#123;<span class="string">&quot;init_command&quot;</span>: <span class="string">&quot;SET default_storage_engine=INNODB;&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DEBUG日志：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-安装pymysql"><a href="#3-安装pymysql" class="headerlink" title="3.安装pymysql"></a>3.安装pymysql</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim __init__.py  #项目根目录，和settings.py同级目录</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<h4 id="4-使用model"><a href="#4-使用model" class="headerlink" title="4.使用model"></a>4.使用model</h4><p>若模型位于项目中的 <code>myapp.models</code> 模块（ 此包结构由 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/django-admin/#django-admin-startapp"><code>manage.py startapp</code></a> 命令创建）， <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> 应设置如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>,</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="模型Model"><a href="#模型Model" class="headerlink" title="模型Model"></a>模型Model</h2><p>参考官方文档：<a href="https://docs.djangoproject.com/zh-hans/3.1/topics/db/models/">https://docs.djangoproject.com/zh-hans/3.1/topics/db/models/</a></p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p><code>first_name</code> 和 <code>last_name</code> 是模型的 <a href="https://docs.djangoproject.com/zh-hans/3.1/topics/db/models/#fields">字段</a>。每个字段都被指定为一个类属性，并且每个属性映射为一个数据库列。</p>
<p>上面的 <code>Person</code> 模型会创建一个如下的数据库表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE myapp_person (</span><br><span class="line">    &quot;id&quot; serial NOT NULL PRIMARY KEY,</span><br><span class="line">    &quot;first_name&quot; varchar(30) NOT NULL,</span><br><span class="line">    &quot;last_name&quot; varchar(30) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>一些技术上的说明：</p>
<ul>
<li>该表的名称 <code>myapp_person</code> 是自动从某些模型元数据中派生出来，但可以被改写。参阅 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/options/#table-names">表名称</a> 获取更多信息。</li>
<li>一个 <code>id</code> 字段会被自动添加，但是这种行为可以被改写。请参阅 <a href="https://docs.djangoproject.com/zh-hans/3.1/topics/db/models/#automatic-primary-key-fields">自动设置主键</a>。</li>
<li>本例子中 <code>创建数据表</code> 的语法是 PostgreSQL 格式的。值得注意的是，Django 依据你在 <a href="https://docs.djangoproject.com/zh-hans/3.1/topics/settings/">配置文件</a> 中指定的数据库后端生成对应的 SQL 语句。</li>
</ul>
<h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>模型中最重要且唯一必要的是数据库的字段定义。字段在类属性中定义。定义字段名时应小心避免使用与 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/instances/">模型 API</a> 冲突的名称， 如 <code>clean</code>, <code>save</code>, or <code>delete</code> 等.</p>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Musician(models.Model):</span><br><span class="line">    first_name = models.CharField(max_length=50)</span><br><span class="line">    last_name = models.CharField(max_length=50)</span><br><span class="line">    instrument = models.CharField(max_length=100)</span><br><span class="line"></span><br><span class="line">class Album(models.Model):</span><br><span class="line">    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=100)</span><br><span class="line">    release_date = models.DateField()</span><br><span class="line">    num_stars = models.IntegerField()</span><br></pre></td></tr></table></figure>
<h3 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h3><p>模型中每一个字段都应该是某个 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/fields/#django.db.models.Field"><code>Field</code></a> 类的实例， Django 利用这些字段类来实现以下功能：</p>
<ul>
<li>字段类型用以指定数据库数据类型（如：<code>INTEGER</code>, <code>VARCHAR</code>, <code>TEXT</code>）。</li>
<li>在渲染表单字段时默认使用的 HTML <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/forms/widgets/">视图</a> (如： <code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;select&gt;</code>)。</li>
<li>基本的有效性验证功能，用于 Django 后台和自动生成的表单。</li>
</ul>
<p>Django 内置了数十种字段类型；你可以在 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/fields/#model-field-types">模型字段参考</a> 中看到完整列表。如果 Django 内置类型不能满足你的需求，你可以很轻松地编写自定义的字段类型；参见 <a href="https://docs.djangoproject.com/zh-hans/3.1/howto/custom-model-fields/">编写自定义模型字段(model fields)</a>。</p>
<p><strong>Django模型属性和MySQL数据库数据类型对应关系</strong></p>
<table>
<thead>
<tr>
<th>分类</th>
<th>模型属性类型</th>
<th>sql数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>自增</td>
<td>AutoField</td>
<td>int</td>
</tr>
<tr>
<td>布尔</td>
<td>BooleanField</td>
<td>tinyint</td>
</tr>
<tr>
<td></td>
<td>NullBooleanField</td>
<td>tinyint</td>
</tr>
<tr>
<td>字符</td>
<td>CharField</td>
<td>varchar</td>
</tr>
<tr>
<td></td>
<td>EmailField</td>
<td>varchar</td>
</tr>
<tr>
<td></td>
<td>TextField</td>
<td>longtext</td>
</tr>
<tr>
<td>数字</td>
<td>IntegerField</td>
<td>int</td>
</tr>
<tr>
<td></td>
<td>DecimalField</td>
<td>decimal</td>
</tr>
<tr>
<td></td>
<td>FloatField</td>
<td>double</td>
</tr>
<tr>
<td>日期和时间</td>
<td>DateField</td>
<td>date</td>
</tr>
<tr>
<td></td>
<td>TimeField</td>
<td>time</td>
</tr>
<tr>
<td></td>
<td>DateTimeField</td>
<td>datetime</td>
</tr>
<tr>
<td>文件</td>
<td>FileField</td>
<td>varchar</td>
</tr>
<tr>
<td></td>
<td>ImageField</td>
<td>varchar</td>
</tr>
<tr>
<td>外键</td>
<td>ForeignKey</td>
<td>alter table B add constraint A_B_Ids foreign key(Aid) references A(Ids)</td>
</tr>
<tr>
<td></td>
<td>ManytoMany</td>
<td>建中间表再关联外键</td>
</tr>
</tbody>
</table>
<h3 id="字段设计"><a href="#字段设计" class="headerlink" title="字段设计"></a>字段设计</h3><ul>
<li>避免允许 null 值的字段，null 值难以查询优化且占用额外的索引空间</li>
<li>充分考虑每张表的数据规模，选取合适主键字段类型。比如数据创建比较频繁的表，主键建议使用 <code>BigIntegerField</code></li>
<li>使用正确的字段类型，避免<code>TextField</code>代替<code>CharField</code>，<code>IntegerField</code>代替<code>BooleanField</code>等</li>
<li>如果字段的取值是一个有限集合，应使用 <code>choices</code> 选项声明枚举值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Gender</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        MALE = <span class="string">&#x27;MALE&#x27;</span></span><br><span class="line">        FEMALE = <span class="string">&#x27;FEMALE&#x27;</span></span><br><span class="line"></span><br><span class="line">    GENDER_CHOICES = (</span><br><span class="line">        (Gender.MALE, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">        (Gender.FEMALE, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gender = models.IntegerField(<span class="string">&quot;性别&quot;</span>, choices=GENDER_CHOICES)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果某个字段或某组字段被频繁用于过滤或排序查询，建议建立单字段索引或联合索引</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字段索引：使用 db_index=True 添加索引</span></span><br><span class="line">title = models.CharField(max_length=<span class="number">255</span>, db_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合索引：将多个字段组合在一起建立索引</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    index_together = [<span class="string">&#x27;field_name_1&#x27;</span>, <span class="string">&#x27;field_name_2&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合唯一索引：将多个组合在一起的索引，并且字段的组合值唯一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    unique_together = (<span class="string">&#x27;field_name_1&#x27;</span>, <span class="string">&#x27;field_name_2&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数据的增删查改"><a href="#数据的增删查改" class="headerlink" title="数据的增删查改"></a>数据的增删查改</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h4><ul>
<li>了解 Django ORM 是如何缓存数据的</li>
<li>了解 Django ORM 何时会做查询</li>
<li>不要以牺牲代码可读度为代价做过度优化</li>
</ul>
<h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><ul>
<li>避免全表扫描。优先使用<code>exists</code>, <code>count</code>等方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 project 的数量</span></span><br><span class="line">projects = Project.objects.<span class="built_in">filter</span>(enable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad: 会强制将 projects 实例化，导致全表扫描</span></span><br><span class="line">project_count = <span class="built_in">len</span>(projects)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Good: 直接从数据库层面统计，避免全表扫描</span></span><br><span class="line">project_count = projects.count()</span><br></pre></td></tr></table></figure>
<ul>
<li>避免 N + 1 查询。可使用<code>select_related</code>提前将关联表进行 join，一次性获取相关数据，many-to-many 的外键则使用<code>prefetch_related</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># select_related</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad</span></span><br><span class="line"><span class="comment"># 由于 ORM 的懒加载特性，在执行 filter 操作时，并不会将外键关联表的字段取出，而是在使用时，实时查询。这样会产生大量的数据库查询操作</span></span><br><span class="line">students = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">student_in_class = &#123;student.name: student.cls.name <span class="keyword">for</span> student <span class="keyword">in</span> students&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good</span></span><br><span class="line"><span class="comment"># 使用 select_related 可以避免 N + 1 查询，一次性将外键字段取出</span></span><br><span class="line">students = Student.objects.select_related(<span class="string">&#x27;cls&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">student_in_class = &#123;student.name: student.cls.name <span class="keyword">for</span> student <span class="keyword">in</span> students&#125;</span><br><span class="line"><span class="comment"># prefetch_related</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad</span></span><br><span class="line">articles = Article.objects.<span class="built_in">filter</span>(id__in=(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> articles:</span><br><span class="line">    <span class="comment"># 会产生新的数据库查询操作</span></span><br><span class="line">    item.tags.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good</span></span><br><span class="line">articles = Article.objects.prefetch_related(<span class="string">&quot;tags&quot;</span>).<span class="built_in">filter</span>(id__in=(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> articles:</span><br><span class="line">    <span class="comment"># 不会产生新的数据库查询操作</span></span><br><span class="line">    item.tags.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>如果仅查询外键 ID，则无需进行连表操作。使用 <code>外键名_id</code> 可直接获取</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取学生的班级ID</span></span><br><span class="line">student = Student.objects.first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad: 会产生一次关联查询</span></span><br><span class="line">cls_id = student.cls.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Good: 不产生新的查询</span></span><br><span class="line">cls_id = student.cls_id</span><br></pre></td></tr></table></figure>
<ul>
<li>避免查询全部字段。可使用<code>values</code>, <code>values_list</code>, <code>only</code>, <code>defer</code>等方法进行过滤出需要使用的字段。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅获取学生姓名的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad</span></span><br><span class="line">students = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">student_names = [student.name <span class="keyword">for</span> student <span class="keyword">in</span> students]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good</span></span><br><span class="line">students = Student.objects.<span class="built_in">all</span>().values_list(<span class="string">&#x27;name&#x27;</span>, flat=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>避免在循环中进行数据库操作。尽量使用 ORM 提供的批量方法，防止在数据量变大的时候产生大量数据库连接导致请求变慢</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量创建项目</span></span><br><span class="line">project_names = [<span class="string">&#x27;ProjectA&#x27;</span>, <span class="string">&#x27;ProjectB&#x27;</span>, <span class="string">&#x27;ProjectC&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad</span></span><br><span class="line"><span class="keyword">for</span> project_name <span class="keyword">in</span> project_names:</span><br><span class="line">    Project.objects.create(name=project_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good</span></span><br><span class="line">projects = []</span><br><span class="line"><span class="keyword">for</span> project_name <span class="keyword">in</span> project_names:</span><br><span class="line">    project = Project(name=project_name)</span><br><span class="line">    projects.append(project)</span><br><span class="line">Project.objects.bulk_create(projects)</span><br><span class="line"><span class="comment"># 批量查询项目</span></span><br><span class="line">project_names = [<span class="string">&#x27;ProjectA&#x27;</span>, <span class="string">&#x27;ProjectB&#x27;</span>, <span class="string">&#x27;ProjectC&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad: 每次循环都产生一次新的查询</span></span><br><span class="line">projects = []</span><br><span class="line"><span class="keyword">for</span> project_name <span class="keyword">in</span> project_names:</span><br><span class="line">    project = Project.objects.get(name=project_name)</span><br><span class="line">    projects.append(project)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good：使用 in，只需一次数据库查询</span></span><br><span class="line">projects = Project.objects.<span class="built_in">filter</span>(name__in=project_names)</span><br><span class="line"><span class="comment"># 批量更新项目</span></span><br><span class="line">project_names = [<span class="string">&#x27;ProjectA&#x27;</span>, <span class="string">&#x27;ProjectB&#x27;</span>, <span class="string">&#x27;ProjectC&#x27;</span>]</span><br><span class="line">projects = Project.objects.<span class="built_in">filter</span>(name__in=project_names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad: 每次循环都产生一次新的查询</span></span><br><span class="line"><span class="keyword">for</span> project <span class="keyword">in</span> projects:</span><br><span class="line">    project.enable = <span class="literal">True</span></span><br><span class="line">    project.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good：批量更新，只需一次数据库查询</span></span><br><span class="line">projects.update(enable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>避免隐式的子查询</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询符合条件的组别中的人员</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bad: 将查询集作为下一个查询的过滤条件，因此产生了子查询。IN 语句中的子查询在外层查询的每一行中都会被执行一次，复杂度为 O(n^2)</span></span><br><span class="line">groups = Group.objects.<span class="built_in">filter</span>(<span class="built_in">type</span>=<span class="string">&quot;typeA&quot;</span>)</span><br><span class="line">members = Member.objects.<span class="built_in">filter</span>(group__in=groups)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Good: 以确定的数据作为过滤条件，避免子查询</span></span><br><span class="line">group_ids = Group.objects.<span class="built_in">filter</span>(<span class="built_in">type</span>=<span class="string">&quot;typeA&quot;</span>).values_list(<span class="string">&#x27;id&#x27;</span>, flat=<span class="literal">True</span>)</span><br><span class="line">members = Member.objects.<span class="built_in">filter</span>(group__id__in=<span class="built_in">list</span>(group_ids))</span><br></pre></td></tr></table></figure>
<ul>
<li><code>update_or_create</code> 与 <code>get_or_create</code> 不是线程安全的。因此查询条件的字段必须要有唯一性约束</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为了保证逻辑的正确性，Host 表中的 ip 和 bk_cloud_id 字段必须设置为 unique_together。否则在高并发情况下，可能会创建出多条相同的记录，最终导致逻辑异常</span></span><br><span class="line">host, is_created = Host.objects.get_or_create(</span><br><span class="line">    ip=<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    bk_cloud_id=<span class="string">&quot;0&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果查询集只用于单次循环，建议使用 <code>iterator()</code> 保持连接查询。当查询结果有很多对象时，QuerySet 的缓存行为会导致使用大量内存。如果你需要对查询结果进行好几次循环，这种缓存是有意义的，但是对于 QuerySet 只循环一次的情况，缓存就没什么意义了。在这种情况下，<code>iterator()</code>可能是更好的选择</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bad</span></span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> Task.objects.<span class="built_in">all</span>():</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Good</span></span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> Task.objects.<span class="built_in">all</span>().iterator():</span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-SSL证书管理</title>
    <url>/django-ssl/</url>
    <content><![CDATA[<p>Django-SSL证书管理<br><img src="/django-ssl/./VCG41N1141648661.jpg" alt><br><span id="more"></span></p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>将域名的SSL证书保存到Django开发的系统中</li>
<li>上传SSL证书文件，系统自动获取证书生效时间、过期时间、颁发机构</li>
<li>校验SSL证书文件格式</li>
<li>统一规范证书名称</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>使用Django数据库存储SSL证书文件信息，证书文件保存到Django服务器</li>
<li>使用Django 信号（signals）监听model对象</li>
<li>使用OpenSSL解析证书</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> base.models <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> .validators <span class="keyword">import</span> validate_certificate_file_extension, validate_private_key_file_extension</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Certificate</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    SSL证书</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>, unique=<span class="literal">True</span>,  verbose_name=<span class="string">&quot;名称&quot;</span>)</span><br><span class="line">    certificate = models.TextField(</span><br><span class="line">        verbose_name=<span class="string">&#x27;certificate&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    certificate_file = models.FileField(</span><br><span class="line">        verbose_name=<span class="string">&#x27;certificate_file&#x27;</span>, upload_to=<span class="string">&#x27;ssl/&#x27;</span>, validators=[validate_certificate_file_extension])</span><br><span class="line">    private_key = models.TextField(</span><br><span class="line">        verbose_name=<span class="string">&#x27;private_key&#x27;</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    private_key_file = models.FileField(</span><br><span class="line">        verbose_name=<span class="string">&#x27;private_key_file&#x27;</span>, upload_to=<span class="string">&#x27;ssl/&#x27;</span>, validators=[validate_private_key_file_extension])</span><br><span class="line"></span><br><span class="line">    before_time = models.CharField(</span><br><span class="line">        max_length=<span class="number">60</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,  verbose_name=<span class="string">&quot;生效时间&quot;</span>)</span><br><span class="line">    after_time = models.CharField(</span><br><span class="line">        max_length=<span class="number">60</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,  verbose_name=<span class="string">&quot;过期时间&quot;</span>)</span><br><span class="line">    organization = models.CharField(</span><br><span class="line">        max_length=<span class="number">20</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,  verbose_name=<span class="string">&quot;组织&quot;</span>)</span><br><span class="line">    domain = models.CharField(</span><br><span class="line">        max_length=<span class="number">60</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,  verbose_name=<span class="string">&quot;域名&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&quot;SSL证书&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        ordering = [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<h3 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">models.Certificate</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CertificateAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    readonly_fields = (<span class="string">&#x27;domain&#x27;</span>, <span class="string">&#x27;organization&#x27;</span>, <span class="string">&#x27;before_time&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;after_time&#x27;</span>, <span class="string">&#x27;private_key&#x27;</span>, <span class="string">&#x27;certificate&#x27;</span>)</span><br><span class="line">    list_display = (</span><br><span class="line">        <span class="string">&quot;id&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h3 id="validators-py"><a href="#validators-py" class="headerlink" title="validators.py"></a>validators.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_certificate_file_extension</span>(<span class="params">value</span>):</span></span><br><span class="line">    ext = os.path.splitext(value.name)[<span class="number">1</span>]</span><br><span class="line">    valid_extensions = [<span class="string">&#x27;.pem&#x27;</span>, <span class="string">&#x27;.crt&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ext.lower() <span class="keyword">in</span> valid_extensions:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;Unsupported file extension.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_private_key_file_extension</span>(<span class="params">value</span>):</span></span><br><span class="line">    ext = os.path.splitext(value.name)[<span class="number">1</span>]</span><br><span class="line">    valid_extensions = [<span class="string">&#x27;.key&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ext.lower() <span class="keyword">in</span> valid_extensions:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;Unsupported file extension.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="signals-py"><a href="#signals-py" class="headerlink" title="signals.py"></a>signals.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Certificate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(<span class="params">post_save, sender=Certificate</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_save_func</span>(<span class="params">sender, **kwargs</span>):</span></span><br><span class="line">    instance = kwargs[<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> kwargs[<span class="string">&#x27;created&#x27;</span>]:</span><br><span class="line">        <span class="comment"># 1.改名字，规范证书名字。</span></span><br><span class="line">        <span class="comment"># 2.查询证书的生效时间、过期时间</span></span><br><span class="line">        c_file = instance.certificate_file.path</span><br><span class="line">        p_file = instance.private_key_file.path</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(c_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            cert_buf = f.read()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(c_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            priv_buf = f.read()</span><br><span class="line"></span><br><span class="line">        instance.certificate = cert_buf</span><br><span class="line">        instance.private_key = priv_buf</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> OpenSSL <span class="keyword">import</span> crypto</span><br><span class="line">        cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_buf)</span><br><span class="line"></span><br><span class="line">        domain = cert.get_subject().get_components()[</span><br><span class="line">            <span class="number">0</span>][<span class="number">1</span>].decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> domain:</span><br><span class="line">            instance.domain = domain</span><br><span class="line"></span><br><span class="line">        date_format, encoding = <span class="string">&quot;%Y%m%d%H%M%SZ&quot;</span>, <span class="string">&quot;ascii&quot;</span></span><br><span class="line">        not_before = datetime.strptime(</span><br><span class="line">            cert.get_notBefore().decode(encoding), date_format)</span><br><span class="line">        not_after = datetime.strptime(</span><br><span class="line">            cert.get_notAfter().decode(encoding), date_format)</span><br><span class="line"></span><br><span class="line">        instance.before_time = not_before</span><br><span class="line">        instance.after_time = not_after</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> todo <span class="keyword">in</span> cert.get_issuer().get_components():</span><br><span class="line">            <span class="keyword">if</span> todo[<span class="number">0</span>] == <span class="string">b&#x27;O&#x27;</span>:</span><br><span class="line">                organization = todo[<span class="number">1</span>].decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        instance.organization = organization</span><br><span class="line">        dirname, c_filename = os.path.split(c_file)</span><br><span class="line">        dirname, p_filename = os.path.split(p_file)</span><br><span class="line">        file_extension = c_filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join(random.sample(</span><br><span class="line">            string.ascii_letters + string.digits, <span class="number">8</span>))</span><br><span class="line">        new_c_filename = <span class="string">&quot;&#123;&#125;_&#123;&#125;.&#123;&#125;&quot;</span>.<span class="built_in">format</span>(domain, random_str, file_extension)</span><br><span class="line">        new_c_file = os.path.join(dirname, c_file)</span><br><span class="line">        <span class="comment"># os.rename(c_file, new_c_file)</span></span><br><span class="line">        <span class="keyword">from</span> django.core.files.base <span class="keyword">import</span> File</span><br><span class="line">        instance.certificate_file.save(</span><br><span class="line">            new_c_filename, File(<span class="built_in">open</span>(new_c_file)))</span><br><span class="line">        file_extension = p_filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        new_p_filename = <span class="string">&quot;&#123;&#125;_&#123;&#125;.&#123;&#125;&quot;</span>.<span class="built_in">format</span>(domain, random_str, file_extension)</span><br><span class="line">        new_p_file = os.path.join(dirname, new_p_filename)</span><br><span class="line">        <span class="comment"># os.rename(p_file, new_p_file)</span></span><br><span class="line">        instance.private_key_file.save(</span><br><span class="line">            new_p_filename, File(<span class="built_in">open</span>(p_file)))</span><br><span class="line">        os.remove(p_file)</span><br><span class="line">        os.remove(c_file)</span><br><span class="line"></span><br><span class="line">        instance.save()</span><br></pre></td></tr></table></figure>
<h3 id="apps-py"><a href="#apps-py" class="headerlink" title="apps.py"></a>apps.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CmdbConfig</span>(<span class="params">AppConfig</span>):</span></span><br><span class="line">    default_auto_field = <span class="string">&#x27;django.db.models.BigAutoField&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;apps.cmdb&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ready</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">from</span> .signals <span class="keyword">import</span> post_save_func</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="新建证书时校验证书文件的后缀"><a href="#新建证书时校验证书文件的后缀" class="headerlink" title="新建证书时校验证书文件的后缀"></a>新建证书时校验证书文件的后缀</h3><p><img src="/django-ssl/./ssl01.png" alt></p>
<h3 id="文件上传后自动解析证书"><a href="#文件上传后自动解析证书" class="headerlink" title="文件上传后自动解析证书"></a>文件上传后自动解析证书</h3><p><img src="/django-ssl/./ssl02.png" alt></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-镜像image</title>
    <url>/docker-image/</url>
    <content><![CDATA[<p>Docker镜像是启动容器的基石。<br><span id="more"></span></p>
<h4 id="什么是Docker镜像"><a href="#什么是Docker镜像" class="headerlink" title="什么是Docker镜像"></a>什么是Docker镜像</h4><hr>
<p>Docker镜像是由文件系统叠加而成。最底端是一个文件引导系统，即bootfs。Docker用户不会与引导文件系统有直接的交互。Docker镜像的第二层是root文件系统rootfs，通常是一种或多种操作系统，例如ubuntu等。在Docker中，文件系统永远都是只读的，在每次修改时，都是进行拷贝叠加从而形成最终的文件系统。Docker称这样的文件为镜像。一个镜像可以迭代在另一个镜像的顶部。位于下方的镜像称之为父镜像，最底层的镜像称之为<strong>基础镜像</strong>。最后，当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器。</p>
<p><img src="/docker-image/Docker镜像.JPEG" alt="Docker镜像"></p>
<p>Docker的这种机制我们称之为<strong>写时复制</strong>。</p>
<h4 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h4><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<p>该命令可以用于查找当前系统中所有存在的镜像列表。</p>
<p>Ps：本地镜像默认保存在Docker宿主机的/var/lib/docker目录下。所有的镜像都是保存在仓库中，而仓库位于Registry中。默认的Registry是Docker公司运营的Docker Hub。每个镜像仓库都可以存放很多的镜像。</p>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p>上述命令会拉取镜像到本地。</p>
<p>为了区分同一个仓库中不同的镜像，Docker提供了一种tag的功能。我们可以给每个版本的镜像添加一个唯一的tag来标识该镜像。此时，镜像的名称如下：仓库名称:tag。我们在运行镜像或拉取镜像时，可以直接指定对应的标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry-vpc.cn-beijing.aliyuncs.com/vcgcs/jdk8:util</span><br></pre></td></tr></table></figure>
<h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><hr>
<p>从Docker Hub查找有哪些公共的可用镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search keywords</span><br></pre></td></tr></table></figure>
<h4 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h4><hr>
<p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t runoob/ubuntu:v1 . </span><br></pre></td></tr></table></figure>
<p>使用URL <strong>github.com/creack/docker-firefox</strong> 的 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure>
<p>也可以通过 -f Dockerfile 文件的位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure>
<h4 id="登录镜像仓库"><a href="#登录镜像仓库" class="headerlink" title="登录镜像仓库"></a>登录镜像仓库</h4><p>使用阿里云容器镜像服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login --username=&quot;ops@vcg.com&quot; --password=&quot;******&quot; registry-vpc.cn-beijing.aliyuncs.com</span><br></pre></td></tr></table></figure>
<h4 id="推送镜像到仓库"><a href="#推送镜像到仓库" class="headerlink" title="推送镜像到仓库"></a>推送镜像到仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcgcs/jdk8:util</span><br></pre></td></tr></table></figure>
<h4 id="修改镜像Tag"><a href="#修改镜像Tag" class="headerlink" title="修改镜像Tag"></a>修改镜像Tag</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images  # 获取ImageId</span><br><span class="line">docker tag [ImageId] registry.cn-beijing.aliyuncs.com/vcg/500px-vcg-com:[镜像版本号]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器网络抓包案例</title>
    <url>/docker-tcpdump/</url>
    <content><![CDATA[<p>Docker容器网络抓包案例<br><span id="more"></span></p>
<p>使用宿主机上的tcpdump工具对容器进程抓包</p>
<h5 id="获取容器PID"><a href="#获取容器PID" class="headerlink" title="获取容器PID"></a>获取容器PID</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取容器ID</span></span><br><span class="line">docker ps |grep xxx </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取PID</span></span><br><span class="line">docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot;  container_id/name</span><br></pre></td></tr></table></figure>
<h5 id="使用nsenter切换网络命令空间"><a href="#使用nsenter切换网络命令空间" class="headerlink" title="使用nsenter切换网络命令空间"></a>使用nsenter切换网络命令空间</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nsenter -n -t container_id/name</span><br></pre></td></tr></table></figure>
<h5 id="使用tcpdump抓包"><a href="#使用tcpdump抓包" class="headerlink" title="使用tcpdump抓包"></a>使用tcpdump抓包</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -vvv -s0 -w tcpdump-contract.pcap</span><br><span class="line">tcpdump -vvv -s0 host 10.10.4.63 -w tcpdump-edge2.pcap</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="完整操作记录："><a href="#完整操作记录：" class="headerlink" title="完整操作记录："></a>完整操作记录：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# docker ps |grep contract</span><br><span class="line">55b1fdb7a079        registry-vpc.cn-beijing.aliyuncs.com/vcg/vcg-boss-contract                   &quot;/bin/sh -c &#x27;java ...&quot;   4 days ago          Up 4 days                               k8s_vcg-boss-contract_vcg-boss-contract-55cd566f74-m2m72_default_7bf56757-b9b6-11e9-afe7-00163e0e2421_0</span><br><span class="line">f372c163217f        registry-vpc.cn-beijing.aliyuncs.com/acs/pause-amd64:3.0                     &quot;/pause&quot;                 4 days ago          Up 4 days                               k8s_POD_vcg-boss-contract-55cd566f74-m2m72_default_7bf56757-b9b6-11e9-afe7-00163e0e2421_0</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; 55b1fdb7a079</span><br><span class="line">9421</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# nsenter -n -t 9421</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# tcpdump -vvv -s0 host 10.10.4.138 -w tcpdump-contract.pcap</span><br><span class="line">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">0 packets captured</span><br><span class="line">0 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>域名SSL证书</title>
    <url>/domain-ssl/</url>
    <content><![CDATA[<p>SSL证书<br><span id="more"></span></p>
<h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><ul>
<li><p>什么是数字证书？</p>
<p>数字证书是一个经权威授权机构数字签名、包含公开密钥拥有者信息以及公开密钥的文件，是权威机构颁发给网站的可信凭证。最简单的证书包含一个公开密钥、证书名称以及证书授权中心的数字签名。</p>
<p>数字证书还有一个重要的特征：只在特定的时间段内有效。</p>
</li>
<li><p>什么是SSL？</p>
<p>SSL协议是一种可实现网络通信加密的安全协议，可在浏览器和网站之间建立加密通道，保障数据在传输的过程中不被篡改或窃取。</p>
</li>
<li><p>什么是SSL证书？</p>
<p>SSL证书采用SSL协议进行通信，是由权威机构颁发给网站的可信凭证。</p>
<p>SSL证书采用SSL协议进行通信。SSL证书部署到Web服务器后，Web服务器访问将启用HTTPS协议。您的网站将会通过 HTTPS 加密协议来传输数据，可帮助Web服务器和网站间建立可信的加密链接，从而保证网络数据传输的安全。</p>
</li>
<li><p>什么是HTTPS？</p>
<p>HTTPS是一种基于SSL协议的网站加密传输协议。</p>
<p>网站安装SSL证书后，使用HTTPS加密协议访问，可激活客户端浏览器到网站服务器之间的<strong>SSL加密通道</strong>（SSL协议），从而实现高强度双向加密传输，防止传输数据被泄露或篡改。HTTPS 也就是HTTP + SSL，是HTTP的安全版。</p>
</li>
<li><p>什么是CA认证中心？</p>
<p>CA认证中心（CA机构），即证书授权中心（Certificate Authority），或称证书授权机构。</p>
<p>CA认证中心作为电子商务交易中受信任的第三方，承担公钥体系中公钥合法性检验的责任。</p>
</li>
</ul>
<h2 id="SSL证书类型配置表"><a href="#SSL证书类型配置表" class="headerlink" title="SSL证书类型配置表"></a>SSL证书类型配置表</h2><p>证书根据不同的验证级别，分为以下三类：</p>
<ul>
<li>域名型SSL（DV SSL）</li>
<li>企业型SSL（OV SSL）</li>
<li>增强型SSL（EV SSL）</li>
</ul>
<p>根据保护域名的数量需求，SSL 证书又分为：</p>
<ul>
<li>单域名版：只保护一个域名，例如 <a href="http://www.abc.com">www.abc.com</a> 或者 login.abc.com 之类的单个域名</li>
<li>多域名版：一张证书可以保护多个域名，例如同时保护 <a href="http://www.abc.com">www.abc.com</a> , <a href="http://www.bcd.com">www.bcd.com</a>, pay.efg.com 等</li>
<li>通配符版：一张证书保护同一个主域名下同一级的所有子域名，不限个数，形如 *.abc.com 。注意，通配符版只有 DVSSL 和 OVSSL 具有， EVSSL 不具有通配符版本。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">证书品牌</th>
<th style="text-align:left">证书类型</th>
<th style="text-align:left">保护域名的类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GeoTrust</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">1个带通配符的域名1个明细域名多个明细域名</td>
<td style="text-align:left">提供加密功能，对申请者的身份进行严格的审核验证，可提供可信身份证明。多个域名例上限为300个。如: buy1.example.com, buy2.example.com, next.buy.example2.com, 上述3个明细子域名计算为3个域名。</td>
</tr>
<tr>
<td style="text-align:left">高级版EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">GlobalSign</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">通配符域名</td>
<td style="text-align:left">提供加密功能，对申请者进行严格的身份审核验证，提供可信身份证明。</td>
</tr>
<tr>
<td style="text-align:left">CFCA</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">通配符域名1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者进行严格的身份审核验证，提供可信身份证明。</td>
</tr>
<tr>
<td style="text-align:left">高级版EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Symantec</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">通配符域名1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者进行严格的身份审核验证，提供可信身份证明。</td>
</tr>
<tr>
<td style="text-align:left">通配符DV SSL</td>
<td style="text-align:left">通配符域名</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">增强型OV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供站点加密功能，需要核验组织注册信息，证书中会显示组织名称。组织信息验证通过后，3个工作日内颁发证书。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">高级版EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">增强型EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">增强型EV SSL提供站点加密功能，浏览器绿色地址栏显示组织信息强化信任。组织信息验证通过后7个工作日内颁发证书。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">免费型DV SSL</td>
<td style="text-align:left">1个域名</td>
<td style="text-align:left">免费新根证书，切入DigiCert PKI体系，兼容性操作系统版本IOS 5.0+、Android 2.3.3+、JRE 1.6.5+、WIN 7+。最多保护一个明细子域名，不支持通配符，一个阿里云帐户最多签发20张免费证书。</td>
</tr>
</tbody>
</table>
<h2 id="SSL证书购买"><a href="#SSL证书购买" class="headerlink" title="SSL证书购买"></a>SSL证书购买</h2><p>登录阿里云控制台，进入SSL证书服务。</p>
<p><img src="/domain-ssl/免费SSL证书购买.jpg" alt="免费SSL证书购买"></p>
<h2 id="SSL证书更新"><a href="#SSL证书更新" class="headerlink" title="SSL证书更新"></a>SSL证书更新</h2><p>公司域名SSL证书即将到期，替换SSL证书需知道哪些二级域名使用了HTTPS访问，并且获取SSL证书过期时间，来验证证书是否更新。</p>
<h5 id="获取域名下的解析信息"><a href="#获取域名下的解析信息" class="headerlink" title="获取域名下的解析信息"></a>获取域名下的解析信息</h5><p>登录域名服务商控制条—云解析—域名解析列表—导出解析记录</p>
<p>将二级域名的记录写入domains.txt文件备用</p>
<h5 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for domain in `cat domains.txt` #读取存储了需要监测的域名的文件</span><br><span class="line">do</span><br><span class="line">    curl $domain.vcg.com:443 1&gt;/dev/null 2&gt;/dev/null --connect-timeout 3</span><br><span class="line">    if [[ $? -eq 0  ]]; then</span><br><span class="line">      END_TIME=$(echo | openssl s_client -servername $domain.vcg.com  -connect $domain.vcg.com:443 2&gt;/dev/null | openssl x509 -noout -dates |grep &#x27;After&#x27;| awk -F &#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;| awk -F &#x27; +&#x27; &#x27;&#123;print $1,$2,$4 &#125;&#x27; )</span><br><span class="line">      echo &quot;$domain.vcg.com 的SSL证书到期时间为 $END_TIME  &quot;  &gt;&gt; result1.txt</span><br><span class="line">    else</span><br><span class="line">      echo &quot;$domain.vcg.com 没https &quot; &gt;&gt; result1.txt</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h5 id="根据输出文件查看SSL证书过期时间，进行证书替换工作"><a href="#根据输出文件查看SSL证书过期时间，进行证书替换工作" class="headerlink" title="根据输出文件查看SSL证书过期时间，进行证书替换工作"></a>根据输出文件查看SSL证书过期时间，进行证书替换工作</h5><h5 id="SSL证书更新的配置路径"><a href="#SSL证书更新的配置路径" class="headerlink" title="SSL证书更新的配置路径"></a>SSL证书更新的配置路径</h5><ul>
<li>阿里云OSS-对象存储</li>
<li>阿里云WAF-Web防火墙</li>
<li>阿里云SLB-负载均衡</li>
<li>Nginx</li>
</ul>
<p>##### </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>SSL证书</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSL证书</tag>
      </tags>
  </entry>
  <entry>
    <title>开源日志分析平台ELK</title>
    <url>/elk/</url>
    <content><![CDATA[<p>Elasticsearch、Kibana、Beats 和 Logstash（也称为 <a href="https://www.elastic.co/cn/elk-stack">ELK Stack</a>）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p>
<span id="more"></span>
<h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><p><a href="https://www.elastic.co/cn/elastic-stack">https://www.elastic.co/cn/elastic-stack</a></p>
<p>ELK是三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p>
<p>Elasticsearch是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p>
<p>Logstash 主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c/s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p>
<p>Kibana 也是一个开源和免费的工具，Kibana可以为 Logstash 和ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p>
<p>部署文档：<a href="https://www.elastic.co/cn/start">https://www.elastic.co/cn/start</a></p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h5 id="一、安装Elasticsearch"><a href="#一、安装Elasticsearch" class="headerlink" title="一、安装Elasticsearch"></a>一、安装Elasticsearch</h5><h6 id="1-创建es用户"><a href="#1-创建es用户" class="headerlink" title="1.创建es用户"></a>1.创建es用户</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd es</span><br></pre></td></tr></table></figure>
<h6 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.10.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#由于访问国外网站速度受限，已经软件包上传到oss中供大家下载。</span><br><span class="line">https://geeksre.oss-cn-beijing.aliyuncs.com/download/elasticsearch-7.10.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<h6 id="3-初始化环境"><a href="#3-初始化环境" class="headerlink" title="3.初始化环境"></a>3.初始化环境</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用root用户创建/data/ 目录</span></span><br><span class="line">mkdir /data/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chown es:es /data/</span><br><span class="line"></span><br><span class="line">su - es</span><br><span class="line"></span><br><span class="line">tar zxf elasticsearch-7.10.1-linux-x86_64.tar.gz -C /data/</span><br></pre></td></tr></table></figure>
<h6 id="4-目录介绍"><a href="#4-目录介绍" class="headerlink" title="4.目录介绍"></a>4.目录介绍</h6><ul>
<li>bin：可执行文件在里面，运行es的命令就在这个里面，包含了一些脚本文件等</li>
<li>config：配置文件目录</li>
<li>jdk：java环境</li>
<li>lib：依赖的jar，类库</li>
<li>logs：日志文件</li>
<li>modules：es相关的模块</li>
<li>plugins：可以自己开发的插件</li>
<li>data：索引目录</li>
</ul>
<h6 id="5-修改es配置"><a href="#5-修改es配置" class="headerlink" title="5.修改es配置"></a>5.修改es配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、网络配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认情况下，Elasticsearch 仅仅绑定回环地址，比如127.0.0.1 和[::1] 。这足以在服务器上运行单个开发节点。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了与其他服务器上的节点进行通信并形成集群，你的节点将需要绑定到非环回地址。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦配置了network.host之类的网络设置，Elasticsearch就会假定您正在转向生产并将上述警告升级为异常。 这些异常将阻止您的Elasticsearch节点启动。 这是一项重要的安全措施，可确保您不会因服务器配置错误而丢失数据。</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、discovery配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在开始生产之前，应该配置两个重要的discovery 和cluster 设置，以便群集中的节点可以相互发现并选择主节点。</span></span><br><span class="line">discovery.seed_hosts: [&quot;172.21.4.91&quot;]</span><br><span class="line"></span><br><span class="line">vim config/jvm.options</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改JVM参数</span></span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure>
<h6 id="6-修改系统参数"><a href="#6-修改系统参数" class="headerlink" title="6.修改系统参数"></a>6.修改系统参数</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用root账户</span></span><br><span class="line">sysctl -w vm.max_map_count=655360</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br></pre></td></tr></table></figure>
<h6 id="7-启动es"><a href="#7-启动es" class="headerlink" title="7.启动es"></a>7.启动es</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/elasticsearch</span><br><span class="line"></span><br><span class="line">#后台运行启动方式</span><br><span class="line">bin/elasticsearch -d</span><br></pre></td></tr></table></figure>
<h6 id="8-验证"><a href="#8-验证" class="headerlink" title="8.验证"></a>8.验证</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查端口</span></span><br><span class="line">netstat -ntlpa |grep 9200</span><br><span class="line"></span><br><span class="line">tcp6       0      0 :::9200                 :::*                    LISTEN      15026/java</span><br><span class="line">tcp6       0      0 172.21.4.91:9200        43.247.177.226:62904    ESTABLISHED 15026/java</span><br><span class="line">tcp6       0      0 172.21.4.91:9200        43.247.177.226:62903    ESTABLISHED 15026/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">浏览器或curl访问</span></span><br><span class="line">curl 127.0.0.1:9200</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;iZ2ze2u8hiajmbxrnpsvuyZ&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;OQp7CeEfQKyvTYHyExci6w&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.10.1&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;1c34507e66d7db1211f66f3513706fdf548736aa&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-12-05T01:00:33.671820Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.7.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="二、安装kibana"><a href="#二、安装kibana" class="headerlink" title="二、安装kibana"></a>二、安装kibana</h5><h6 id="1-创建kibana用户"><a href="#1-创建kibana用户" class="headerlink" title="1.创建kibana用户"></a>1.创建kibana用户</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd kibana</span><br></pre></td></tr></table></figure>
<h6 id="2-下载安装包-1"><a href="#2-下载安装包-1" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://artifacts.elastic.co/downloads/kibana/kibana-7.10.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">#由于访问国外网站速度受限，已经软件包上传到oss中供大家下载。</span><br><span class="line">https://geeksre.oss-cn-beijing.aliyuncs.com/download/kibana-7.10.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<h6 id="3-初始化环境-1"><a href="#3-初始化环境-1" class="headerlink" title="3.初始化环境"></a>3.初始化环境</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用root用户创建/data/ 目录</span></span><br><span class="line">mkdir /data/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chown kibana:kibana /data/</span><br><span class="line"></span><br><span class="line">su - kibana</span><br><span class="line"></span><br><span class="line">tar zxf kibana-7.10.1-linux-x86_64.tar.gz -C /data/</span><br></pre></td></tr></table></figure>
<h6 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4.修改配置"></a>4.修改配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim config/kibana.yml</span><br><span class="line"></span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.hosts: [&quot;http://172.21.4.91:9200&quot;]</span><br></pre></td></tr></table></figure>
<h6 id="5-启动"><a href="#5-启动" class="headerlink" title="5.启动"></a>5.启动</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/kibana</span><br></pre></td></tr></table></figure>
<h6 id="6-访问"><a href="#6-访问" class="headerlink" title="6.访问"></a>6.访问</h6><h6 id><a href="#" class="headerlink" title></a><img src="/elk/./kibana.png" alt></h6><h5 id="三、安装Filebeat"><a href="#三、安装Filebeat" class="headerlink" title="三、安装Filebeat"></a>三、安装Filebeat</h5><p><img src="/elk/./filebeat01.png" alt></p>
<h6 id="1-Download-and-install-Filebeat"><a href="#1-Download-and-install-Filebeat" class="headerlink" title="1.Download and install Filebeat"></a>1.Download and install Filebeat</h6><p>First time using Filebeat? See the <a href="https://www.elastic.co/guide/en/beats/filebeat/7.10/filebeat-installation-configuration.html">Quick Start</a>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.10.1-x86_64.rpm</span><br><span class="line">sudo rpm -vi filebeat-7.10.1-x86_64.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">由于访问国外网站速度受限，已经软件包上传到oss中供大家下载。</span></span><br><span class="line">https://geeksre.oss-cn-beijing.aliyuncs.com/download/filebeat-7.10.1-x86_64.rpm</span><br></pre></td></tr></table></figure>
<h6 id="2-Edit-the-configuration"><a href="#2-Edit-the-configuration" class="headerlink" title="2.Edit the configuration"></a>2.Edit the configuration</h6><p>Modify <code>/etc/filebeat/filebeat.yml</code> to set the connection information:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;&lt;es_url&gt;&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;&lt;password&gt;&quot;</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;&lt;kibana_url&gt;&quot;</span><br></pre></td></tr></table></figure>
<h6 id="3-Enable-and-configure-the-nginx-module"><a href="#3-Enable-and-configure-the-nginx-module" class="headerlink" title="3.Enable and configure the nginx module"></a>3.Enable and configure the nginx module</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo filebeat modules enable nginx</span><br></pre></td></tr></table></figure>
<p>Modify the settings in the <code>/etc/filebeat/modules.d/nginx.yml</code> file.</p>
<h6 id="4-Start-Filebeat"><a href="#4-Start-Filebeat" class="headerlink" title="4.Start Filebeat"></a>4.Start Filebeat</h6><p>The <code>setup</code> command loads the Kibana dashboards. If the dashboards are already set up, omit this command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo filebeat setup</span><br><span class="line">sudo service filebeat start</span><br></pre></td></tr></table></figure>
<h6 id="5-Module-status"><a href="#5-Module-status" class="headerlink" title="5.Module status"></a>5.Module status</h6><p>Check that data is received from the Filebeat <code>nginx</code> module</p>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p><img src="/elk/./kibana01.png" alt></p>
<p><img src="/elk/./kibana02.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Elasticsearch服务安全加固</title>
    <url>/es-safe/</url>
    <content><![CDATA[<p>Elasticsearch 是一个基于 Lucene 的搜索服务<br><span id="more"></span></p>
<blockquote>
<p>引用自阿里云<a href="https://help.aliyun.com/knowledge_detail/49913.html">https://help.aliyun.com/knowledge_detail/49913.html</a>&gt;</p>
</blockquote>
<p>Elasticsearch 是一个基于 Lucene 的搜索服务，它提供了 RESTful web 接口的分布式、多用户全文搜索引擎 。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是第二大最流行的企业搜索引擎。</p>
<p>Elasticsearch 应用于云计算中，具有实时搜索、稳定、可靠、快速、安装使用方便等优势；但也存在一些安全隐患：默认安装完成后，Elasticsearch 可以使用 9200 端口通告 web 的方式访问查看数据信息。</p>
<h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><p>Elasticsearch 中存在以下高危漏洞。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">CVE</th>
<th style="text-align:left">受影响版本</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">远程命令执行</td>
<td style="text-align:left">CVE-2014-3120</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Elasticsearch 的脚本执行 (scripting) 功能，可以很方便地对查询出来的数据进行再加工处理。但是，其使用的 MVEL 脚本引擎没有做过任何防护（或者沙盒包装），可以直接执行任意代码。</td>
</tr>
<tr>
<td style="text-align:left">远程代码执行</td>
<td style="text-align:left">-</td>
<td style="text-align:left">1.3.0-1.3.7，1.4.0-1.4</td>
<td style="text-align:left">Elasticsearch 使用 Groovy 作为脚本语言，虽然加入了沙盒进行控制，危险的代码会被拦截。但是由于沙盒限制不严格，仅通过黑白名单来判断，导致攻击者可以绕过沙盒，执行远程代码。</td>
</tr>
<tr>
<td style="text-align:left">未授权访问</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Elasticsearch 在安装了 River 机制之后可以同步多种数据库数据（包括关系型的MySQL、MongoDB 等）。如果 <code>http://localhost:9200/cat/indices</code>中 <code>indices</code> 包含了 <code>_river</code>，则代表 Elasticsearch 已安装 River 机制。而通过泄露的 <code>http://localhost:9200/_rvier/_search</code> URL 地址，攻击者可以获取到敏感信息。</td>
</tr>
</tbody>
</table>
<h3 id="漏洞成因与危害"><a href="#漏洞成因与危害" class="headerlink" title="漏洞成因与危害"></a>漏洞成因与危害</h3><p>由于 Elasticsearch 的 HTTP 连接没有提供任何的权限控制措施，一旦部署在公共网络就容易有数据泄露的风险。</p>
<h3 id="安全加固方案"><a href="#安全加固方案" class="headerlink" title="安全加固方案"></a>安全加固方案</h3><h4 id="使用最新的-Elasticsearch-版本"><a href="#使用最新的-Elasticsearch-版本" class="headerlink" title="使用最新的 Elasticsearch 版本"></a>使用最新的 Elasticsearch 版本</h4><p>通过正规渠道（如 <a href="https://www.elastic.co/downloads">Elastic 官网</a>）下载 Elasticsearch 的最新版本。</p>
<ul>
<li>下载完成后，将下载文件的 sha1 值和下载时官网页面提供的 sha1 值进行对比，避免下载过程中被恶意攻击者拦截破坏文件，甚至注入恶意代码。</li>
<li>不要随便安装第三方的插件，插件有可能引入安全漏洞甚至本身自带后门，需谨慎使用。</li>
<li>关注 Elastic 网站，及时更新 Elasticsearch 至最新版本。Elasticsearch 每次版本发布都会优化和改进一部分功能，尤其是安全漏洞的补丁。同时，仔细阅读 Elasticsearch 的版本更新记录。</li>
</ul>
<p><strong>注意</strong>：更新升级前，建议您先进行快照备份，及本地测试。</p>
<h4 id="（推荐）网络访问控制"><a href="#（推荐）网络访问控制" class="headerlink" title="（推荐）网络访问控制"></a>（推荐）网络访问控制</h4><p>Elasticsearch 默认端口是 9200。</p>
<ul>
<li>不要把 Elasticsearch 的 9200 端口服务发布到互联网上。</li>
<li>使用 <a href="https://help.aliyun.com/document_detail/25475.html">阿里云安全组防火墙</a> 或本地操作系统防火墙对访问源 IP 进行隔离控制。</li>
</ul>
<h4 id="绑定访问源-IP"><a href="#绑定访问源-IP" class="headerlink" title="绑定访问源 IP"></a>绑定访问源 IP</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">network.bind_host: 192.168.0.1</span><br><span class="line"># 设置绑定的 IP 地址，可以是 IPv4 或 IPv6 地址，默认为 0.0.0.0。</span><br><span class="line">network.publish_host: 192.168.0.1</span><br><span class="line"># 设置其它节点和该节点交互的 IP 地址，如果不设置它会自动判断，值必须是个真实的 IP 地址。</span><br><span class="line">network.host: 192.168.0.1</span><br><span class="line"># 同时设置上述两个参数：bind_host 和 publish_host。</span><br></pre></td></tr></table></figure>
<h4 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ransport.tcp.port: 9300</span><br><span class="line"># 设置节点间交互的 TCP 端口，默认是 9300。</span><br><span class="line">transport.tcp.compress: true</span><br><span class="line"># 设置是否压缩 TCP 传输时的数据，默认为 false，即不压缩。</span><br><span class="line">http.port: 9200</span><br><span class="line"># 设置对外服务的 HTTP 端口，默认为 9200。</span><br></pre></td></tr></table></figure>
<h4 id="关闭-HTTP-访问"><a href="#关闭-HTTP-访问" class="headerlink" title="关闭 HTTP 访问"></a>关闭 HTTP 访问</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.enabled: false</span><br><span class="line"># 是否使用 HTTP 协议对外提供服务，默认为 true，即开启。</span><br></pre></td></tr></table></figure>
<h4 id="使用-Shield-安全插件"><a href="#使用-Shield-安全插件" class="headerlink" title="使用 Shield 安全插件"></a>使用 Shield 安全插件</h4><p>Shield 是 Elastic 公司为 Elasticsearch 开发的一个安全插件。在安装此插件后，Shield 会拦截所有对 Elasticsearch 的请求，并进行认证与加密，保障 Elasticsearch 及相关系统的安全性。Shield 是商业插件，需要 Elasticsearch 的商业许可。第一次安装许可的时候，会提供 30 天的免费试用权限。30 天后，Shield 将会屏蔽 clusterhealth, cluster stats, index stats 等 API，其余功能不受影响。</p>
<h5 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h5><p>使用 Shield 可以定义一系列已知的用户，并用其认证用户请求。这些用户存在于抽象的“域”中。一个“域”可以是下面几种类型：</p>
<ul>
<li>LDAP 服务</li>
<li>ActiveDirectory 服务</li>
<li>本地 <code>esusers</code> 配置文件（类似 <code>/etc/passwd</code>)</li>
</ul>
<h5 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h5><p>Shield 的权限控制包含下面几种元素：</p>
<ul>
<li>被保护的资源 <strong>SecuredResource</strong>：权限所应用到的对象，比如某个 index，cluster 等。</li>
<li>特权 <strong>Priviliege</strong>：角色对对象可以执行的一种或多种操作，比如 read，write 等。还可以是 <code>indicies:/data/read/perlocate</code> 等对某种对象特有的操作。</li>
<li>许可 <strong>Permissions</strong>：对被保护的资源拥有的一个或多个特权，如 <code>read on the&quot;products&quot; index</code>。</li>
<li>角色 <strong>Role</strong>：一组许可的集成，具有独立的名称。</li>
<li>用户 <strong>Users</strong>：用户实体，可以被赋予多种角色，他们可以对被保护的资源执行相应角色所拥有的各种特权。</li>
</ul>
<h5 id="安装-Shield"><a href="#安装-Shield" class="headerlink" title="安装 Shield"></a>安装 Shield</h5><p>执行安装步骤前，请确保满足以下安装环境条件：</p>
<ul>
<li>您安装了 Java7 或更新版本。</li>
<li>您将 Elasticsearch 1.5.0+ 解压安装到了本机上。如果您使用 APT 或 YUM 安装，默认的安装目录可能在 <code>/usr/share/elasticsearch</code>。</li>
</ul>
<p>参照以下步骤完成安装：</p>
<ol>
<li><p>进入 Elasticsearch 安装目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Elasticsearch 许可插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/plugin -i elasticsearch/license/latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Shield 插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/plugin -i elasticsearch/shield/latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 Shield 配置文件移动或链接至 <code>/etc/elasticsearch/shield</code> 目录中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/share/elasticsearch/config/shield /etc/elasticsearch/shield</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：Elasticsearch 服务在启动时会在 <code>/etc/elasticsearch/shield</code> 目录下寻找 Shield 配置文件，而这些配置文件在安装 Shield 时会出现在 <code>/usr/share/elasticsearch/config/shield</code> 中，因此需要将配置文件移动或链接至该目录。</p>
</li>
<li><p>重启 Elasticsearch 服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service elasticsearch restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个 Elasticsearch 管理员账户，填写新密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/shield/esusersuseradd es_admin -r admin</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接使用 RESTFUL API 访问 Elasticsearch 的请求都会被拒绝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XGET&#x27;http://localhost:9200/&#x27;</span><br></pre></td></tr></table></figure>
<p>需要在请求中添加用户名和密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -u es_admin -XGET &#x27;http://localhost:9200/&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>更多信息，请参考：</p>
<ul>
<li><a href="https://www.elastic.co/downloads/shield">Shield 官方安装指南</a></li>
<li><a href="https://www.elastic.co/guide/en/shield/current/getting-started.html">Shield 官方使用配置指南</a></li>
</ul>
<h4 id="修改默认的-Elasticsearch-集群名称"><a href="#修改默认的-Elasticsearch-集群名称" class="headerlink" title="修改默认的 Elasticsearch 集群名称"></a>修改默认的 Elasticsearch 集群名称</h4><p>Elasticsearch 默认的集群名称是 elasticsearch，请在您的生产环境中将其修改成其他名称。确保在不同的环境和不同的集群下使用不同的名称；并且在监控集群节点时，如果有未知节点加入，一定要及时预警。</p>
<h4 id="不要以-root-身份运行-Elasticsearch"><a href="#不要以-root-身份运行-Elasticsearch" class="headerlink" title="不要以 root 身份运行 Elasticsearch"></a>不要以 root 身份运行 Elasticsearch</h4><p>不要以 root 身份来运行 Elasticsearch，不要和其他服务共用相同的用户，并把用户的权限最小化。</p>
<p>应用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u es-user ES_JAVA_OPTS=&quot;-Xms1024m -Xmx1024m&quot;/opt/elasticsearch/bin/elasticsearc</span><br></pre></td></tr></table></figure>
<h4 id="正确设置-Elasticsearch-的数据目录"><a href="#正确设置-Elasticsearch-的数据目录" class="headerlink" title="正确设置 Elasticsearch 的数据目录"></a>正确设置 Elasticsearch 的数据目录</h4><p>请确保为 Elasticsearch 的目录分配了合理的读写权限，避免使用共享文件系统。确保只有 Elasticsearch 的启动用户才有权访问目录。日志目录也需要正确配置，避免泄露敏感信息。</p>
<h4 id="定期对-Elasticsearch-进行备份"><a href="#定期对-Elasticsearch-进行备份" class="headerlink" title="定期对 Elasticsearch 进行备份"></a>定期对 Elasticsearch 进行备份</h4><p>使用 Elasticsearch 提供的备份还原机制，定期对 Elasticsearch 的数据进行快照备份。</p>
<h4 id="禁用批量删除索引"><a href="#禁用批量删除索引" class="headerlink" title="禁用批量删除索引"></a>禁用批量删除索引</h4><p>Elasticsearch 支持使用全部（<code>_all</code>）和通配符（<code>*</code>）来批量删除索引。在生产环境，该操作存在一定风险，你可以通过设置 <code>action.destructive_requires_name: true</code> 参数来禁用它。</p>
<h4 id="启用日志记录功能"><a href="#启用日志记录功能" class="headerlink" title="启用日志记录功能"></a>启用日志记录功能</h4><p>Elasticsearch 的 <code>config</code> 文件夹里面有两个配置文件：</p>
<ul>
<li><code>elasticsearch.yml</code>：基本配置文件。</li>
<li><code>logging.yml</code>：日志配置文件。由于 Elasticsearch 使用 log4j 来记录日志的，<code>logging.yml</code> 中的设置请按普通 log4j 配置文件进行设置。</li>
</ul>
<p>启用日志功能需要修改 <code>elasticsearch.yml</code> 配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path.logs: /path/to/logs# 设置日志文件的存储路径，默认是 Elasticsearch 根目录下的 logs 文件夹</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab旧版本安装</title>
    <url>/gitlab-oldversion-install/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>研发需要找老代码，找到备份文件后恢复时报错版本过低</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol>
<li><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><h5 id="https-packages-gitlab-com-gitlab-gitlab-ce"><a href="#https-packages-gitlab-com-gitlab-gitlab-ce" class="headerlink" title="https://packages.gitlab.com/gitlab/gitlab-ce"></a><a href="https://packages.gitlab.com/gitlab/gitlab-ce">https://packages.gitlab.com/gitlab/gitlab-ce</a></h5><h5 id="找到对应的版本，下载到服务器"><a href="#找到对应的版本，下载到服务器" class="headerlink" title="找到对应的版本，下载到服务器"></a>找到对应的版本，下载到服务器</h5></li>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh gitlab-ce-8.6.6-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1561606164</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>代码迁移-更改Git远程仓库-从gitlab上迁移到coding</title>
    <url>/gitlab-remove-to-coding/</url>
    <content><![CDATA[<h5 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@git.test.com:test/test.git</span><br></pre></td></tr></table></figure>
<h5 id="进入项目"><a href="#进入项目" class="headerlink" title="进入项目"></a>进入项目</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd test</span><br></pre></td></tr></table></figure>
<h5 id="删除-git文件"><a href="#删除-git文件" class="headerlink" title="删除.git文件"></a>删除.git文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h5 id="绑定远程仓库"><a href="#绑定远程仓库" class="headerlink" title="绑定远程仓库"></a>绑定远程仓库</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@git.coding.net:xxx/test.git </span><br></pre></td></tr></table></figure>
<h5 id="更新到远端"><a href="#更新到远端" class="headerlink" title="更新到远端"></a>更新到远端</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab-管理员密码重置</title>
    <url>/gitlab-reset-admin-password/</url>
    <content><![CDATA[<p>官方文档地址：<a href="https://docs.gitlab.com/ce/security/reset_root_password.html">https://docs.gitlab.com/ce/security/reset_root_password.html</a></p>
<p>操作如下：</p>
<ol>
<li><pre><code>gitlab-rails console production
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
user = User.where(id: 1).first
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
user.password = &apos;secret_pass&apos;
user.password_confirmation = &apos;secret_pass&apos;
例如：

user.password = 123456789
user.password_confirmation = 123456789
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
user.save!
</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab代码托管</title>
    <url>/gitlab/</url>
    <content><![CDATA[<p>GitLab 是一个用于仓库管理系统的开源项目，使用<a href="https://baike.baidu.com/item/Git">Git</a>作为代码管理工具，并在此基础上搭建起来的web服务。<br><span id="more"></span><br>官网：<a href="https://about.gitlab.com/stages-devops-lifecycle/">https://about.gitlab.com/stages-devops-lifecycle/</a></p>
<hr>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="配置Yum源"><a href="#配置Yum源" class="headerlink" title="配置Yum源"></a>配置Yum源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab_gitlab-ee.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y postfix</span><br><span class="line">yum install gitlab-ce -y</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置文件：/etc/gitlab/gitlab.rb    (建议每次修改前备份此文件)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">	external_url &#x27;https://git.visualchina.com&#x27;    # 域名配置</span><br><span class="line">	gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;   # 时区</span><br><span class="line">	</span><br><span class="line">	nginx[&#x27;redirect_http_to_https&#x27;] = true        # SSL证书</span><br><span class="line">	nginx[&#x27;ssl_certificate&#x27;] = &quot;/data/vcg/ssl/visualchina.pem&quot;</span><br><span class="line">	nginx[&#x27;ssl_certificate_key&#x27;] = &quot;/data/vcg/ssl/visualchina.key&quot;</span><br><span class="line">	</span><br><span class="line">	gitlab_rails[&#x27;ldap_enabled&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;ldap_servers&#x27;] = YAML.load &lt;&lt;-&#x27;EOS&#x27; # remember to close this block with &#x27;EOS&#x27; below</span><br><span class="line">  main: # &#x27;main&#x27; is the GitLab &#x27;provider ID&#x27; of this LDAP server</span><br><span class="line">    label: &#x27;LDAP&#x27;</span><br><span class="line">    host: &#x27;172.16.239.3&#x27;</span><br><span class="line">    port: 389</span><br><span class="line">    uid: &#x27;cn&#x27;</span><br><span class="line">    method: &#x27;plain&#x27; # &quot;tls&quot; or &quot;ssl&quot; or &quot;plain&quot;</span><br><span class="line">    bind_dn: &#x27;cn=root,dc=vcg,dc=com&#x27;</span><br><span class="line">    password: &#x27;vcg@2018&#x27;</span><br><span class="line">    active_directory: true</span><br><span class="line">    allow_username_or_email_login: false</span><br><span class="line">    block_auto_created_users: false</span><br><span class="line">    base: &#x27;ou=People,dc=vcg,dc=com&#x27;</span><br><span class="line">    user_filter: &#x27;&#x27;</span><br><span class="line">    attributes:</span><br><span class="line">      username: [&#x27;cn&#x27;]</span><br><span class="line">      email:    [&#x27;mail&#x27;]</span><br><span class="line">      name:       &#x27;cn&#x27;</span><br><span class="line">      first_name: &#x27;givenName&#x27;</span><br><span class="line">      last_name:  &#x27;sn&#x27;</span><br><span class="line">EOS</span><br></pre></td></tr></table></figure>
<h5 id="配置完成后进行配置更新"><a href="#配置完成后进行配置更新" class="headerlink" title="配置完成后进行配置更新"></a>配置完成后进行配置更新</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<h5 id="检查是否配置成功"><a href="#检查是否配置成功" class="headerlink" title="检查是否配置成功"></a>检查是否配置成功</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:ldap:check（列出前100个用户）</span><br></pre></td></tr></table></figure>
<h5 id="重启gitlab服务"><a href="#重启gitlab服务" class="headerlink" title="重启gitlab服务"></a>重启gitlab服务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<h5 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h5><p>访问ip:80端口 配置root密码，至此部署完成。</p>
<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><h5 id="升级规范和建议"><a href="#升级规范和建议" class="headerlink" title="升级规范和建议"></a>升级规范和建议</h5><p><a href="https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations">https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations</a></p>
<p>首先升级到主要版本中的最新可用次要版本</p>
<p>例如：8.13.4 升级到 11.3.4 ，升级路径为 8.13.4 -&gt; 8.17.7 -&gt; 9.5.10 -&gt; 10.8.7 -&gt; 11.3.4</p>
<p>​    即：<code>8.17.7</code>是版本<code>8</code>中的最后一个版本, <code>9.5.10</code>是版本<code>9</code>中的最后一个版本, <code>10.8.7</code>是版本<code>10</code>中的最后一个版本</p>
<h5 id="升级操作"><a href="#升级操作" class="headerlink" title="升级操作"></a>升级操作</h5><p>本次升级版本为 10.7.0 ，升级到最新版本 11.9.8 ，注：2019年04月16日</p>
<h6 id="1、下载10-8-7版本的rpm包"><a href="#1、下载10-8-7版本的rpm包" class="headerlink" title="1、下载10.8.7版本的rpm包"></a>1、下载10.8.7版本的rpm包</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h6 id="2、安装升级到10-8-7版本"><a href="#2、安装升级到10-8-7版本" class="headerlink" title="2、安装升级到10.8.7版本"></a>2、安装升级到10.8.7版本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h6 id="3、再升级到11-9-8版本"><a href="#3、再升级到11-9-8版本" class="headerlink" title="3、再升级到11.9.8版本"></a>3、再升级到11.9.8版本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce.x86_64</span><br></pre></td></tr></table></figure>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><h5 id="备份源GitLab数据"><a href="#备份源GitLab数据" class="headerlink" title="备份源GitLab数据"></a>备份源GitLab数据</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Creating backup archive: 1555983152_2019_04_23_11.9.8_gitlab_backup.tar ...</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据保存在 /var/opt/gitlab/backups，自动生成文件名，比如本次的 1555983152_2019_04_23_11.9.8_gitlab_backup.tar</span></span><br></pre></td></tr></table></figure>
<h5 id="SCP迁移数据"><a href="#SCP迁移数据" class="headerlink" title="SCP迁移数据"></a>SCP迁移数据</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">按需替换目标地址</span></span><br><span class="line">scp /var/opt/gitlab/backups/1555983152_2019_04_23_11.9.8_gitlab_backup.tar root@1.1.1.1:/root/var/opt/gitlab/backups</span><br></pre></td></tr></table></figure>
<h5 id="安装GitLab"><a href="#安装GitLab" class="headerlink" title="安装GitLab"></a>安装GitLab</h5><p>请参考 安装 章节</p>
<h5 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1555983152_2019_04_23_11.9.8</span><br><span class="line"><span class="meta">#</span><span class="bash"> BACKUP的时间点必须与原服务器备份后的文件名一致</span></span><br></pre></td></tr></table></figure>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><h5 id="定期备份"><a href="#定期备份" class="headerlink" title="定期备份"></a>定期备份</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line">0 14 * * * /usr/bin/gitlab-rake gitlab:backup:create</span><br><span class="line">0 15 * * * find /var/opt/gitlab/backups/* -type f -mtime +3 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h5 id="gitlab-ctl命令"><a href="#gitlab-ctl命令" class="headerlink" title="gitlab-ctl命令"></a>gitlab-ctl命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZ2ze4cng635a2k047qus5Z ~]# gitlab-ctl --help</span><br><span class="line">omnibus-ctl: command (subcommand)</span><br><span class="line">check-config</span><br><span class="line">  Check if there are any configuration in gitlab.rb that is removed in specified version</span><br><span class="line">deploy-page</span><br><span class="line">  Put up the deploy page</span><br><span class="line">diff-config</span><br><span class="line">  Compare the user configuration with package available configuration</span><br><span class="line">prometheus-upgrade</span><br><span class="line">  Upgrade the Prometheus data to the latest supported version</span><br><span class="line">remove-accounts</span><br><span class="line">  Delete *all* users and groups used by this package</span><br><span class="line">upgrade</span><br><span class="line">  Run migrations after a package upgrade</span><br><span class="line">General Commands:</span><br><span class="line">  cleanse</span><br><span class="line">    Delete *all* gitlab data, and start from scratch.</span><br><span class="line">  help</span><br><span class="line">    Print this help message.</span><br><span class="line">  reconfigure</span><br><span class="line">    Reconfigure the application.</span><br><span class="line">  show-config</span><br><span class="line">    Show the configuration that would be generated by reconfigure.</span><br><span class="line">  uninstall</span><br><span class="line">    Kill all processes and uninstall the process supervisor (data will be preserved).</span><br><span class="line">Service Management Commands:</span><br><span class="line">  graceful-kill</span><br><span class="line">    Attempt a graceful stop, then SIGKILL the entire process group.</span><br><span class="line">  hup</span><br><span class="line">    Send the services a HUP.</span><br><span class="line">  int</span><br><span class="line">    Send the services an INT.</span><br><span class="line">  kill</span><br><span class="line">    Send the services a KILL.</span><br><span class="line">  once</span><br><span class="line">    Start the services if they are down. Do not restart them if they stop.</span><br><span class="line">  restart</span><br><span class="line">    Stop the services if they are running, then start them again.</span><br><span class="line">  service-list</span><br><span class="line">    List all the services (enabled services appear with a *.)</span><br><span class="line">  start</span><br><span class="line">    Start services if they are down, and restart them if they stop.</span><br><span class="line">  status</span><br><span class="line">    Show the status of all the services.</span><br><span class="line">  stop</span><br><span class="line">    Stop the services, and do not restart them.</span><br><span class="line">  tail</span><br><span class="line">    Watch the service logs of all enabled services.</span><br><span class="line">  term</span><br><span class="line">    Send the services a TERM.</span><br><span class="line">  usr1</span><br><span class="line">    Send the services a USR1.</span><br><span class="line">  usr2</span><br><span class="line">    Send the services a USR2.</span><br><span class="line">Container Registry Commands:</span><br><span class="line">  registry-garbage-collect</span><br><span class="line">    Run Container Registry garbage collection.</span><br><span class="line">Database Commands:</span><br><span class="line">  pg-password-md5</span><br><span class="line">    Generate MD5 Hash of user password in PostgreSQL format</span><br><span class="line">  pg-upgrade</span><br><span class="line">    Upgrade the PostgreSQL DB to the latest supported version</span><br><span class="line">  revert-pg-upgrade</span><br><span class="line">    Run this to revert to the previous version of the database</span><br><span class="line">  set-replication-password</span><br><span class="line">    Set database replication password</span><br><span class="line">Let&#x27;s Encrypt Commands:</span><br><span class="line">  renew-le-certs</span><br><span class="line">    Renew the existing Let&#x27;s Encrypt certificates</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!<br><span id="more"></span><br>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Helm-简化应用部署</title>
    <url>/helm/</url>
    <content><![CDATA[<p>参考链接</p>
<p><a href="https://help.aliyun.com/document_detail/86511.html">https://help.aliyun.com/document_detail/86511.html</a></p>
<p>在 Kubernetes 中，应用管理是需求最多、挑战最大的领域。Helm 项目提供了一个统一软件打包方式，支持版本控制，可以大大简化 Kubernetes 应用分发与部署中的复杂性。</p>
<p>阿里云容器服务在应用目录管理功能中集成了 Helm 工具，并进行了功能扩展，支持官方 Repository，让您快速部署应用。您可以通过命令行或容器服务控制台界面两种方式进行部署。</p>
<h4 id="Helm-基本概念"><a href="#Helm-基本概念" class="headerlink" title="Helm 基本概念"></a>Helm 基本概念</h4><p>Helm 是由 <a href="https://helm.sh/docs/">Deis</a> 发起的一个开源工具，有助于简化部署和管理 Kubernetes 应用。</p>
<p>Helm 可以理解为 Kubernetes 的包管理工具，可以方便地发现、共享和使用为 Kubernetes 构建的应用，它包含几个基本概念</p>
<ul>
<li><strong>Chart</strong>：一个 Helm 包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含 Kubernetes 集群中的服务定义，类似 Homebrew 中的 formula、APT 的 dpkg 或者 Yum 的 rpm 文件。</li>
<li><strong>Release</strong>：在 Kubernetes 集群上运行的 Chart 的一个实例。在同一个集群上，一个 Chart 可以安装很多次。每次安装都会创建一个新的 release。例如一个 MySQL Chart，如果想在服务器上运行两个数据库，就可以把这个 Chart 安装两次。每次安装都会生成自己的 Release，会有自己的 Release 名称。</li>
<li><strong>Repository</strong>：用于发布和存储 Chart 的存储库。</li>
</ul>
<h4 id="Helm-组件"><a href="#Helm-组件" class="headerlink" title="Helm 组件"></a>Helm 组件</h4><p>Helm 采用客户端/服务器架构，由如下组件组成：</p>
<ul>
<li>Helm CLI 是 Helm 客户端，可以在 Kubernetes 集群的 master 节点或者本地执行。</li>
<li>Tiller 是服务器端组件，在 Kubernetes 集群上运行，并管理 Kubernetes 应用程序的生命周期。</li>
<li>Repository 是 Chart 存储库，Helm 客户端通过 HTTP 协议来访问存储库中 Chart 的索引文件和压缩包。</li>
</ul>
<h4 id="安装配置-Helm-CLI"><a href="#安装配置-Helm-CLI" class="headerlink" title="安装配置 Helm CLI"></a>安装配置 Helm CLI</h4><ol>
<li><p>安装和配置kubectl</p>
</li>
<li><p>安装heml</p>
<p><a href="https://github.com/helm/helm/releases">https://github.com/helm/helm/releases</a></p>
<p>安装方法，参见 <a href="https://github.com/kubernetes/helm/blob/master/docs/install.md?spm=a2c4g.11186623.2.27.44516a3fjdfubX&amp;file=install.md">Install Helm</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、获取安装包</span></span><br><span class="line">wget https://get.helm.sh/helm-v2.14.2-linux-amd64.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、解压</span></span><br><span class="line">tar zxf helm-v2.14.2-linux-amd64.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、Find the helm binary <span class="keyword">in</span> the unpacked directory, and move it to its desired destination</span></span><br><span class="line">mv linux-amd64/helm /usr/local/bin/helm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、验证</span></span><br><span class="line">helm help</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Helm 的 Repository。这里我们使用了阿里云容器服务提供的 Charts 存储库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm init --client-only --stable-repo-url https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/</span><br><span class="line">helm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Helm基础操作"><a href="#Helm基础操作" class="headerlink" title="Helm基础操作"></a>Helm基础操作</h4><ul>
<li><p>若要查看在集群上安装的 Charts 列表，请键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm list</span><br></pre></td></tr></table></figure>
<p>或者缩写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要查看存储库配置，请键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm repo list</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要查看或搜索存储库中的 Helm charts，请键入以下任一命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm search </span><br><span class="line">helm search 存储库名称 #如 stable 或 incubator</span><br><span class="line">helm search chart名称 #如 wordpress 或 spark</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要更新 charts 列表以获取最新版本，请键入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm delete --purge &quot;myspark&quot;</span><br></pre></td></tr></table></figure>
<p>有关 Helm 使用的详细信息，请参阅 <a href="https://github.com/kubernetes/helm">Helm项目</a>。</p>
</li>
</ul>
<h4 id="使用第三方的-Chart-存储库"><a href="#使用第三方的-Chart-存储库" class="headerlink" title="使用第三方的 Chart 存储库"></a>使用第三方的 Chart 存储库</h4><p>您除了可以使用预置的阿里云的 Chart 存储库，也可以使用第三方的 Chart 存储库（前提是网络是可达的）。使用如下命令格式添加第三方 Chart 存储库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm repo add 存储库名 存储库URL</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
<p>关于 Helm 相关命令的说明，您可以参阅 <a href="https://docs.helm.sh/helm/#helm-repo-add">Helm 文档</a></p>
<h4 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h4><p>Helm 催生了社区的发展壮大，越来越多的软件提供商，如 Bitnami 等公司，开始提供高质量的 Charts。您可以在 <code>https://kubeapps.com/</code> 中寻找和发现已有的 Charts。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo-博客中添加图片等资源</title>
    <url>/hexo-add-images/</url>
    <content><![CDATA[<p>一图胜万言</p>
<p>博客中有时候图片比文字更有说服力，比如：代码运行结果，代码运行效果等<br><span id="more"></span></p>
<blockquote>
<p>引用于 <a href="https://blog.csdn.net/qq_40265501/article/details/80019774">https://blog.csdn.net/qq_40265501/article/details/80019774</a></p>
<p>官方介绍：<a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p>
</blockquote>
<h5 id="开启’资源文件管理’功能"><a href="#开启’资源文件管理’功能" class="headerlink" title="开启’资源文件管理’功能"></a>开启’资源文件管理’功能</h5><p>将 <code>config.yml</code>文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
<h5 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h5><p>插件地址：<a href="https://github.com/dangxuandev/hexo-asset-image">https://github.com/dangxuandev/hexo-asset-image</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="在博客中添加图片"><a href="#在博客中添加图片" class="headerlink" title="在博客中添加图片"></a>在博客中添加图片</h5><ol>
<li><p>新建博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n test</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@nginx GeekSRE]# ls -l source/_posts/ |grep test</span><br><span class="line">drwxr-xr-x 2 root root 4096 4月  17 17:29 test</span><br><span class="line">-rw-r--r-- 1 root root   96 4月  17 17:35 test.md</span><br></pre></td></tr></table></figure>
<p>可以看到 会在 source/_posts 目录创建 test.md 和 test目录</p>
<p>与博客同名目录用于存放资源文件，如图片、CSS、JS 文件等</p>
</li>
<li><p>上传图片到”文章资源文件夹”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 比如使用CSDN博客中的图片：</span></span><br><span class="line">cd source/_posts/test</span><br><span class="line">wget https://img-blog.csdn.net/20180420154609543</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>引用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim source/_posts/test.md</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ![你想要输入的替代文字](图片文件)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如：</span></span><br><span class="line">![图片](test.jpg)</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证效果<br><img src="/hexo-add-images/test.jpg" alt="图片"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客美化添加live2d动画</title>
    <url>/hexo-live2d/</url>
    <content><![CDATA[<span id="more"></span>
<p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md"><strong>hexo-helper-live2d GitHub地址</strong></a></p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><ol>
<li><p>在hexo根目录执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择动画模型</p>
<p><a href="https://huaji8.top/post/live2d-plugin-2.0/">模型地址</a></p>
<ul>
<li>live2d-widget-model-chitose</li>
<li>live2d-widget-model-epsilon2_1</li>
<li>live2d-widget-model-gf</li>
<li>live2d-widget-model-haru</li>
<li>live2d-widget-model-haruto</li>
<li>live2d-widget-model-hibiki</li>
<li>live2d-widget-model-hijiki</li>
<li>live2d-widget-model-izumi</li>
<li>live2d-widget-model-koharu</li>
<li>live2d-widget-model-miku</li>
<li>live2d-widget-model-ni-j</li>
<li>live2d-widget-model-nico</li>
<li>live2d-widget-model-nietzsche</li>
<li>live2d-widget-model-nipsilon</li>
<li>live2d-widget-model-nito</li>
<li>live2d-widget-model-shizuku</li>
<li>live2d-widget-model-tororo</li>
<li>live2d-widget-model-tsumiki</li>
<li>live2d-widget-model-unitychan</li>
<li>live2d-widget-model-wanko</li>
<li>live2d-widget-model-z16</li>
</ul>
</li>
<li><p>本次选择安装live2d-widget-model-haruto</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-haruto</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="拷贝资源"><a href="#拷贝资源" class="headerlink" title="拷贝资源"></a>拷贝资源</h5><ol>
<li><p>在hexo根目录live2d_models</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p live2d_models</span><br></pre></td></tr></table></figure>
</li>
<li><p>cp模型文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r node_modules/live2d-widget-model-haruto/ live2d_models/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="编辑主配置"><a href="#编辑主配置" class="headerlink" title="编辑主配置"></a>编辑主配置</h5><p>编辑_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-haruto</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>
<h5 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>我部署到GitHub上的域名正常，服务器上的没生效，重启进程后生效。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next主题添加搜索功能</title>
    <url>/hexo-next-add-search/</url>
    <content><![CDATA[<p>Hexo使用小技巧<br><span id="more"></span></p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>博客根目录执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h5 id="修改主配置"><a href="#修改主配置" class="headerlink" title="修改主配置"></a>修改主配置</h5><p>编辑配置文件：_config.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<h5 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h5><p>编辑 themes/next/_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<h5 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题增加动态背景并设置透明化</title>
    <url>/hexo-next-config/</url>
    <content><![CDATA[<h5 id="编辑主题配置"><a href="#编辑主题配置" class="headerlink" title="编辑主题配置"></a>编辑主题配置</h5><p>编辑 themes/next/_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#canvas_nest: false</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &#x27;0,0,255&#x27; # RGB values, use &#x27;,&#x27; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # the number of lines</span><br></pre></td></tr></table></figure>
<h5 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/hexo/</url>
    <content><![CDATA[<p>快速、简洁且高效的博客框架<br><span id="more"></span><br>官网: <a href="https://hexo.io/zh-cn/">https://hexo.io</a></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>
<h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p>
<h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>
<h3 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h3><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h3><p>hexo支持指令缩写，例如：hexo generate和hexo g是等效的。<br>d = deploy 部署<br>g = generate 生成静态页面<br>l = log 启动日记记录，使用覆盖记录格式<br>n = new 新建文章<br>o = output 设置输出路径<br>p = port 重设端口<br>s = server 启动服务器<br>w = watch 监视文件变动</p>
<h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<h3 id="修改首页博客为预览模式"><a href="#修改首页博客为预览模式" class="headerlink" title="修改首页博客为预览模式"></a>修改首页博客为预览模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim themes/next/_config.yml</span><br><span class="line"></span><br><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span> </span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>将 auto_excerpt的enable参数由false改为true</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Java微服务容器化维护工作</title>
    <url>/java-docker-ops/</url>
    <content><![CDATA[<p>维护经验分享<br><span id="more"></span></p>
<h4 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h4><hr>
<p>容器架构由Swarm迁移到Kubernetes</p>
<p>Swarm集群中服务发现、服务注册使用Consul，迁移到K8s后注册发现是的K8s的kube-dns基础组件实现。</p>
<p>utilservice-vcg-com这个微服务部署在两台ecs上，java -jar 启动后  手动注册到consul中，这样实现Swarm集群中的应用可以通过Consul访问util服务。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><hr>
<p>与相关研发沟通，确定utilservice程序一些基础信息：比如</p>
<p>​    需要哪些基础组件，在ecs上部署遇到什么问题，如何处理的</p>
<p>​    git仓库地址、服务启动命令、服务端口、是否连接数据库、服务调用关系。</p>
<p>确定使用jdk环境，需要使用到 wkhtmltopdf 这个命令，用于生成pdf；</p>
<p>生成的pdf过程会有 字体和语言的问题，需提前处理。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><hr>
<h5 id="确定基础镜像"><a href="#确定基础镜像" class="headerlink" title="确定基础镜像"></a>确定基础镜像</h5><p>访问<a href="https://hub.docker.com/">https://hub.docker.com</a>，搜索 wkhtmltopdf 关键词</p>
<p><img src="/java-docker-ops/1.png" alt="1"></p>
<p>确定基础镜像使用 buildo/java8-wkhtmltopdf 。</p>
<h6 id="Dockerfile-第一版"><a href="#Dockerfile-第一版" class="headerlink" title="Dockerfile (第一版)"></a>Dockerfile (第一版)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br></pre></td></tr></table></figure>
<h5 id="下载JCE"><a href="#下载JCE" class="headerlink" title="下载JCE"></a>下载JCE</h5><p>需要使用到JCE，在oracle官网下载。</p>
<p>JDK7的下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a><br>JDK8的下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>
<p>Java Cryptography Extension (JCE) 无限强度权限策略文件 8 下载</p>
<h6 id="Dockerfile-第二版"><a href="#Dockerfile-第二版" class="headerlink" title="Dockerfile (第二版)"></a>Dockerfile (第二版)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br></pre></td></tr></table></figure>
<h5 id="处理程序报错"><a href="#处理程序报错" class="headerlink" title="处理程序报错"></a>处理程序报错</h5><h6 id="1、找到不到-iSignature-pfx-证书："><a href="#1、找到不到-iSignature-pfx-证书：" class="headerlink" title="1、找到不到 iSignature.pfx 证书："></a>1、找到不到 iSignature.pfx 证书：</h6><p>报错截图：</p>
<h5 id><a href="#" class="headerlink" title></a><img src="/java-docker-ops/2.png" alt="2"></h5><p>可以看到找不到/media/providerstamp/signature/iSignature.pfx 证书文件，简单，从老服务器上找到对应文件，拷贝过来。</p>
<h6 id="Dockerfile-第三版"><a href="#Dockerfile-第三版" class="headerlink" title="Dockerfile (第三版)"></a>Dockerfile (第三版)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/signature/  &amp;&amp; \</span><br><span class="line">        cp iSignature.pfx /media/providerstamp/signature/ &amp;&amp; \</span><br></pre></td></tr></table></figure>
<h6 id="2、tmpDic不是文件夹"><a href="#2、tmpDic不是文件夹" class="headerlink" title="2、tmpDic不是文件夹"></a>2、tmpDic不是文件夹</h6><p><img src="/java-docker-ops/3.png" alt="3"></p>
<p>研发查看代码后确定是要使用 /media/providerstamp/temp/ 目录，索性登录老服务器上查看/media/providerstamp下所有目录，都创建好，并将需要的文件scp拷贝过来。</p>
<p><img src="/java-docker-ops/4.png" alt="4"></p>
<p>看到还有 done 、unitrust目录，并且unitrust目录中的unitrust.key 程序也会用到。</p>
<h6 id="Dockerfile-第四版"><a href="#Dockerfile-第四版" class="headerlink" title="Dockerfile (第四版)"></a>Dockerfile (第四版)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/signature/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/done/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/unitrust/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/temp/  &amp;&amp; \</span><br><span class="line">        cp unitrust.key /media/providerstamp/unitrust &amp;&amp; \</span><br><span class="line">        cp iSignature.pfx /media/providerstamp/signature/ &amp;&amp; \</span><br></pre></td></tr></table></figure>
<h6 id="3、pdf内容乱码"><a href="#3、pdf内容乱码" class="headerlink" title="3、pdf内容乱码"></a>3、pdf内容乱码</h6><p>乱码是由于字体问题，简单直接，直接从老服务器上拷贝 /usr/share/fonts 目录。</p>
<h6 id="Dockerfile-第五版"><a href="#Dockerfile-第五版" class="headerlink" title="Dockerfile (第五版)"></a>Dockerfile (第五版)</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/signature/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/done/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/unitrust/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/temp/  &amp;&amp; \</span><br><span class="line">        cp unitrust.key /media/providerstamp/unitrust &amp;&amp; \</span><br><span class="line">        cp iSignature.pfx /media/providerstamp/signature/ &amp;&amp; \</span><br><span class="line">        rm -f /usr/local/bin/wkhtmltopdf &amp;&amp; \</span><br><span class="line">        rm -rf /usr/share/fonts &amp;&amp; \</span><br><span class="line">        cp wkhtmltopdf /usr/local/bin/ &amp;&amp; \</span><br><span class="line">        tar zxf fonts.tar.gz &amp;&amp; \</span><br><span class="line">        mv fonts/ /usr/share/</span><br></pre></td></tr></table></figure>
<p>至此，此微服务容器化已完成。👏👏👏</p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-创建freestyle风格项目</title>
    <url>/jenkins-freestyle/</url>
    <content><![CDATA[<p>Jenkins-创建freestyle风格项目</p>
<h4 id="创建第一个Job"><a href="#创建第一个Job" class="headerlink" title="创建第一个Job"></a>创建第一个Job</h4><ol>
<li><p>新建Item</p>
<p><img src="/jenkins-freestyle/./jenkins1.jpg" alt></p>
</li>
<li><p>输入名称、选择Job类型</p>
<p><img src="/jenkins-freestyle/./jenkins2.jpg" alt></p>
</li>
<li><p>配置Job，</p>
<p>共六部分：<code>通用</code>、<code>源码管理</code>、<code>构建触发器</code>、<code>构建环境</code>、<code>构建</code>、<code>构建后操作</code></p>
</li>
</ol>
<p>   常用操作：</p>
<p>   通用：配置参数话构建</p>
<p>   源码管理：配置代码仓库地址（git或svn）</p>
<p>   构建触发器：配置GitLab的webhook自动触发</p>
<p>   构建环境：Delete workspace before build starts</p>
<p>   <strong>构建</strong>：shell脚本或者bat脚本执行任务</p>
<p>   构建后操作：邮件通知</p>
<ol start="4">
<li><p>参数化构建</p>
<p><img src="/jenkins-freestyle/./jenkins3.jpg" alt></p>
</li>
<li><p>Git地址</p>
<p><img src="/jenkins-freestyle/./jenkins4.jpg" alt></p>
</li>
<li><p>触发器</p>
<p><img src="/jenkins-freestyle/./jenkins5.jpg" alt></p>
</li>
<li><p>构建-shell脚本</p>
<p><img src="/jenkins-freestyle/./jenkins6.jpg" alt></p>
</li>
<li><p>保存退出</p>
<p><img src="/jenkins-freestyle/./jenkins6-1.jpg" alt></p>
</li>
<li><p>构建</p>
<p><img src="/jenkins-freestyle/./jenkins7.jpg" alt></p>
</li>
<li><p>查看构建状态</p>
<p><img src="/jenkins-freestyle/./jenkins8.jpg" alt></p>
</li>
<li><p>查看构建日志</p>
<p><img src="/jenkins-freestyle/./jenkins9.jpg" alt></p>
</li>
</ol>
<h4 id="实战分享"><a href="#实战分享" class="headerlink" title="实战分享"></a>实战分享</h4><h5 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h5><ol>
<li>项目名称为vdam-web-vip</li>
<li>此job会根据环境不同确定git分支</li>
<li>git clone后编译安装nodejs模块</li>
<li>构建docker镜像，push到镜像仓库</li>
<li>触发应用更新</li>
</ol>
<h5 id="部署："><a href="#部署：" class="headerlink" title="部署："></a>部署：</h5><ol>
<li><p>创建自由风格项目</p>
</li>
<li><p>名称输入vdam-web-vip</p>
</li>
<li><p>开启参数化构建</p>
<p><img src="/jenkins-freestyle/./jenkins12.jpg" alt></p>
</li>
<li><p>配置<code>构建</code>shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -e</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 确定 default.conf 和 nginx.conf文件存在</span></span></span><br><span class="line"></span><br><span class="line">Time=`date +%Y%m%d%H%M%S`</span><br><span class="line">WorkDir=`pwd`</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">  Branch=&quot;release&quot;</span><br><span class="line">  ScopeName=&quot;test&quot;</span><br><span class="line">  JavaServiceDomain=&quot;test-vdam-gateway-service.fotomore.com&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">  Branch=&quot;master&quot;</span><br><span class="line">  ScopeName=&quot;pre&quot;</span><br><span class="line">  JavaServiceDomain=&quot;vdam-gateway-service1.fotomore.com&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">  Branch=&quot;master&quot;</span><br><span class="line">  ScopeName=&quot;pro&quot;</span><br><span class="line">  JavaServiceDomain=&quot;vdam-gateway-service.fotomore.com&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">rm -rf vdam-web</span><br><span class="line">mkdir -p vdam-web</span><br><span class="line">cd vdam-web</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.vcg.com:vdam/vue-vip-2019.git</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.vcg.com:vdam/vue-admin.git</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.vcg.com:vdam/vue-saas.git</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.visualchina.com:vdam/vue-vip-upload.git</span><br><span class="line"></span><br><span class="line">cd vue-vip-upload</span><br><span class="line">sed -i &quot;s/vdam-gateway.vcg.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line">sed -i &quot;s/vdam-gateway.fotomore.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist upload</span><br><span class="line"></span><br><span class="line">cd vue-vip-2019</span><br><span class="line">sed -i &quot;s/vdam-gateway.vcg.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line">sed -i &quot;s/vdam-gateway.fotomore.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g&quot; setBaseUrl.ts</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist vip</span><br><span class="line"></span><br><span class="line">cd vue-admin</span><br><span class="line">sed -i &quot;s/vdam-gateway.vcg.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway.fotomore.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist admin</span><br><span class="line"></span><br><span class="line">cd vue-saas</span><br><span class="line">sed -i &quot;s/test-vdam.gateway.vcg.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway.vcg.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway.fotomore.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line">sed -i &quot;s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g&quot; src/config/index.js</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist saas</span><br><span class="line"></span><br><span class="line">rm -rf vue-vip</span><br><span class="line">rm -rf vue-admin</span><br><span class="line">rm -rf vue-saas</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">tar zcf vdam-web-vip.tar.gz vdam-web/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp vdam-web-vip.tar.gz /jenkins/vcgapp/vdam-web-vip/vdam-web-vip.tar.gz-<span class="variable">$&#123;Time&#125;</span></span></span><br><span class="line"></span><br><span class="line">cat &gt; Dockerfile &lt;&lt;EOF</span><br><span class="line">FROM nginx</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">ADD vdam-web-vip.tar.gz /usr/share/nginx/html/</span><br><span class="line">ADD nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">ADD default.conf /etc/nginx/conf.d/</span><br><span class="line">RUN chmod -R 777 /usr/share/nginx/html/</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125; .</span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;-$Time .</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;-$Time</span><br><span class="line">docker rmi -f registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;</span><br><span class="line">docker rmi -f registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;-$Time</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">  curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjYWY3OWNjYjYyNGYyNGE1Y2FiZDFkZTg2MjNiMmU2MTciLCJpZCI6IjM5NTI2In0.S9KkUgPkymqsc1xclUHFo9zFyd_iLMrKxxEbsPB06lajpw_YSm7aOXAonq_olgP0SxmL6ydiDE5Bu3LuAXjhMCkojXQx4FlnH8uoaBOr2fT9e_RL-4LCGSQLDvoOFqQQ1csBfPi2UpT6oDh_KkxvaYoF7kqvTmpClF2XQO9X9f4</span><br><span class="line"><span class="meta">  #</span><span class="bash">curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjYWY3OWNjYjYyNGYyNGE1Y2FiZDFkZTg2MjNiMmU2MTciLCJpZCI6IjMyNzQ0In0.afM-iP1cZUVBDdIefzca6SJyIfFBPO3hqcC0HgrJPcaQLkvmFQYuHAgF6OHKgdHLa0rErRvcKgq1t_6g4DhBiql5EN9qQYAiAKEwXTpfc-0tiNfZg4w2Z4mybg-MeiduZCD0Reh1hUy-jdNNg58poR-IeKJZRhT3IlmfIp4Ssis</span></span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">  curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjMmFiNDFlZWE0YjgxNDNlZmEwMzg3OWZiNDlhOWEyODIiLCJpZCI6IjM5NTI1In0.nwNJTY-9jPhbnVe1_4fTUuCXPd5JlkRlvGgQC8GD-u1qBqsousj8wsO65s6xhksW0h1PBPVnTn8QelwgCLMLyIvN8Pv_H7uB2x4tGHudZHjrPxKURgU6cwH4SnXhd3VYOdfd-Qc3sMKAe9aG_HoKwQoC2Zj2yT3kTQEB7j7Mlv0</span><br><span class="line"><span class="meta">  #</span><span class="bash">curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjMmFiNDFlZWE0YjgxNDNlZmEwMzg3OWZiNDlhOWEyODIiLCJpZCI6IjM3MDcyIn0.Dxx3lVTAysaRBtI6jcDLMm0M0Yh239eUznxq4dpUIIjhDsKLlgtN-UJt0TIBOmAucj8XnBjI_T-mX7hy6WrHH8bKREyMz6cWrGutfBQqNYQ2j-HyScP-Q8tsqO1q4XZuuS9__BB2-mDoN0xqqFUAAITkDkmw702rfRpbIolvNu4</span></span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjNDY0MTNjYjEzYmIzNDkwZGEzZTQ5NWU0MjY0ZjZkMTkiLCJpZCI6IjM3MTkzIn0.HJfnm1ujwLRYnQpsRpiXLErKi2gE_glnZBcss9c2zmHGv-_Gcl6vYLRPdmnPpvcU2cVkuKgExHUUFGdNqzkKDEeFu8lBez9c2gCWi7l81KNAFhsgtTIEm8YRpi9p92kIsutjD_AEj6UuY_jy58nvIWGeXRtuYAaWJGXFQ6B5ItE</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>保存退出</p>
</li>
<li><p>参数化构建</p>
<p><img src="/jenkins-freestyle/./jenkins11.jpg" alt></p>
</li>
<li><p>验证ok</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-GitLab_WebHook自动构建</title>
    <url>/jenkins-gitlab-webhook/</url>
    <content><![CDATA[<p>Jenkins-GitLab_WebHook自动构建</p>
<p>插件：<a href="https://wiki.jenkins-ci.org/display/JENKINS/GitLab+Plugin">GitLab Plugin</a></p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p><img src="/jenkins-gitlab-webhook/./webhook1.jpg" alt></p>
<h5 id="开启触发器"><a href="#开启触发器" class="headerlink" title="开启触发器"></a>开启触发器</h5><p><img src="/jenkins-gitlab-webhook/./webhook2.jpg" alt></p>
<h5 id="创建只读账号"><a href="#创建只读账号" class="headerlink" title="创建只读账号"></a>创建只读账号</h5><p><img src="/jenkins-gitlab-webhook/./webhook3.jpg" alt></p>
<h5 id="创建只读角色"><a href="#创建只读角色" class="headerlink" title="创建只读角色"></a>创建只读角色</h5><p><img src="/jenkins-gitlab-webhook/./webhook4.jpg" alt></p>
<p>分配角色给readonly账号</p>
<p><img src="/jenkins-gitlab-webhook/./webhook5.jpg" alt></p>
<h5 id="在GitLab代码项目中配置WebHook"><a href="#在GitLab代码项目中配置WebHook" class="headerlink" title="在GitLab代码项目中配置WebHook"></a>在GitLab代码项目中配置WebHook</h5><p><img src="/jenkins-gitlab-webhook/./webhook6.jpg" alt></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p><img src="/jenkins-gitlab-webhook/./webhook7.jpg" alt></p>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><img src="/jenkins-gitlab-webhook/./webhook8.jpg" alt></p>
<p><img src="/jenkins-gitlab-webhook/./webhook9.jpg" alt></p>
<h5 id="实战下构建情况"><a href="#实战下构建情况" class="headerlink" title="实战下构建情况"></a>实战下构建情况</h5><p><img src="/jenkins-gitlab-webhook/./webhook10.jpg" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-安装</title>
    <url>/jenkins-install/</url>
    <content><![CDATA[<p>Jenkins-安装</p>
<p><a href="https://jenkins.io/zh/doc/book/installing/">官方安装文档</a></p>
<h4 id="安装部署："><a href="#安装部署：" class="headerlink" title="安装部署："></a>安装部署：</h4><ol>
<li>jdk + war包</li>
<li>jdk + tomcat + war包</li>
<li>docker</li>
</ol>
<h5 id="JDK-War包"><a href="#JDK-War包" class="headerlink" title="JDK+War包"></a>JDK+War包</h5><ol>
<li><p>安装JDK</p>
<p>源码安装：</p>
<p>oracle<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">官网</a>获取JDK安装包，jdk-8u211-linux-x64.tar.gz，并上传到服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务器软件目录  /data/vcg/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、解压</span></span><br><span class="line">tar zxf jdk-8u211-linux-x64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、配置环境变量 /etc/profile</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">添加如下内容：</span><br><span class="line"><span class="meta">#</span><span class="bash">jdk</span></span><br><span class="line">export JAVA_HOME=/data/vcg/jdk1.8.0_211</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jar/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新加载配置文件</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、验证</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>YUM安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Jenkins war包</p>
<p>Jenkins<a href="https://jenkins.io/zh/download/">官网</a>获取下载链接，或直接下载程序包，然后scp上传到服务器待用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.176.1/jenkins.war</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins.war</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">后台启动：</span><br><span class="line">nohup java -jar jenkins.war &amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="4">
<li>访问ip:8080/jenkins</li>
</ol>
<h5 id="JDK-Tomcat-War包"><a href="#JDK-Tomcat-War包" class="headerlink" title="JDK+Tomcat+War包"></a>JDK+Tomcat+War包</h5><ol>
<li><h6 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h6><p>apache<a href="https://tomcat.apache.org/download-80.cgi">官网</a>获取Tomcat安装包，apache-tomcat-8.5.42.tar.gz，并上传到服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务器软件目录  /data/vcg/</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget</span></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.42/bin/apache-tomcat-8.5.42.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar zxf apache-tomcat-8.5.42.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv apache-tomcat-8.5.42 tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Jenkins war包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.176.1/jenkins.war</span><br></pre></td></tr></table></figure>
</li>
<li><p>将Jenkins war包放到tomcat下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp jenkins.war /data/vcg/tomcat/webapps</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh /data/vcg/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问ip:8080/jenkins</p>
</li>
</ol>
<h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  --rm \  </span><br><span class="line">  -d \ </span><br><span class="line">  -p 8080:8080 \ </span><br><span class="line">  -p 50000:50000 \ </span><br><span class="line">  -v jenkins-data:/var/jenkins_home \ </span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \ </span><br><span class="line">  jenkinsci/blueocean </span><br></pre></td></tr></table></figure>
<h4 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h4><ol>
<li><p>解锁</p>
<p><img src="/jenkins-install/./jenkins1.jpg" alt="jenkins1"></p>
</li>
<li><p>安装插件</p>
<p><img src="/jenkins-install/./jenkins2.jpg" alt="jenkins2"></p>
<p><img src="/jenkins-install/./jenkins3.jpg" alt="jenkins3"></p>
<p>等待插件安装————————</p>
</li>
<li><p>创建管理员用户</p>
<p>一般选择 “使用admin账号继续”</p>
<p><img src="/jenkins-install/./jenkins4.jpg" alt="jenkins4"></p>
</li>
<li><p>安装完成</p>
<p><img src="/jenkins-install/./jenkins5.jpg" alt="jenkins5"></p>
</li>
</ol>
<h4 id="重置管理员密码"><a href="#重置管理员密码" class="headerlink" title="重置管理员密码"></a>重置管理员密码</h4><p>默认admin密码保存在<code>.jenkins/secrets/initialAdminPassword</code></p>
<p>登录jenkins后，在“用户列表”—&gt;”admin”—&gt;”设置”的配置页中，找到<code>Password</code>配置项，输入新的密码后保存即可。</p>
<p><img src="/jenkins-install/./jenkins6.jpg" alt="jenkins6"></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-邮件通知</title>
    <url>/jenkins-mail/</url>
    <content><![CDATA[<p>Jenkins-邮件通知</p>
<h4 id="默认自带邮件功能"><a href="#默认自带邮件功能" class="headerlink" title="默认自带邮件功能"></a>默认自带邮件功能</h4><ol>
<li><h5 id="配置系统管理员邮件地址"><a href="#配置系统管理员邮件地址" class="headerlink" title="配置系统管理员邮件地址"></a>配置<code>系统管理员邮件地址</code></h5><p><img src="/jenkins-mail/./mail1.jpg" alt></p>
</li>
<li><h5 id="配置邮件通知，并发送测试邮件"><a href="#配置邮件通知，并发送测试邮件" class="headerlink" title="配置邮件通知，并发送测试邮件"></a>配置<code>邮件通知</code>，并发送测试邮件</h5><p><img src="/jenkins-mail/./mail2.jpg" alt></p>
</li>
<li><h5 id="查收邮件"><a href="#查收邮件" class="headerlink" title="查收邮件"></a>查收邮件</h5><p><img src="/jenkins-mail/./mail3.jpg" alt></p>
</li>
<li><h5 id="job中配置邮件通知"><a href="#job中配置邮件通知" class="headerlink" title="job中配置邮件通知"></a>job中配置邮件通知</h5><p><img src="/jenkins-mail/./mail4.jpg" alt></p>
</li>
<li><h5 id="查看job日志"><a href="#查看job日志" class="headerlink" title="查看job日志"></a>查看job日志</h5><p><img src="/jenkins-mail/./mail5.jpg" alt></p>
</li>
<li><h5 id="查收邮件-1"><a href="#查收邮件-1" class="headerlink" title="查收邮件"></a>查收邮件</h5><p><img src="/jenkins-mail/./mail6.jpg" alt></p>
</li>
<li><h5 id="再将第四步中错误命令修复好，重新构建"><a href="#再将第四步中错误命令修复好，重新构建" class="headerlink" title="再将第四步中错误命令修复好，重新构建"></a>再将第四步中错误命令修复好，重新构建</h5></li>
<li><h5 id="查看job日志-1"><a href="#查看job日志-1" class="headerlink" title="查看job日志"></a>查看job日志</h5><p><img src="/jenkins-mail/./mail7.jpg" alt></p>
</li>
<li><h5 id="查收恢复邮件"><a href="#查收恢复邮件" class="headerlink" title="查收恢复邮件"></a>查收恢复邮件</h5><p><img src="/jenkins-mail/./mail8.jpg" alt></p>
</li>
</ol>
<h4 id="使用Email-ext插件"><a href="#使用Email-ext插件" class="headerlink" title="使用Email-ext插件"></a>使用Email-ext插件</h4><p><a href="https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin">Email-ext+plugin</a></p>
<ol>
<li><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>可以通过系统管理→管理插件→可选插件，选择<strong>Email Extension</strong>插件进行安装：</p>
<p><img src="/jenkins-mail/./mail9.jpg" alt></p>
</li>
</ol>
<ol start="2">
<li><h5 id="配置发件人账号密码，smtp服务器地址，端口"><a href="#配置发件人账号密码，smtp服务器地址，端口" class="headerlink" title="配置发件人账号密码，smtp服务器地址，端口"></a>配置发件人账号密码，smtp服务器地址，端口</h5><p><img src="/jenkins-mail/./mail11.jpg" alt></p>
</li>
<li><h5 id="配置邮件文本类型，模板内容"><a href="#配置邮件文本类型，模板内容" class="headerlink" title="配置邮件文本类型，模板内容"></a>配置邮件文本类型，模板内容</h5><p><img src="/jenkins-mail/./mail12.jpg" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">(本邮件是程序自动下发，请勿回复!)<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">Jenkins地址: $HUDSON_URL<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">项目名称： $PROJECT_NAME<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">构建编号： $BUILD_NUMBER<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">构建状态： $BUILD_STATUS<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">构建日志地址： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">构建地址： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$BUILD_URL&quot;</span>&gt;</span>$BUILD_URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">变更集： $&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="配置发送规则"><a href="#配置发送规则" class="headerlink" title="配置发送规则"></a>配置发送规则</h5><p><img src="/jenkins-mail/./mail13.jpg" alt></p>
</li>
<li><h5 id="开启邮件通知"><a href="#开启邮件通知" class="headerlink" title="开启邮件通知"></a>开启邮件通知</h5><p><code>增加构建后操作步骤</code>，选择<strong>Editable Email Notifiation</strong></p>
<p><img src="/jenkins-mail/./mail14.jpg" alt></p>
</li>
<li><h5 id="配置收件人、抄送人、是否发送附件（构建日志）等"><a href="#配置收件人、抄送人、是否发送附件（构建日志）等" class="headerlink" title="配置收件人、抄送人、是否发送附件（构建日志）等"></a>配置收件人、抄送人、是否发送附件（构建日志）等</h5><p><img src="/jenkins-mail/./mail15.jpg" alt></p>
<p><img src="/jenkins-mail/./mail16.jpg" alt></p>
</li>
<li><h5 id="查看job日志-2"><a href="#查看job日志-2" class="headerlink" title="查看job日志"></a>查看job日志</h5><p><img src="/jenkins-mail/./mail17.jpg" alt></p>
</li>
<li><h5 id="查收邮件-2"><a href="#查收邮件-2" class="headerlink" title="查收邮件"></a>查收邮件</h5><p><img src="/jenkins-mail/./mail18.jpg" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-域名解析+Nginx代理</title>
    <url>/jenkins-nginx/</url>
    <content><![CDATA[<h4 id="配置Jenkins-URL"><a href="#配置Jenkins-URL" class="headerlink" title="配置Jenkins URL"></a>配置Jenkins URL</h4><p><img src="/jenkins-nginx/./yuming1.jpg" alt></p>
<h4 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h4><p><img src="/jenkins-nginx/./yuming2.jpg" alt></p>
<h4 id="添加Nginx解析"><a href="#添加Nginx解析" class="headerlink" title="添加Nginx解析"></a>添加Nginx解析</h4><p>nginx配置文件如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> jenkins.visualchina.com;</span><br><span class="line"> <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://jenkins.visualchina.com/jenkins;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> /jenkins &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/jenkins;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded_For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">	<span class="attribute">server_name</span> jenkins.visualchina.com;</span><br><span class="line">	<span class="attribute">access_log</span>  /var/log/nginx/jenkins.visualchina.com main;</span><br><span class="line">	<span class="attribute">error_log</span>  /var/log/nginx/jenkins.visualchina.com.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">ssl</span> <span class="literal">on</span>;                                                               <span class="comment">#ssl功能开启</span></span><br><span class="line">	<span class="attribute">ssl_certificate</span> sslfile/visualchina.pem;                         <span class="comment">#证书路径</span></span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> sslfile/visualchina.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://jenkins.visualchina.com/jenkins;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> /jenkins &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/jenkins;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded_For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-日常维护</title>
    <url>/jenkins-ops/</url>
    <content><![CDATA[<ul>
<li>插件升级</li>
<li>版本升级<span id="more"></span> 
</li>
</ul>
<h4 id="插件升级"><a href="#插件升级" class="headerlink" title="插件升级"></a>插件升级</h4><ol>
<li>当看到Jenkins设置界面显示插件有可用更新时，点击<strong>管理插件</strong><img src="/jenkins-ops/./jenkins维护1.jpg" alt="jenkins维护1"></li>
<li>点击<strong>全选</strong>按钮，再点击<strong>下载待重启后安装</strong><img src="/jenkins-ops/./jenkins维护2.jpg" alt></li>
</ol>
<h4 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h4><ol>
<li><p>当看到右上角<strong>monitor</strong>提示有新版本更新提示后，记录版本号<img src="/jenkins-ops/./jenkins维护3.jpg" alt></p>
</li>
<li><p>登录jenkins服务器终端</p>
</li>
<li><pre><code class="shell"><span class="meta">#</span> 使用清华源加速
<span class="meta">#</span> 请对应替换版本号
wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.235.1/jenkins.war
</code></pre>
<p><img src="/jenkins-ops/./jenkins维护4.jpg" alt></p>
</li>
<li><p>重启tomcat服务即可。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins Pipelines流水线实践</title>
    <url>/jenkins-pipelines-practice/</url>
    <content><![CDATA[<p>基于Jenkins Piplines script实现企业持续集成、持续交付。</p>
<span id="more"></span>
<p>demo项目地址：</p>
<p><a href="https://github.com/GeekSRE/jenkins-demo">https://github.com/GeekSRE/jenkins-demo</a></p>
<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>基于Jenkins Piplines script实现企业持续集成、持续交付。</p>
<p>可自定义发版流程，制定标准发版模版后可通用于所有应用。</p>
<p>基于应用的不同变量实现兼容性。</p>
<h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5><p><img src="/jenkins-pipelines-practice/./jenkins01.jpg" alt="jenkins01"></p>
<h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p><img src="/jenkins-pipelines-practice/./jenkins02.jpg" alt="jenkins02"></p>
<h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── app-info                                # 服务信息</span><br><span class="line">│   ├── app-java.sh                         # 包含gitlab代码库地址、启动命令、端口、Docker基础镜像</span><br><span class="line">│   ├── app-node.sh                         # 是否开启APM监控、代码语言等信息</span><br><span class="line">│   └── app-php.sh</span><br><span class="line">├── app-k8s-yaml                            # 特别应用的k8s yaml文件</span><br><span class="line">│   ├── api-gateway-v2-vcg-com.sh           # 比如挂载nas存储、本地存储</span><br><span class="line">│   ├── api-php-v2-vcg-com.sh               # 指定日志收集到日志服务</span><br><span class="line">│   ├── api-quick-v2-vcg-com.sh             # 自定义hosts配置 </span><br><span class="line">│   ├── api-wps-photo-from-url-vcg-com.sh</span><br><span class="line">│   ├── com-veer-cms.sh</span><br><span class="line">│   ├── com-veer-veerservice.sh</span><br><span class="line">│   ├── downloadservice-vcg-com.sh</span><br><span class="line">│   ├── editservice-vcg-com.sh</span><br><span class="line">│   ├── eneditservice-vcg-com.sh</span><br><span class="line">│   ├── instock2service.sh</span><br><span class="line">│   ├── instock-single-dam-vcg-com.sh</span><br><span class="line">│   ├── logservice-vcg-com.sh</span><br><span class="line">│   ├── node-vcg-api-b.sh</span><br><span class="line">│   ├── node-visualchina-web3-b.sh</span><br><span class="line">│   ├── node-visualchina-web3.sh</span><br><span class="line">│   ├── node-visualchina-web-b.sh</span><br><span class="line">│   ├── portalservice-vcg-com.sh</span><br><span class="line">│   ├── vcg-gateway.sh</span><br><span class="line">│   └── veer-gateway.sh</span><br><span class="line">├── build                                   # CICD的Shell脚本</span><br><span class="line">│   ├── build-ali-k8s-yaml.sh               # 生成k8s yaml</span><br><span class="line">│   ├── build-ali-test-k8s-yaml.sh          </span><br><span class="line">│   ├── build-ali-usa-k8s-yaml.sh</span><br><span class="line">│   ├── build-dockerfile.sh                 # 生成Dockerfile</span><br><span class="line">│   ├── build-package.sh                    # 编译脚本，比如yarn install 或 maven</span><br><span class="line">│   ├── build-tx-k8s-yaml.sh</span><br><span class="line">│   ├── checkout.sh                         # 克隆代码</span><br><span class="line">│   ├── ConsulServerList.java               </span><br><span class="line">│   ├── DBInstanceId.txt                    # 敏感数据替换</span><br><span class="line">│   └── docker-build-push.sh                # push镜像</span><br><span class="line">├── Jenkinsfile                             # Jenkins 流水线文件</span><br><span class="line">├── jenkins.sh                              # 主Shell文件</span><br><span class="line">└── README.md </span><br><span class="line"></span><br><span class="line">3 directories, 35 files</span><br></pre></td></tr></table></figure>
<h5 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h5><h6 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h6><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">	agent any</span><br><span class="line">	options &#123;</span><br><span class="line">		timestamps()</span><br><span class="line">	&#125;</span><br><span class="line">	environment &#123;</span><br><span class="line">		TimeStamp=<span class="string">&quot;$&#123;currentBuild.startTimeInMillis&#125;&quot;</span></span><br><span class="line">		Service=<span class="string">&quot;$&#123;JOB_BASE_NAME&#125;&quot;</span></span><br><span class="line">		Branch=<span class="string">&quot;$&#123;env.gitlabTargetBranch&#125;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	parameters &#123;</span><br><span class="line">		choice(<span class="attr">name:</span> <span class="string">&#x27;Action&#x27;</span>,<span class="attr">choices:</span> <span class="string">&#x27;程序发版\n程序回滚&#x27;</span>,<span class="attr">description:</span> <span class="string">&#x27;请选择操作&#x27;</span>)</span><br><span class="line">		choice(<span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">choices:</span> <span class="string">&#x27;测试环境\n预发环境\n生产环境\n美西环境&#x27;</span>,<span class="attr">description:</span> <span class="string">&#x27;请选择部署环境&#x27;</span>)</span><br><span class="line">		string(<span class="attr">name:</span> <span class="string">&#x27;JenkinsApi&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;false&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;是否是JenkinsAPI触发,默认请不要填写。&#x27;</span>)</span><br><span class="line">		string(<span class="attr">name:</span> <span class="string">&#x27;BranchOrTag&#x27;</span>, <span class="attr">defaultValue:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;指定分支或tag发版,默认请不要填写。&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	stages &#123;</span><br><span class="line">		stage(<span class="string">&#x27;PrintEnv&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;printenv&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Check Out&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;美西环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;CheckOut&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;BranchOrTag&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build Package&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;美西环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh -x jenkins.sh &#x27;BuildPackage&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build Dockerfile&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;美西环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;生产环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;BuildDockerfile&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Build K8S Yaml&#x27;</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;master&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Branch&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;测试环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;预发环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;美西环境&#x27;</span>;</span><br><span class="line">					environment <span class="attr">name:</span> <span class="string">&#x27;Scope&#x27;</span>,<span class="attr">value:</span><span class="string">&#x27;生产环境&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">&quot;sh jenkins.sh &#x27;BuildK8SYaml&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">&#x27;Deploy&#x27;</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				script &#123;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;测试环境&quot;</span>) &#123;</span><br><span class="line">						echo <span class="string">&quot;测试环境发版&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;预发环境&quot;</span>) &#123;</span><br><span class="line">						echo <span class="string">&quot;预发环境发版&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;美西环境&quot;</span>) &#123;</span><br><span class="line">						echo <span class="string">&quot;预发环境发版&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">						sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">&quot;$&#123;Scope&#125;&quot;</span> == <span class="string">&quot;生产环境&quot;</span>) &#123;</span><br><span class="line">						script &#123;</span><br><span class="line">							<span class="keyword">if</span> (<span class="string">&quot;$&#123;JenkinsApi&#125;&quot;</span> == <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">								sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">								sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span> &#123;</span><br><span class="line">								script &#123;</span><br><span class="line">									<span class="keyword">if</span> (<span class="string">&quot;$&#123;env.Action&#125;&quot;</span> == <span class="string">&quot;程序回滚&quot;</span>) &#123;</span><br><span class="line">										echo <span class="string">&quot;生产环境回滚,等待领导确认&quot;</span></span><br><span class="line">										script &#123;</span><br><span class="line">											input <span class="attr">message:</span> <span class="string">&quot;请确认是否回滚 $&#123;Scope&#125;： &quot;</span>,<span class="attr">ok :</span> <span class="string">&#x27;确认&#x27;</span>,<span class="attr">submitter:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">										&#125;</span><br><span class="line">										echo <span class="string">&#x27;已确认，即将回滚&#x27;</span></span><br><span class="line">										sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">									&#125;</span><br><span class="line">									<span class="keyword">else</span> &#123;</span><br><span class="line">										echo <span class="string">&quot;生产环境发版,等待领导确认&quot;</span></span><br><span class="line">										script &#123;</span><br><span class="line">											input <span class="attr">message:</span> <span class="string">&quot;请确认是否部署 $&#123;Scope&#125;： &quot;</span>,<span class="attr">ok :</span> <span class="string">&#x27;确认&#x27;</span>,<span class="attr">submitter:</span> <span class="string">&quot;admin&quot;</span></span><br><span class="line">										&#125;</span><br><span class="line">										echo <span class="string">&#x27;已确认，即将发布&#x27;</span></span><br><span class="line">										sh <span class="string">&quot;sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;&quot;</span></span><br><span class="line">										sh <span class="string">&quot;sh jenkins.sh &#x27;Deploy&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27;&quot;</span></span><br><span class="line">									&#125;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>特点：参数化构建，根据不同部署环境，会走不同的部署流程，生产环境需要admin确认。</p>
<p>流水线语法、示例、变量请参考<a href="https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/">https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/</a></p>
<h6 id="jenkins-sh"><a href="#jenkins-sh" class="headerlink" title="jenkins.sh"></a>jenkins.sh</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">Service=$2</span><br><span class="line">Branch=$3</span><br><span class="line">Scope=$4</span><br><span class="line">DateTmp=$(printf &quot;%.3f&quot; `echo &quot;scale=3;$5/1000&quot;|bc`)</span><br><span class="line">Date=`date -d @$&#123;DateTmp&#125; &quot;+%Y%m%d%H%M%S&quot;`</span><br><span class="line">BranchOrTag=$6</span><br><span class="line"></span><br><span class="line">echo &quot;传递的参数为：$*&quot;;</span><br><span class="line"></span><br><span class="line">source ./app-info/app-java.sh</span><br><span class="line">source ./app-info/app-node.sh</span><br><span class="line">source ./app-info/app-php.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 环境判断</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当Branch 为 <span class="built_in">test</span> 或 master 时，代表是 git webhook触发</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当Branch 为 null，代表是 手动触发</span></span><br><span class="line"></span><br><span class="line">if [[ $&#123;Branch&#125; == &quot;null&quot; ]]; then</span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">    Branch=&quot;test&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">    Branch=&quot;master&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;美西环境&quot; ]]; then</span><br><span class="line">    Branch=&quot;master&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">    Branch=&quot;master&quot;</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;+++ 手动触发 +++ Git分支为 $&#123;Branch&#125; ；部署环境为 $&#123;Scope&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  if [[ $&#123;Branch&#125; == &quot;test&quot; ]]; then</span><br><span class="line">    Scope=&quot;测试环境&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [[ $&#123;Branch&#125; == &quot;master&quot; ]]; then</span><br><span class="line">    Scope=&quot;预发环境&quot;</span><br><span class="line">  fi</span><br><span class="line">  if [[ $&#123;Branch&#125; != &quot;master&quot; ]] &amp;&amp; [[ $&#123;Branch&#125; != &quot;test&quot; ]]; then</span><br><span class="line">    echo &quot;非 master 或者 test 分支的 WebHook 不做任何操作 &quot;</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;+++ Git WebHook触发 +++ 触发分支为 $&#123;Branch&#125; ；部署环境为 $&#123;Scope&#125; &quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">  ServiceNum=$&#123;ServiceNumPre&#125;</span><br><span class="line">  NameSpace=&quot;default&quot;</span><br><span class="line">  ServiceCommand=$&#123;ServiceCommandTest&#125;</span><br><span class="line">  ScopeEnv=&quot;su - cicd-test -c&quot;</span><br><span class="line">  ScopeName=&#x27;test&#x27;</span><br><span class="line">  Cloud=&quot;ali&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">  ServiceNum=$&#123;ServiceNumPre&#125;</span><br><span class="line">  NameSpace=&quot;default&quot;</span><br><span class="line">  ServiceCommand=$&#123;ServiceCommandPre&#125;</span><br><span class="line">  ScopeEnv=&quot;su - cicd-pre -c&quot;</span><br><span class="line">  ScopeName=&#x27;pre&#x27;</span><br><span class="line">  Cloud=&quot;ali&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;美西环境&quot; ]]; then</span><br><span class="line">  ServiceNum=$&#123;ServiceNumUsa&#125;</span><br><span class="line">  NameSpace=&quot;default&quot;</span><br><span class="line">  ServiceCommand=$&#123;ServiceCommandUsa&#125;</span><br><span class="line">  ScopeEnv=&quot;su - cicd-usa -c&quot;</span><br><span class="line">  ScopeName=&#x27;usa&#x27;</span><br><span class="line">  Cloud=&quot;ali&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">  ServiceNum=$&#123;ServiceNumPro&#125;</span><br><span class="line">  NameSpace=&quot;default&quot;</span><br><span class="line">  ServiceCommand=$&#123;ServiceCommandPro&#125;</span><br><span class="line">  ScopeEnv=&quot;su - cicd-pro -c&quot;</span><br><span class="line">  ScopeName=&#x27;pro&#x27;</span><br><span class="line">  Cloud=&quot;ali&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前项目 /jenkins/workspace/....</span></span><br><span class="line">WorkDir=`pwd`</span><br><span class="line">ServiceDir=/jenkins/vcgapp/$&#123;Service&#125;/$&#123;ScopeName&#125;</span><br><span class="line">mkdir -p $ServiceDir</span><br><span class="line">echo &quot;工作目录为 : $&#123;WorkDir&#125; , 制品仓库目录为 : $&#123;ServiceDir&#125; &quot;</span><br><span class="line"></span><br><span class="line">CheckOut()</span><br><span class="line">&#123;</span><br><span class="line">  source ./build/checkout.sh</span><br><span class="line">&#125;</span><br><span class="line">BuildPackage()</span><br><span class="line">&#123;</span><br><span class="line">  source ./build/build-package.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BuildDockerfile()</span><br><span class="line">&#123;</span><br><span class="line">  source ./build/build-dockerfile.sh</span><br><span class="line">&#125;</span><br><span class="line">DockerBuildPush()</span><br><span class="line">&#123;</span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">    if [[ $&#123;ServiceType&#125; == &quot;java&quot; ]]; then</span><br><span class="line">      rm -f $&#123;ServiceDir&#125;/$&#123;Service&#125;.jar</span><br><span class="line">      cp /jenkins/vcgapp/$&#123;Service&#125;/pre/$&#123;Service&#125;.jar $&#123;ServiceDir&#125;/$&#123;Service&#125;.jar</span><br><span class="line">      echo &quot;拷贝预发布的应用包到 $&#123;ServiceDir&#125; &quot;</span><br><span class="line">      ls -l $&#123;ServiceDir&#125;/$&#123;Service&#125;.jar</span><br><span class="line">      # cp $&#123;ServiceDir&#125;/$&#123;Service&#125;.jar $&#123;ServiceDir&#125;/$&#123;Service&#125;.jar-bak-$&#123;Date&#125;</span><br><span class="line">      # echo &quot;应用包加时间戳，用于备份&quot;</span><br><span class="line">      # ls -l $&#123;ServiceDir&#125;/$&#123;Service&#125;.jar-bak-$&#123;Date&#125;</span><br><span class="line">    else</span><br><span class="line">      rm -f $&#123;ServiceDir&#125;/$&#123;Service&#125;.tar.gz</span><br><span class="line">      cp /jenkins/vcgapp/$&#123;Service&#125;/pre/$&#123;Service&#125;.tar.gz $&#123;ServiceDir&#125;/$&#123;Service&#125;.tar.gz</span><br><span class="line">      echo &quot;拷贝预发布的应用包到 $&#123;ServiceDir&#125; &quot;</span><br><span class="line">      ls -l $&#123;ServiceDir&#125;/$&#123;Service&#125;.tar.gz</span><br><span class="line">      # cp $&#123;ServiceDir&#125;/$&#123;Service&#125;.tar.gz $&#123;ServiceDir&#125;/$&#123;Service&#125;.tar.gz-bak-$&#123;Date&#125;</span><br><span class="line">      # echo &quot;应用包加时间戳，用于备份&quot;</span><br><span class="line">      # ls -l $&#123;ServiceDir&#125;/$&#123;Service&#125;.tar.gz-bak-$&#123;Date&#125;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  source ./build/docker-build-push.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BuildK8SYaml()</span><br><span class="line">&#123;</span><br><span class="line">  if [[ $&#123;ServiceStartTime&#125; ]]; then</span><br><span class="line">    echo &quot;程序的ServiceStartTime启动时间变量为 $&#123;ServiceStartTime&#125; &quot;</span><br><span class="line">  else</span><br><span class="line">    if [[ $&#123;ServiceType&#125; == &quot;java&quot; ]]; then</span><br><span class="line">      ServiceStartTime=&quot;100&quot;</span><br><span class="line">    else</span><br><span class="line">      ServiceStartTime=&quot;30&quot;</span><br><span class="line">    fi</span><br><span class="line">    echo &quot;程序的ServiceStartTime启动时间变量为 $&#123;ServiceStartTime&#125; &quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">    if [[ -f ./app-k8s-yaml/$&#123;Service&#125;.sh ]] &amp;&amp; [[ $&#123;Service&#125; == &#x27;instock2service&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;instock-single-dam-vcg-com&#x27; ]]; then</span><br><span class="line">      echo &quot;./app-k8s-yaml/$&#123;Service&#125;.sh 存在，将生成 自定义（非模板）yaml文件。&quot;</span><br><span class="line">      source ./app-k8s-yaml/$&#123;Service&#125;.sh</span><br><span class="line">    else</span><br><span class="line">      source ./build/build-$&#123;Cloud&#125;-test-k8s-yaml.sh</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;美西环境&quot; ]]; then</span><br><span class="line">    limitsCpu=&quot;1&quot;</span><br><span class="line">    limitsMem=&quot;4Gi&quot;</span><br><span class="line">    requestsCpu=&quot;0.5&quot;</span><br><span class="line">    requestsMem=&quot;1Gi&quot;</span><br><span class="line">    if [[ -f ./app-k8s-yaml/$&#123;Service&#125;.sh ]] &amp;&amp; [[ $&#123;Service&#125; != &#x27;com-veer-veerservice&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;com-veer-cms&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;instock2service&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;instock-single-dam-vcg-com&#x27; ]]; then</span><br><span class="line">      echo &quot;./app-k8s-yaml/$&#123;Service&#125;.sh 存在，将生成 自定义（非模板）yaml文件。&quot;</span><br><span class="line">      source ./app-k8s-yaml/$&#123;Service&#125;.sh</span><br><span class="line">    else</span><br><span class="line">      source ./build/build-$&#123;Cloud&#125;-usa-k8s-yaml.sh</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">    limitsCpu=&quot;1&quot;</span><br><span class="line">    limitsMem=&quot;4Gi&quot;</span><br><span class="line">    requestsCpu=&quot;0.2&quot;</span><br><span class="line">    requestsMem=&quot;1Gi&quot;</span><br><span class="line">    if [[ -f ./app-k8s-yaml/$&#123;Service&#125;.sh ]] &amp;&amp; [[ $&#123;Service&#125; != &#x27;com-veer-veerservice&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;com-veer-cms&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;instock2service&#x27; ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;instock-single-dam-vcg-com&#x27; ]]; then</span><br><span class="line">      echo &quot;./app-k8s-yaml/$&#123;Service&#125;.sh 存在，将生成 自定义（非模板）yaml文件。&quot;</span><br><span class="line">      source ./app-k8s-yaml/$&#123;Service&#125;.sh</span><br><span class="line">    else</span><br><span class="line">      source ./build/build-$&#123;Cloud&#125;-k8s-yaml.sh</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">    if [[ $&#123;CustomResources&#125; != &quot;yes&quot; ]]; then</span><br><span class="line">      limitsCpu=&quot;2&quot;</span><br><span class="line">      limitsMem=&quot;8Gi&quot;</span><br><span class="line">      requestsCpu=&quot;0.5&quot;</span><br><span class="line">      requestsMem=&quot;2Gi&quot;</span><br><span class="line">    fi</span><br><span class="line">    # if [[ $&#123;Service&#125; == &#x27;com-veer-veerservice&#x27; ]]; then</span><br><span class="line">    #   source ./app-k8s-yaml/com-veer-veerservice.sh</span><br><span class="line">    if [[ -f ./app-k8s-yaml/$&#123;Service&#125;.sh ]]&amp;&amp; [[ $&#123;Service&#125; != &#x27;instock2service&#x27; ]]; then</span><br><span class="line">      echo &quot;./app-k8s-yaml/$&#123;Service&#125;.sh 存在，将生成 自定义（非模板）yaml文件。&quot;</span><br><span class="line">      source ./app-k8s-yaml/$&#123;Service&#125;.sh</span><br><span class="line">    else</span><br><span class="line">      source ./build/build-$&#123;Cloud&#125;-k8s-yaml.sh</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo &quot;$ServiceDir/$&#123;Service&#125;.yaml 文件内容：&quot;</span><br><span class="line">  cat $ServiceDir/$&#123;Service&#125;.yaml</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Deploy()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">  $</span><span class="bash">ScopeEnv <span class="string">&quot;kubectl apply -f <span class="variable">$ServiceDir</span>/<span class="variable">$&#123;Service&#125;</span>.yaml&quot;</span></span></span><br><span class="line">  echo &quot;Action:Deploy,ScopeName:$&#123;ScopeName&#125;,ServiceName:$&#123;Service&#125;,time:$Date,image:registry-vpc.cn-beijing.aliyuncs.com/vcg/$&#123;Service&#125;:$date&quot; &gt;&gt; /jenkins/vcgapp/$&#123;ScopeName&#125;_deploy_history.txt</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 回滚命令 kubectl rollout undo deployment/node-vcg-web</span></span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">CheckOut)</span><br><span class="line">  CheckOut</span><br><span class="line">  ;;</span><br><span class="line">BuildPackage)</span><br><span class="line">  BuildPackage</span><br><span class="line">  ;;</span><br><span class="line">BuildDockerfile)</span><br><span class="line">  BuildDockerfile</span><br><span class="line">  ;;</span><br><span class="line">DockerBuildPush)</span><br><span class="line">  DockerBuildPush</span><br><span class="line">  ;;</span><br><span class="line">BuildK8SYaml)</span><br><span class="line">  BuildK8SYaml</span><br><span class="line">  ;;</span><br><span class="line">Deploy)</span><br><span class="line">  Deploy</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  echo $&quot;Usage: $0 &#123;CheckOut|BuildPackage|BuildDockerfile|DockerBuildPush|BuildK8SYaml|Deploy&#125;&quot;</span><br><span class="line">  exit 1</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p>脚本需传参来实现不同功能</p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh jenkins.sh &#x27;DockerBuildPush&#x27; &#x27;$&#123;Service&#125;&#x27; &#x27;$&#123;Branch&#125;&#x27; &#x27;$&#123;Scope&#125;&#x27; &#x27;$&#123;TimeStamp&#125;&#x27; &#x27;$&#123;env.Action&#125;&#x27;</span><br></pre></td></tr></table></figure>
<h6 id="app-java-sh"><a href="#app-java-sh" class="headerlink" title="app-java.sh"></a>app-java.sh</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [[ $&#123;Service&#125; == &quot;assetservice-vcg-com&quot; ]]; then</span><br><span class="line">  ServiceType=&quot;java&quot;</span><br><span class="line">  Consul=&quot;yes&quot;</span><br><span class="line">  GitAddress=&quot;git@git.visualchina.com:structure/vcgasset.git&quot;</span><br><span class="line">  GitDir=`echo $&#123;GitAddress&#125;|awk -F&#x27;/&#x27; &#x27;&#123;print $2&#125;&#x27;|awk -F&#x27;.git&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class="line">  PomDir=&quot;./&quot;</span><br><span class="line">  ServicePort=&quot;8080&quot;</span><br><span class="line">  ServiceCommandPre=&quot;java -jar -Dserver.port=$&#123;ServicePort&#125; -Dspring.profiles.active=production&quot;</span><br><span class="line">  ServiceCommandPro=&quot;java -jar -Dserver.port=$&#123;ServicePort&#125; -Dspring.profiles.active=production&quot;</span><br><span class="line">  ServiceImageFrom=&quot;registry-vpc.cn-beijing.aliyuncs.com/vcgcs/jdk8&quot;</span><br><span class="line">  ServiceStartTime=&quot;30&quot;</span><br><span class="line">  TingyunApm=&quot;no&quot;</span><br><span class="line">  ServiceNumPre=&quot;1&quot;</span><br><span class="line">  ServiceNumPro=&quot;3&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>根据服务名称去确定相关变量信息，实现后面流程</p>
<h6 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h6><p><img src="/jenkins-pipelines-practice/./jenkins03.jpg" alt="jenkins03"></p>
]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-插件管理</title>
    <url>/jenkins-plugins/</url>
    <content><![CDATA[<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><h5 id="Web控制台安装"><a href="#Web控制台安装" class="headerlink" title="Web控制台安装"></a>Web控制台安装</h5><ol>
<li><p>进入“插件管理”界面</p>
<p><img src="/jenkins-plugins/./chajian1.jpg" alt></p>
</li>
<li><p>搜索插件名称</p>
<p><img src="/jenkins-plugins/./chajian2.jpg" alt></p>
</li>
<li><p>勾选插件，选择<code>直接安装</code></p>
<p><img src="/jenkins-plugins/./chajian3.jpg" alt></p>
</li>
<li><p>安装完成。（部分插件安装后需重启，勾选重启Jenkins选项即可。）</p>
</li>
</ol>
<h5 id="上传插件"><a href="#上传插件" class="headerlink" title="上传插件"></a>上传插件</h5><p>公司以前使用Swarm管理Docker容器，用到aliyun-container-service-deploy的jenkins插件更新应用</p>
<ol>
<li><p>到清华源下载插件</p>
<p><a href="https://mirror.tuna.tsinghua.edu.cn/jenkins/plugins/aliyun-container-service-deploy/latest/">https://mirror.tuna.tsinghua.edu.cn/jenkins/plugins/aliyun-container-service-deploy/latest/</a></p>
</li>
<li><p>上传插件</p>
<p><img src="/jenkins-plugins/./chajian4.jpg" alt></p>
</li>
<li><p>等待安装</p>
<p><img src="/jenkins-plugins/./chajian5.jpg" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-用户权限管理</title>
    <url>/jenkins-rbac/</url>
    <content><![CDATA[<p>Jenkins-用户权限管理</p>
<p>使用<a href="http://wiki.jenkins-ci.org/display/JENKINS/Role+Strategy+Plugin">Role-based Authorization Strategy</a>插件实现权限管理</p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p><img src="/jenkins-rbac/./quanxian1.jpg" alt></p>
<p>确认安装完成</p>
<p><img src="/jenkins-rbac/./quanxian2.jpg" alt></p>
<h4 id="激活基于角色的策略"><a href="#激活基于角色的策略" class="headerlink" title="激活基于角色的策略"></a>激活基于角色的策略</h4><p><img src="/jenkins-rbac/./quanxian3.jpg" alt></p>
<h4 id="自定义角色权限"><a href="#自定义角色权限" class="headerlink" title="自定义角色权限"></a>自定义角色权限</h4><p><img src="/jenkins-rbac/./quanxian4.jpg" alt></p>
<h4 id="分配角色给用户"><a href="#分配角色给用户" class="headerlink" title="分配角色给用户"></a>分配角色给用户</h4><p><img src="/jenkins-rbac/./quanxian5.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Jenkins-RobotFramework执行自动化测试</title>
    <url>/jenkins-robotframework/</url>
    <content><![CDATA[<p>Jenkins-RobotFramework执行自动化测试</p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p><img src="/jenkins-robotframework/./autotest1.jpg" alt></p>
<p><img src="/jenkins-robotframework/./autotest2.jpg" alt></p>
<h5 id="添加slave节点"><a href="#添加slave节点" class="headerlink" title="添加slave节点"></a>添加slave节点</h5><p>由于master节点是linux服务器，RobotFramework软件部署在windows服务器上。</p>
<p><img src="/jenkins-robotframework/./autotest3.jpg" alt></p>
<p><img src="/jenkins-robotframework/./autotest4.jpg" alt></p>
<h5 id="新建freestyle项目"><a href="#新建freestyle项目" class="headerlink" title="新建freestyle项目"></a>新建freestyle项目</h5><p>指定slave节点构建</p>
<p><img src="/jenkins-robotframework/./autotest4-1.jpg" alt></p>
<p><img src="/jenkins-robotframework/./autotest5.jpg" alt></p>
<p>配置通过百分比和邮件通知</p>
<p><img src="/jenkins-robotframework/./autotest6.jpg" alt></p>
<h5 id="构建效果"><a href="#构建效果" class="headerlink" title="构建效果"></a>构建效果</h5><p><img src="/jenkins-robotframework/./autotest7.jpg" alt></p>
<p><img src="/jenkins-robotframework/./autotest8.jpg" alt></p>
<p><img src="/jenkins-robotframework/./autotest9.jpg" alt></p>
<p><img src="/jenkins-robotframework/./autotest10.jpg" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S的node节点修改默认存储路径</title>
    <url>/k8s-change-rootdir/</url>
    <content><![CDATA[<p>Kubernetes的node节点修改默认存储路径<br><span id="more"></span></p>
<h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>根目录存储小，/data/目录存储空间大，将Kubernetes的node节点修改默认存储路径由/var/lib/kubelet/改为/data/kubelet/</p>
<p><img src="/k8s-change-rootdir/./kuboard01.png" alt></p>
<p><img src="/k8s-change-rootdir/./k8s-change-rootdir.png" alt></p>
<h4 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h4><h5 id="备份配置"><a href="#备份配置" class="headerlink" title="备份配置"></a>备份配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf-bak</span><br></pre></td></tr></table></figure>
<h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加  --root-dir=/data/kubelet</span></span><br><span class="line">Environment=&quot;KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml --root-dir=/data/kubelet&quot;</span><br></pre></td></tr></table></figure>
<h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="/k8s-change-rootdir/./kuboard02.png" alt></p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-ingress controller部署</title>
    <url>/k8s-nginx-ingress-controller-install/</url>
    <content><![CDATA[<p>Ingress 是从Kubernetes集群外部访问集群内部服务的入口<br><span id="more"></span></p>
<blockquote>
<p><a href="https://docs.jdcloud.com/cn/jcs-for-kubernetes/deploy-ingress-nginx-controller">https://docs.jdcloud.com/cn/jcs-for-kubernetes/deploy-ingress-nginx-controller</a></p>
</blockquote>
<p>Ingress 是从Kubernetes集群外部访问集群内部服务的入口，概念示意可参考下方说明。你可以给Ingress配置提供外部可访问的URL、负载均衡、SSL、基于名称的虚拟主机等。用户通过POST Ingress资源到API server的方式来请求ingress。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure>
<p>Ingress controller负责实现Ingress。Ingress controller在Kubernetes集群中默认不会自动启用，您可以在一个pod中部署任意类型的自定义Ingress Controller。本文将以Nginx-ingress controller为例，说明Controller部署和Ingress定义。更多外部类型的Ingresss Controller参考<a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/">Kubernetes官方文档</a>。</p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol>
<li><h5 id="从github下载nginx-ingress-controller最新的安装部署文件-并将部署文件解压缩到本地目录："><a href="#从github下载nginx-ingress-controller最新的安装部署文件-并将部署文件解压缩到本地目录：" class="headerlink" title="从github下载nginx-ingress controller最新的安装部署文件,并将部署文件解压缩到本地目录："></a>从github下载nginx-ingress controller最新的安装部署文件,并将部署文件解压缩到本地目录：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/nginxinc/kubernetes-ingress/archive/v1.4.5.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf v1.4.5.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：本文说明在1.12.3版本的集群上如何部署nginx-ingress controller，如集群版本不同，选择其他适合的ginx-ingress controller安装部署文件。</p>
</li>
</ol>
<ol start="2">
<li><h5 id="进入解压缩后的nginx-ingress-controller安装目录；"><a href="#进入解压缩后的nginx-ingress-controller安装目录；" class="headerlink" title="进入解压缩后的nginx-ingress controller安装目录；"></a>进入解压缩后的nginx-ingress controller安装目录；</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd kubernetes-ingress-1.4.5/deployments</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="安装nginx-ingress-controller"><a href="#安装nginx-ingress-controller" class="headerlink" title="安装nginx-ingress controller"></a>安装nginx-ingress controller</h4><ol>
<li><h5 id="为nginx-ingress-controller创建一个namespace和service-account："><a href="#为nginx-ingress-controller创建一个namespace和service-account：" class="headerlink" title="为nginx-ingress controller创建一个namespace和service account："></a>为nginx-ingress controller创建一个namespace和service account：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f common/ns-and-sa.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中："><a href="#为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中：" class="headerlink" title="为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中："></a>为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f common/default-server-secret.yaml</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：建议使用合适的TLS证书和key替换default-server-secret.yaml文件中自签发的证书和key。</p>
</li>
</ol>
<ol start="3">
<li><h5 id="创建config-map保存NGINX的自定义配置："><a href="#创建config-map保存NGINX的自定义配置：" class="headerlink" title="创建config map保存NGINX的自定义配置："></a>创建config map保存NGINX的自定义配置：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f common/nginx-config.yaml</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：目前提供的config map中的data为空，您可以按需添加自定义配置。</p>
</li>
</ol>
<ol start="4">
<li><h5 id="为第1步中创建的service-account配置RBAC："><a href="#为第1步中创建的service-account配置RBAC：" class="headerlink" title="为第1步中创建的service account配置RBAC："></a>为第1步中创建的service account配置RBAC：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f rbac/rbac.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="以Deployment的方式部署nginx-ingress-controller"><a href="#以Deployment的方式部署nginx-ingress-controller" class="headerlink" title="以Deployment的方式部署nginx-ingress controller:"></a>以Deployment的方式部署nginx-ingress controller:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment/nginx-ingress.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="执行如下命令，确定部署nginx-ingress-controller的Deployment运行正常："><a href="#执行如下命令，确定部署nginx-ingress-controller的Deployment运行正常：" class="headerlink" title="执行如下命令，确定部署nginx-ingress controller的Deployment运行正常："></a>执行如下命令，确定部署nginx-ingress controller的Deployment运行正常：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> kubectl get deployment -n nginx-ingress</span><br><span class="line"> </span><br><span class="line">NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line"> nginx-ingress   1         1         1            1           24d</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="创建ingress的LoadBalance"><a href="#创建ingress的LoadBalance" class="headerlink" title="创建ingress的LoadBalance"></a>创建ingress的LoadBalance</h5><p>在 Kubernetes集群中，每个Pod都具有唯一的内部 IP 地址，但是Deployment中的Pod随时可能被删除或创建，导致Pod IP地址不断变化。因此需要创建一个Service对外暴露Pod中的应用。Service具有唯一的固定IP地址且能够为后端添加的成员Pod提供负载均衡。在京东云Kubernetes集群中您可以使用LoadBalance类型的Service，为Service关联创建一个应用负载均衡，并通过负载均衡绑定的公网IP，将Service后端关联的nginx-ingress controller应用暴露到公网：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-ingress</span>       <span class="comment">#建议Service使用与nginx-ingress controller对应的Deployment名称相同的名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">     <span class="attr">targetPort:</span> <span class="number">443</span></span><br><span class="line">     <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">     <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-ingress</span></span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：本例使用80和443端口绑定nginx-ingress controller应用</p>
<p>将上述Service定义到ingress.yaml文件，执行如下命令创建对应的Service：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create -f ingress.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="获取公网IP"><a href="#获取公网IP" class="headerlink" title="获取公网IP"></a>获取公网IP</h5><p>等待一段时间，确定Service已经配置完成，并获取Service上配置的External IP字段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get svc -n nginx-ingress</span><br><span class="line"></span><br><span class="line">NAME            TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE</span><br><span class="line">nginx-ingress   LoadBalancer   192.168.58.218   114.67.80.218   80:32436/TCP,443:30110/TCP   3h13m</span><br></pre></td></tr></table></figure>
<p> <strong>说明</strong>：Service的External IP将作为nginx-ingress controller的VIP，为集群中使用nginx-ingress controller的Ingress提供公网访问入口</p>
</li>
<li><h5 id="关联的External-IP作为公网入口IP"><a href="#关联的External-IP作为公网入口IP" class="headerlink" title="关联的External IP作为公网入口IP"></a>关联的External IP作为公网入口IP</h5><p>最后，在Ingress controller的Deployment部署文件nginx-ingress.yaml中增加一对环境变量”-args -external-service=nginx-ingress”,配置Ingress controller使用Service名称关联的External IP作为公网入口IP：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">args:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">-nginx-configmaps=$(POD_NAMESPACE)/nginx-config</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">-default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">-external-service=nginx-ingress</span>       <span class="comment">#新增内容</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment/nginx-ingress.yaml        #重新部署nginx-ingress controller</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="验证Pod"><a href="#验证Pod" class="headerlink" title="验证Pod"></a>验证Pod</h5><p>执行如下命令确定nginx-ingress controller相关的Pod运行正常，即可完成nginx ingress controller部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n nginx-ingress</span><br><span class="line"></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-f67b87b88-5cspd   1/1     Running   0          3h11m</span><br><span class="line">nginx-ingress-f67b87b88-n7qnw   1/1     Running   0          3h13m</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="示例应用"><a href="#示例应用" class="headerlink" title="示例应用"></a>示例应用</h4><p>例如：配置www2.veer.com的ingress配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cms-veer</span>       <span class="comment"># 变量：名字</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www2.veer.com</span>   <span class="comment"># 变量：url</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">node-vcg-veer-pre</span> <span class="comment"># 变量：后端应用service</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">80</span>      <span class="comment"># 变量：后端应用service端口</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">www2.veer.com</span>       </span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">veer-https</span>    <span class="comment"># 变量：ssl证书</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s内pod访问本集群ingress-ip异常</title>
    <url>/k8s-pod-can-t-access-ingress-slb/</url>
    <content><![CDATA[<p><img src="/k8s-pod-can-t-access-ingress-slb/./z.jpg" alt><br><span id="more"></span></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在Kubernetes集群中有部分节点能访问集群暴露出去的Local类型SLB，但是也有部分节点不能访问，且Ingress出现该问题较多。</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>SLB设置了<code>externalTrafficPolicy: Local</code>类型，这种类型的SLB地址只有在Node中部署了对应的后端Pod，才能被访问。因为SLB的地址是集群外使用，如果集群节点和Pod不能直接访问，请求不会到SLB，会被当作Service的扩展IP地址，被kube-proxy的iptables或ipvs转发。</p>
<p>如果刚好集群节点或者Pod所在的节点上没有相应的后端服务Pod，就会发生网络不通的问题，而如果有相应的后端服务Pod，是可以正常访问。相关问题的更多信息请参见<a href="https://github.com/kubernetes/kubernetes/issues/66607">kube-proxy将external-lb的地址添加到节点本地iptables规则</a>。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>阿里云提醒您：</p>
<ul>
<li>如果您对实例或数据有修改、变更等风险操作，务必注意实例的容灾、容错能力，确保数据安全。</li>
<li>如果您对实例（包括但不限于ECS、RDS）等进行配置与数据修改，建议提前创建快照或开启RDS日志备份等功能。</li>
<li>如果您在阿里云平台授权或者提交过登录账号、密码等安全信息，建议您及时修改。</li>
</ul>
</blockquote>
<p>若出现该问题，可以参见以下方法解决问题，推荐您使用第一种方法。</p>
<ul>
<li><p>在Kubernetes集群内通过ClusterIP或者服务名访问。<br>其中Ingress的服务名为：<code>nginx-ingress-lb.kube-system</code></p>
</li>
<li><p>将LoadBalancer的Service中的externalTrafficPolicy修改为Cluster，但是在应用中会丢失源IP，Ingress的服务修改命令如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl edit svc nginx-ingress-lb -n kube-system</span><br></pre></td></tr></table></figure>
</li>
<li><p>若是Terway的ENI或者ENI多IP的集群，将LoadBalancer的Service中的externalTrafficPolicy修改为Cluster，并且添加ENI直通的annotation，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">annotation： service.beta.kubernetes.io/backend-type：&quot;eni&quot;</span><br></pre></td></tr></table></figure>
<p>，具体格式如下，可以保留源IP，并且在集群内访问也没有问题。详细信息请参见</p>
<p>通过负载均衡（Server Load Balancer）访问服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    service.beta.kubernetes.io/backend-type: eni</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-ingress-lb</span><br><span class="line">  name: nginx-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  externalTrafficPolicy: Cluster</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Katalon-自动化测试</title>
    <url>/katalon/</url>
    <content><![CDATA[<p>API测试是成功实现持续集成，并保持DevOps实践的重要组成部分。</p>
<span id="more"></span>
<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>katalon官网：<a href="https://www.katalon.com/">https://www.katalon.com/</a></p>
<p>Katalon Studio是一个开源、全面且健壮的测试自动化工具，可用于测试API、Web应用、桌面端、以及移动应用程序。使用Katalon Studio的主要好处是：它能够测试运行在多个操作系统(如：Mac OS、Linux和Windows)上的业务级别(如：API、Web服务)和UI。Katalon Studio支持带有DELETE、PUT、POST等多种命令，以及参数化的RESTful和SOAP请求。</p>
<p>为了方便部署，Katalon Studio将所有插件、ALM集成和框架打入了一个包。除了免费开源，Katalon也为企业和小型团队提供了付费的支持服务。</p>
<h3 id="容器化"><a href="#容器化" class="headerlink" title="容器化"></a>容器化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -t --rm katalonstudio/katalon cat /katalon/version</span><br><span class="line"></span><br><span class="line">+ echo Entrypoint</span><br><span class="line">Entrypoint</span><br><span class="line">+ &#x27;[&#x27; -z &#x27;&#x27; &#x27;]&#x27;</span><br><span class="line">+ exec cat /katalon/version</span><br><span class="line">Mozilla Firefox 81.0</span><br><span class="line">Katalon Studio</span><br></pre></td></tr></table></figure>
<h4 id="容器镜像地址："><a href="#容器镜像地址：" class="headerlink" title="容器镜像地址："></a>容器镜像地址：</h4><p><code>katalonstudio/katalon</code>，不同版本替换tag即可，比如<code>katalonstudio/katalon:7.9.0</code></p>
<h4 id="环境变量："><a href="#环境变量：" class="headerlink" title="环境变量："></a>环境变量：</h4><p>由于部分UI测试时，图形界面的尺寸要求，需要在Dockerfile中配置环境变量<code>ENV DISPLAY_CONFIGURATION 1920x1800x24</code></p>
<h4 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h4><p><code>katalon-execute.sh -browserType=&quot;Firefox&quot; -retry=0 -statusDelay=15 -testSuitePath=&quot;Test Suites/vcg&quot; -apikey=&quot;fa9df24d-3637-476a-892e-9bfc463648be&quot;</code></p>
<p>可将Firefox浏览器换为Chrome</p>
<p>根据项目不同，修改testSuitePath参数和apikey参数</p>
<h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="https://github.com/katalon-studio/docker-images">https://github.com/katalon-studio/docker-images</a></p>
<p><a href="https://github.com/katalon-studio-samples/ci-samples">https://github.com/katalon-studio-samples/ci-samples</a></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件商店：<a href="https://store.katalon.com/">https://store.katalon.com/</a></p>
<p>安装<a href="https://store.katalon.com/product/59/Basic-Report">Basic Report</a>插件，可实现产出HTML、CSV、PDF格式的报告</p>
<p><img src="/katalon/./katalon01.png" alt></p>
<h3 id="开启远程报告分析"><a href="#开启远程报告分析" class="headerlink" title="开启远程报告分析"></a>开启远程报告分析</h3><p><img src="/katalon/./katalon02.png" alt></p>
<h3 id="集成到云效"><a href="#集成到云效" class="headerlink" title="集成到云效"></a>集成到云效</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> katalonstudio/katalon:<span class="number">7.9</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> DISPLAY_CONFIGURATION <span class="number">1920</span>x1800x24</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> .step/*.sh /root/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> katalon/step.sh /root/step.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> katalon/jq /usr/bin/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /root/*.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/root/entry.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">step.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -e </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统提供参数，从流水线上下文获取</span></span><br><span class="line">echo [INFO] PIPELINE_ID=$PIPELINE_ID       # 流水线ID</span><br><span class="line">echo [INFO] PIPELINE_NAME=$PIPELINE_NAME   # 流水线名称</span><br><span class="line">echo [INFO] BUILD_NUMBER=$BUILD_NUMBER     # 流水线运行实例编号</span><br><span class="line">echo [INFO] EMPLOYEE_ID=$EMPLOYEE_ID       # 触发流水线用户ID</span><br><span class="line">echo [INFO] WORK_SPACE=$WORK_SPACE         # /root/workspace容器中目录</span><br><span class="line">echo [INFO] PROJECT_DIR=$PROJECT_DIR       # 代码库根路径，默认为/root/workspace/code</span><br><span class="line">echo [INFO] PLUGIN_DIR=$PLUGIN_DIR         # 插件路径，默认为/root/workspace/plugins</span><br><span class="line">echo [INFO] BUILD_JOB_ID=$BUILD_JOB_ID     # build-service 任务ID</span><br><span class="line"></span><br><span class="line">cd $PROJECT_DIR</span><br><span class="line"></span><br><span class="line">bash -c &quot;$STEP_COMMAND&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#step.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">vcg-katalon</span></span><br><span class="line"><span class="attr">sign:</span> <span class="string">vcg-katalon</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">vcg-katalon</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">registry.cn-beijing.aliyuncs.com/vcg-open/katalon:3.0</span></span><br><span class="line"><span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">label:</span> <span class="string">执行命令</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">STEP_COMMAND</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">shell</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      cat /katalon/version</span></span><br><span class="line"><span class="string">      pwd</span></span><br><span class="line"><span class="string">      ls -al</span></span><br><span class="line"><span class="string">      #katalon-execute.sh -browserType=&quot;Firefox&quot; -retry=0 -statusDelay=15 -testSuitePath=&quot;Test Suites/firstTest&quot; -apikey=&quot;23149772-bb98-4692-8135-2cc423212e08&quot;</span></span><br><span class="line"><span class="string">      katalon-execute.sh -browserType=&quot;Firefox&quot; -retry=0 -statusDelay=15 -testSuitePath=&quot;Test Suites/vcg&quot; -apikey=&quot;fa9df24d-3637-476a-892e-9bfc463648be&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/katalon/./katalon03.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>kubectl-get-all-api-resources</title>
    <url>/kubectl-get-all-api-resources/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl api-resources</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME                              SHORTNAMES   APIGROUP                       NAMESPACED   KIND</span><br><span class="line">bindings                                                                      true         Binding</span><br><span class="line">componentstatuses                 cs                                          false        ComponentStatus</span><br><span class="line">configmaps                        cm                                          true         ConfigMap</span><br><span class="line">endpoints                         ep                                          true         Endpoints</span><br><span class="line">events                            ev                                          true         Event</span><br><span class="line">limitranges                       limits                                      true         LimitRange</span><br><span class="line">namespaces                        ns                                          false        Namespace</span><br><span class="line">nodes                             no                                          false        Node</span><br><span class="line">persistentvolumeclaims            pvc                                         true         PersistentVolumeClaim</span><br><span class="line">persistentvolumes                 pv                                          false        PersistentVolume</span><br><span class="line">pods                              po                                          true         Pod</span><br><span class="line">podtemplates                                                                  true         PodTemplate</span><br><span class="line">replicationcontrollers            rc                                          true         ReplicationController</span><br><span class="line">resourcequotas                    quota                                       true         ResourceQuota</span><br><span class="line">secrets                                                                       true         Secret</span><br><span class="line">serviceaccounts                   sa                                          true         ServiceAccount</span><br><span class="line">services                          svc                                         true         Service</span><br><span class="line">mutatingwebhookconfigurations                  admissionregistration.k8s.io   false        MutatingWebhookConfiguration</span><br><span class="line">validatingwebhookconfigurations                admissionregistration.k8s.io   false        ValidatingWebhookConfiguration</span><br><span class="line">batchreleases                                  alicloud.com                   true         BatchRelease</span><br><span class="line">customresourcedefinitions         crd,crds     apiextensions.k8s.io           false        CustomResourceDefinition</span><br><span class="line">apiservices                                    apiregistration.k8s.io         false        APIService</span><br><span class="line">controllerrevisions                            apps                           true         ControllerRevision</span><br><span class="line">daemonsets                        ds           apps                           true         DaemonSet</span><br><span class="line">deployments                       deploy       apps                           true         Deployment</span><br><span class="line">replicasets                       rs           apps                           true         ReplicaSet</span><br><span class="line">statefulsets                      sts          apps                           true         StatefulSet</span><br><span class="line">meshpolicies                                   authentication.istio.io        false        MeshPolicy</span><br><span class="line">policies                                       authentication.istio.io        true         Policy</span><br><span class="line">tokenreviews                                   authentication.k8s.io          false        TokenReview</span><br><span class="line">localsubjectaccessreviews                      authorization.k8s.io           true         LocalSubjectAccessReview</span><br><span class="line">selfsubjectaccessreviews                       authorization.k8s.io           false        SelfSubjectAccessReview</span><br><span class="line">selfsubjectrulesreviews                        authorization.k8s.io           false        SelfSubjectRulesReview</span><br><span class="line">subjectaccessreviews                           authorization.k8s.io           false        SubjectAccessReview</span><br><span class="line">horizontalpodautoscalers          hpa          autoscaling                    true         HorizontalPodAutoscaler</span><br><span class="line">cronjobs                          cj           batch                          true         CronJob</span><br><span class="line">jobs                                           batch                          true         Job</span><br><span class="line">certificatesigningrequests        csr          certificates.k8s.io            false        CertificateSigningRequest</span><br><span class="line">certificates                      cert,certs   certmanager.k8s.io             true         Certificate</span><br><span class="line">challenges                                     certmanager.k8s.io             true         Challenge</span><br><span class="line">clusterissuers                                 certmanager.k8s.io             false        ClusterIssuer</span><br><span class="line">issuers                                        certmanager.k8s.io             true         Issuer</span><br><span class="line">orders                                         certmanager.k8s.io             true         Order</span><br><span class="line">adapters                                       config.istio.io                true         adapter</span><br><span class="line">attributemanifests                             config.istio.io                true         attributemanifest</span><br><span class="line">handlers                                       config.istio.io                true         handler</span><br><span class="line">httpapispecbindings                            config.istio.io                true         HTTPAPISpecBinding</span><br><span class="line">httpapispecs                                   config.istio.io                true         HTTPAPISpec</span><br><span class="line">instances                                      config.istio.io                true         instance</span><br><span class="line">quotaspecbindings                              config.istio.io                true         QuotaSpecBinding</span><br><span class="line">quotaspecs                                     config.istio.io                true         QuotaSpec</span><br><span class="line">rules                                          config.istio.io                true         rule</span><br><span class="line">templates                                      config.istio.io                true         template</span><br><span class="line">leases                                         coordination.k8s.io            true         Lease</span><br><span class="line">bgpconfigurations                              crd.projectcalico.org          false        BGPConfiguration</span><br><span class="line">clusterinformations                            crd.projectcalico.org          false        ClusterInformation</span><br><span class="line">felixconfigurations                            crd.projectcalico.org          false        FelixConfiguration</span><br><span class="line">globalnetworkpolicies                          crd.projectcalico.org          false        GlobalNetworkPolicy</span><br><span class="line">globalnetworksets                              crd.projectcalico.org          false        GlobalNetworkSet</span><br><span class="line">hostendpoints                                  crd.projectcalico.org          false        HostEndpoint</span><br><span class="line">ippools                                        crd.projectcalico.org          false        IPPool</span><br><span class="line">networkpolicies                                crd.projectcalico.org          true         NetworkPolicy</span><br><span class="line">events                            ev           events.k8s.io                  true         Event</span><br><span class="line">daemonsets                        ds           extensions                     true         DaemonSet</span><br><span class="line">deployments                       deploy       extensions                     true         Deployment</span><br><span class="line">ingresses                         ing          extensions                     true         Ingress</span><br><span class="line">networkpolicies                   netpol       extensions                     true         NetworkPolicy</span><br><span class="line">podsecuritypolicies               psp          extensions                     false        PodSecurityPolicy</span><br><span class="line">replicasets                       rs           extensions                     true         ReplicaSet</span><br><span class="line">alertproviders                                 flagger.app                    true         AlertProvider</span><br><span class="line">canaries                                       flagger.app                    true         Canary</span><br><span class="line">metrictemplates                                flagger.app                    true         MetricTemplate</span><br><span class="line">istiogateways                                  istio.alibabacloud.com         true         IstioGateway</span><br><span class="line">istios                                         istio.alibabacloud.com         true         Istio</span><br><span class="line">istioupgrades                                  istio.alibabacloud.com         true         IstioUpgrade</span><br><span class="line">remoteistios                                   istio.alibabacloud.com         true         RemoteIstio</span><br><span class="line">kialis                                         kiali.io                       true         Kiali</span><br><span class="line">aliyunlogconfigs                               log.alibabacloud.com           true         AliyunLogConfig</span><br><span class="line">nodes                                          metrics.k8s.io                 false        NodeMetrics</span><br><span class="line">pods                                           metrics.k8s.io                 true         PodMetrics</span><br><span class="line">prometheusrules                                monitoring.coreos.com          true         PrometheusRule</span><br><span class="line">servicemonitors                                monitoring.coreos.com          true         ServiceMonitor</span><br><span class="line">monitoringdashboards                           monitoring.kiali.io            true         MonitoringDashboard</span><br><span class="line">destinationrules                  dr           networking.istio.io            true         DestinationRule</span><br><span class="line">envoyfilters                                   networking.istio.io            true         EnvoyFilter</span><br><span class="line">gateways                          gw           networking.istio.io            true         Gateway</span><br><span class="line">serviceentries                    se           networking.istio.io            true         ServiceEntry</span><br><span class="line">sidecars                                       networking.istio.io            true         Sidecar</span><br><span class="line">virtualservices                   vs           networking.istio.io            true         VirtualService</span><br><span class="line">ingresses                         ing          networking.k8s.io              true         Ingress</span><br><span class="line">networkpolicies                   netpol       networking.k8s.io              true         NetworkPolicy</span><br><span class="line">runtimeclasses                                 node.k8s.io                    false        RuntimeClass</span><br><span class="line">poddisruptionbudgets              pdb          policy                         true         PodDisruptionBudget</span><br><span class="line">podsecuritypolicies               psp          policy                         false        PodSecurityPolicy</span><br><span class="line">clusterrolebindings                            rbac.authorization.k8s.io      false        ClusterRoleBinding</span><br><span class="line">clusterroles                                   rbac.authorization.k8s.io      false        ClusterRole</span><br><span class="line">rolebindings                                   rbac.authorization.k8s.io      true         RoleBinding</span><br><span class="line">roles                                          rbac.authorization.k8s.io      true         Role</span><br><span class="line">authorizationpolicies                          rbac.istio.io                  true         AuthorizationPolicy</span><br><span class="line">clusterrbacconfigs                             rbac.istio.io                  false        ClusterRbacConfig</span><br><span class="line">rbacconfigs                                    rbac.istio.io                  true         RbacConfig</span><br><span class="line">servicerolebindings                            rbac.istio.io                  true         ServiceRoleBinding</span><br><span class="line">serviceroles                                   rbac.istio.io                  true         ServiceRole</span><br><span class="line">priorityclasses                   pc           scheduling.k8s.io              false        PriorityClass</span><br><span class="line">authorizationpolicies                          security.istio.io              true         AuthorizationPolicy</span><br><span class="line">csidrivers                                     storage.k8s.io                 false        CSIDriver</span><br><span class="line">csinodes                                       storage.k8s.io                 false        CSINode</span><br><span class="line">storageclasses                    sc           storage.k8s.io                 false        StorageClass</span><br><span class="line">volumeattachments                              storage.k8s.io                 false        VolumeAttachment</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>kubernetes-dashboard</title>
    <url>/kubernetes-dashboard/</url>
    <content><![CDATA[<p><img src="/kubernetes-dashboard/./z.jpg" alt></p>
<p>Kubernetes Dashboard是用于Kubernetes集群的基于web的通用UI。它允许用户管理在集群中运行的应用程序并对其进行故障排除，以及管理集群本身。</p>
<span id="more"></span>
<p>GitHub地址：<a href="https://github.com/kubernetes/dashboard">https://github.com/kubernetes/dashboard</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于网络原因，将镜像源修改为：registry.cn-beijing.aliyuncs.com/zhaohongye/dashboard:v2.1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除node节点的标签选择</span></span><br><span class="line"><span class="comment"># nodeSelector:</span></span><br><span class="line"><span class="comment">#    &quot;kubernetes.io/os&quot;: linux</span></span><br></pre></td></tr></table></figure>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>将API server监听在本地的8001端口上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl proxy</span><br></pre></td></tr></table></figure>
<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>获取token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system describe  secret  dashboard-admin-token-mzp96</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login">http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</a></p>
<p><img src="/kubernetes-dashboard/./kubernetes-dashboard01.png" alt></p>
<p><img src="/kubernetes-dashboard/./kubernetes-dashboard.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>ab-Apache_HTTP压测工具</title>
    <url>/linux-ab/</url>
    <content><![CDATA[<h4 id="官网："><a href="#官网：" class="headerlink" title="官网："></a>官网：</h4><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html">https://httpd.apache.org/docs/2.4/programs/ab.html</a></p>
<h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题。</p>
<p>性能测试工具目前最常见的有以下几种：ab、http_load、webbench、siege。今天我们专门来介绍ab。</p>
<p>ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。 </p>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>ab是apachebench命令的缩写。</p>
<p>ab的原理：ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</p>
<p>ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。</p>
<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ops-jenkins-master ~]# ab -V</span><br><span class="line"></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab -help</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-n  在测试会话中所执行的请求个数。默认时，仅执行一个请求。</span><br><span class="line"></span><br><span class="line">-c  一次产生的请求个数。默认是一次一个。</span><br><span class="line"></span><br><span class="line">-t  测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。</span><br><span class="line"></span><br><span class="line">-p  包含了需要POST的数据的文件。</span><br><span class="line"></span><br><span class="line">-P  对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。</span><br><span class="line"></span><br><span class="line">-T  POST数据所使用的Content-type头信息。</span><br><span class="line"></span><br><span class="line">-v  设置显示信息的详细程度-4或更大值会显示头信息，3或更大值可以显示响应代码(404,200等),2或更大值可以显示警告和其他信息。</span><br><span class="line"></span><br><span class="line">-V  显示版本号并退出。</span><br><span class="line"></span><br><span class="line">-w  以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。</span><br><span class="line"></span><br><span class="line">-i  执行HEAD请求，而不是GET。</span><br><span class="line"></span><br><span class="line">-x  设置&lt;table&gt;属性的字符串。</span><br><span class="line"></span><br><span class="line">-X  对请求使用代理服务器。</span><br><span class="line"></span><br><span class="line">-y  设置&lt;tr&gt;属性的字符串。</span><br><span class="line"></span><br><span class="line">-z  设置&lt;td&gt;属性的字符串。</span><br><span class="line"></span><br><span class="line">-C  对请求附加一个Cookie:行。其典型形式是name=value的一个参数对，此参数可以重复。</span><br><span class="line"></span><br><span class="line">-H  对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,&quot;Accept-Encoding:zip/zop;8bit&quot;)。</span><br><span class="line"></span><br><span class="line">-A  对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。</span><br><span class="line"></span><br><span class="line">-h  显示使用方法。</span><br><span class="line"></span><br><span class="line">-d  不显示&quot;percentage served within XX [ms] table&quot;的消息(为以前的版本提供支持)。</span><br><span class="line"></span><br><span class="line">-e  产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经“二进制化”，所以比&#x27;gnuplot&#x27;格式更有用。</span><br><span class="line"></span><br><span class="line">-g  把所有测试结果写入一个&#x27;gnuplot&#x27;或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。</span><br><span class="line"></span><br><span class="line">-i  执行HEAD请求，而不是GET。</span><br><span class="line"></span><br><span class="line">-k  启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。</span><br><span class="line"></span><br><span class="line">-q  如果处理的请求数大于150，ab每处理大约10%或者100个请求时，会在stderr输出一个进度计数。此-q标记可以抑制这些信息。</span><br></pre></td></tr></table></figure>
<h4 id="性能指标："><a href="#性能指标：" class="headerlink" title="性能指标："></a>性能指标：</h4><ul>
<li><p><strong>吞吐率（Requests per second）</strong></p>
<p>概念：服务器并发处理能力的量化描述，单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</p>
<p>计算公式：总请求数 / 处理完成这些请求数所花费的时间，即<br>Request per second = Complete requests / Time taken for tests</p>
</li>
</ul>
<ul>
<li><p><strong>并发连接数（The number of concurrent connections）</strong></p>
<p>概念：某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p>
</li>
</ul>
<ul>
<li><p><strong>并发用户数（The number of concurrent users，Concurrency Level）</strong></p>
<p>概念：要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。</p>
</li>
</ul>
<ul>
<li><p><strong>用户平均请求等待时间（Time per request）</strong></p>
<p>计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即<br>Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</p>
</li>
</ul>
<ul>
<li><p><strong>服务器平均请求等待时间（Time per request: across all concurrent requests）</strong></p>
<p>计算公式：处理完成所有请求数所花费的时间 / 总请求数，即<br>Time taken for / testsComplete requests<br>可以看到，它是吞吐率的倒数。<br>同时，它也=用户平均请求等待时间/并发用户数，即<br>Time per request / Concurrency Level</p>
</li>
</ul>
<h4 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 请求访问 https://www.zhaohongye.com/ ，访问 -n 100次，并发 -c 10次</span></span><br><span class="line"></span><br><span class="line">ab -c 10 -n 100 https://www.zhaohongye.com/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  请求结果</span></span><br><span class="line"></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.zhaohongye.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.12.2         # 服务器软件</span><br><span class="line">Server Hostname:        www.zhaohongye.com   # 域名</span><br><span class="line">Server Port:            443                  # 请求端口号</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256</span><br><span class="line"></span><br><span class="line">Document Path:          /                    # 文件路径</span><br><span class="line">Document Length:        68872 bytes          # 页面字节数</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10                   # 请求并发数</span><br><span class="line">Time taken for tests:   14.797 seconds       # 总访问时间</span><br><span class="line">Complete requests:      100                  # 总请求次数</span><br><span class="line">Failed requests:        0                    # 失败请求次数</span><br><span class="line">Write errors:           0            </span><br><span class="line">Total transferred:      6901400 bytes      # 请求总数据大小（包括header头信息）</span><br><span class="line">HTML transferred:       6887200 bytes      # html页面实际总字节数</span><br><span class="line">Requests per second:    6.76 [#/sec] (mean)   # 每秒多少请求，服务器的吞吐量</span><br><span class="line">Time per request:       1479.677 [ms] (mean)   # 用户平均请求等待时间 </span><br><span class="line">Time per request:       147.968 [ms] (mean, across all concurrent requests)                     # 服务器平均处理时间，也就是服务器吞吐量的倒数 </span><br><span class="line">Transfer rate:          455.48 [Kbytes/sec] received   #每秒获取的数据长度</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        5   12   3.3     12      19</span><br><span class="line">Processing:   156 1429 207.5   1462    1626</span><br><span class="line">Waiting:      155 1426 207.2   1449    1623</span><br><span class="line">Total:        165 1441 207.9   1476    1636</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">   1476   <span class="comment">#50%用户请求在1476ms内返回</span></span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">   1489   <span class="comment">#60%用户请求在1489ms内返回</span></span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">   1524</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">   1572</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">   1594</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">   1635</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">   1636</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">   1636</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">   1636 (longest request)</span></span><br></pre></td></tr></table></figure>
<h4 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -k -c 600 -n 100000 -p 1000.txt -T application/x-www-form-urlencoded -H &quot;api-key:d99caed6d0997c4d3f141249c346e9d4&quot; -H &quot;authorization:Bearer xx&quot; &#x27;http://172.16.237.108/ai/search/photo/wps1&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1000.txt 的内容</span></span><br><span class="line"></span><br><span class="line">img_url=https://goss1.vcg.com/editorial/vcg/400/new/VCG111160779787.jpg&amp;result_size=30&amp;image_type=url</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Linux操作系统加固</title>
    <url>/linux-jiagu/</url>
    <content><![CDATA[<p>本帮助手册旨在指导系统管理人员或安全检查人员进行Linux操作系统的安全合规性检查和加固。<br><span id="more"></span></p>
<blockquote>
<p>引自阿里云<a href="https://help.aliyun.com/knowledge_detail/49809.html">https://help.aliyun.com/knowledge_detail/49809.html</a>&gt;</p>
</blockquote>
<p>本帮助手册旨在指导系统管理人员或安全检查人员进行Linux操作系统的安全合规性检查和加固。</p>
<hr>
<h3 id="1-账号和口令"><a href="#1-账号和口令" class="headerlink" title="1. 账号和口令"></a>1. 账号和口令</h3><h4 id="1-1-禁用或删除无用账号"><a href="#1-1-禁用或删除无用账号" class="headerlink" title="1.1 禁用或删除无用账号"></a>1.1 禁用或删除无用账号</h4><p>减少系统无用账号，降低安全风险。</p>
<p><strong>操作步骤</strong></p>
<ul>
<li>使用命令 <code>userdel &lt;用户名&gt;</code> 删除不必要的账号。</li>
<li>使用命令 <code>passwd -l &lt;用户名&gt;</code> 锁定不必要的账号。</li>
<li>使用命令 <code>passwd -u &lt;用户名&gt;</code> 解锁必要的账号。</li>
</ul>
<h4 id="1-2-检查特殊账号"><a href="#1-2-检查特殊账号" class="headerlink" title="1.2 检查特殊账号"></a>1.2 检查特殊账号</h4><p>检查是否存在空口令和root权限的账号。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li>查看空口令和root权限账号，确认是否存在异常账号：<ul>
<li>使用命令 <code>awk -F: &#39;($2==&quot;&quot;)&#39; /etc/shadow</code> 查看空口令账号。</li>
<li>使用命令 <code>awk -F: &#39;($3==0)&#39; /etc/passwd</code> 查看UID为零的账号。</li>
</ul>
</li>
<li>加固空口令账号：<ul>
<li>使用命令 <code>passwd &lt;用户名&gt;</code> 为空口令账号设定密码。</li>
<li>确认UID为零的账号只有root账号。</li>
</ul>
</li>
</ol>
<h4 id="1-3-添加口令策略"><a href="#1-3-添加口令策略" class="headerlink" title="1.3 添加口令策略"></a>1.3 添加口令策略</h4><p>加强口令的复杂度等，降低被猜解的可能性。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li><p>使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/login.defs</span><br></pre></td></tr></table></figure>
<p>修改配置文件。</p>
<ul>
<li><code>PASS_MAX_DAYS 90 #新建用户的密码最长使用天数</code></li>
<li><code>PASS_MIN_DAYS 0 #新建用户的密码最短使用天数</code></li>
<li><code>PASS_WARN_AGE 7 #新建用户的密码到期提前提醒天数</code></li>
</ul>
</li>
<li><p>使用chage命令修改用户设置。<br>例如，<code>chage -m 0 -M 30 -E 2000-01-01 -W 7 &lt;用户名&gt;</code>表示将此用户的密码最长使用天数设为30，最短使用天数设为0，密码2000年1月1日过期，过期前七天警告用户。</p>
</li>
<li><p>设置连续输错三次密码，账号锁定五分钟。使用命令 <code>vi /etc/pam.d/common-auth</code>修改配置文件，在配置文件中添加 <code>auth required pam_tally.so onerr=fail deny=3 unlock_time=300</code>。</p>
</li>
</ol>
<h4 id="1-4-限制用户su"><a href="#1-4-限制用户su" class="headerlink" title="1.4 限制用户su"></a>1.4 限制用户su</h4><p>限制能su到root的用户。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/pam.d/su</code>修改配置文件，在配置文件中添加行。例如，只允许test组用户su到root，则添加 <code>auth required pam_wheel.so group=test</code>。</p>
<h4 id="1-4-禁止root用户直接登录"><a href="#1-4-禁止root用户直接登录" class="headerlink" title="1.4 禁止root用户直接登录"></a>1.4 禁止root用户直接登录</h4><p>限制root用户直接登录。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li>创建普通权限账号并配置密码,防止无法远程登录;</li>
<li>使用命令 <code>vi /etc/ssh/sshd_config</code>修改配置文件将PermitRootLogin的值改成no，并保存，然后使用<code>service sshd restart</code>重启服务。</li>
</ol>
<h3 id="2-服务"><a href="#2-服务" class="headerlink" title="2. 服务"></a>2. 服务</h3><h4 id="2-1-关闭不必要的服务"><a href="#2-1-关闭不必要的服务" class="headerlink" title="2.1 关闭不必要的服务"></a>2.1 关闭不必要的服务</h4><p>关闭不必要的服务（如普通服务和xinetd服务），降低风险。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令<code>systemctl disable &lt;服务名&gt;</code>设置服务在开机时不自动启动。</p>
<p><strong>说明</strong>： 对于部分老版本的Linux操作系统（如CentOS 6），可以使用命令<code>chkconfig --level &lt;init级别&gt; &lt;服务名&gt; off</code>设置服务在指定init级别下开机时不自动启动。</p>
<h4 id="2-2-SSH服务安全"><a href="#2-2-SSH服务安全" class="headerlink" title="2.2 SSH服务安全"></a>2.2 SSH服务安全</h4><p>对SSH服务进行安全加固，防止暴力破解成功。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vim /etc/ssh/sshd_config</code> 编辑配置文件。</p>
<ul>
<li>不允许root账号直接登录系统。<br>设置 PermitRootLogin 的值为 no。</li>
<li>修改SSH使用的协议版本。<br>设置 Protocol 的版本为 2。</li>
<li>修改允许密码错误次数（默认6次）。<br>设置 MaxAuthTries 的值为 3。</li>
</ul>
<p>配置文件修改完成后，重启sshd服务生效。</p>
<h3 id="3-文件系统"><a href="#3-文件系统" class="headerlink" title="3. 文件系统"></a>3. 文件系统</h3><h4 id="3-1-设置umask值"><a href="#3-1-设置umask值" class="headerlink" title="3.1 设置umask值"></a>3.1 设置umask值</h4><p>设置默认的umask值，增强安全性。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/profile</code> 修改配置文件，添加行 <code>umask 027</code>， 即新创建的文件属主拥有读写执行权限，同组用户拥有读和执行权限，其他用户无权限。</p>
<h4 id="3-2-设置登录超时"><a href="#3-2-设置登录超时" class="headerlink" title="3.2 设置登录超时"></a>3.2 设置登录超时</h4><p>设置系统登录后，连接超时时间，增强安全性。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/profile</code> 修改配置文件，将以 <code>TMOUT=</code> 开头的行注释，设置为<code>TMOUT=180</code>，即超时时间为三分钟。</p>
<h3 id="4-日志"><a href="#4-日志" class="headerlink" title="4. 日志"></a>4. 日志</h3><h4 id="4-1-syslogd日志"><a href="#4-1-syslogd日志" class="headerlink" title="4.1 syslogd日志"></a>4.1 syslogd日志</h4><p>启用日志功能，并配置日志记录。</p>
<p><strong>操作步骤</strong></p>
<p>Linux系统默认启用以下类型日志：</p>
<ul>
<li>系统日志（默认）/var/log/messages</li>
<li>cron日志（默认）/var/log/cron</li>
<li>安全日志（默认）/var/log/secure</li>
</ul>
<p><strong>注意</strong>：部分系统可能使用syslog-ng日志，配置文件为：/etc/syslog-ng/syslog-ng.conf。</p>
<p>您可以根据需求配置详细日志。</p>
<h4 id="4-2-记录所有用户的登录和操作日志"><a href="#4-2-记录所有用户的登录和操作日志" class="headerlink" title="4.2 记录所有用户的登录和操作日志"></a>4.2 记录所有用户的登录和操作日志</h4><p>通过脚本代码实现记录所有用户的登录操作日志，防止出现安全事件后无据可查。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li><p>运行 <code>[root@xxx /]# vim /etc/profile</code>打开配置文件。</p>
</li>
<li><p>在配置文件中输入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history</span><br><span class="line">USER=`whoami`</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;`</span><br><span class="line">if [ &quot;$USER_IP&quot; = &quot;&quot; ]; then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">if [ ! -d /var/log/history ]; then</span><br><span class="line">mkdir /var/log/history</span><br><span class="line">chmod 777 /var/log/history</span><br><span class="line">fi</span><br><span class="line">if [ ! -d /var/log/history/$&#123;LOGNAME&#125; ]; then</span><br><span class="line">mkdir /var/log/history/$&#123;LOGNAME&#125;</span><br><span class="line">chmod 300 /var/log/history/$&#123;LOGNAME&#125;</span><br><span class="line">fi</span><br><span class="line">export HISTSIZE=4096</span><br><span class="line">DT=`date +&quot;%Y%m%d_%H:%M:%S&quot;`</span><br><span class="line">export HISTFILE=&quot;/var/log/history/$&#123;LOGNAME&#125;/$&#123;USER&#125;@$&#123;USER_IP&#125;_$DT&quot;</span><br><span class="line">chmod 600 /var/log/history/$&#123;LOGNAME&#125;/*history* 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 <code>[root@xxx /]# source /etc/profile</code> 加载配置生效。<br><strong>注意</strong>： /var/log/history 是记录日志的存放位置，可以自定义。</p>
</li>
</ol>
<p>通过上述步骤，可以在 /var/log/history 目录下以每个用户为名新建一个文件夹，每次用户退出后都会产生以用户名、登录IP、时间的日志文件，包含此用户本次的所有操作（root用户除外）。</p>
<p>同时，建议您使用OSS服务收集存储日志。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-tree命令</title>
    <url>/linux-tree/</url>
    <content><![CDATA[<p>tree</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>tree命令的中文意思为“树”，功能是以树形结构列出指定目录下的所有内容，包括所有文件、子目录及子目录里的目录和文件。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y tree</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a 显示所有文件和目录。</span><br><span class="line">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">-d 显示目录名称而非内容。</span><br><span class="line">-D 列出文件或目录的更改时间。</span><br><span class="line">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class="line">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot;号。</span><br><span class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class="line">-i 不以阶梯状列出文件或目录名称。</span><br><span class="line">-I 不显示符合范本样式的文件或目录名称。</span><br><span class="line">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class="line">-n 不在文件和目录清单加上色彩。</span><br><span class="line">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class="line">-p 列出权限标示。</span><br><span class="line">-P 只显示符合范本样式的文件或目录名称。</span><br><span class="line">-q 用&quot;?&quot;号取代控制字符，列出文件和目录名称。</span><br><span class="line">-s 列出文件或目录大小。</span><br><span class="line">-t 用文件和目录的更改时间排序。</span><br><span class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ops-jenkins-master test]# tree k8s/</span><br><span class="line">k8s/</span><br><span class="line">└── ingress</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    ├── nginx.tmpl</span><br><span class="line">    └── nginx.tmpl-bak</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Mac网络快捷指令-实现快速开启关闭网络Proxy</title>
    <url>/mac-networksetup-proxy/</url>
    <content><![CDATA[<p><code>networksetup -setwebproxystate &#39;Thunderbolt Ethernet&#39; on</code><br><span id="more"></span></p>
<h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>想快速切换网络代理的状态（on 或 off）</p>
<h3 id="确定方案"><a href="#确定方案" class="headerlink" title="确定方案"></a>确定方案</h3><p><a href="https://support.apple.com/zh-cn/guide/remote-desktop/apdd0c5a2d5/mac">https://support.apple.com/zh-cn/guide/remote-desktop/apdd0c5a2d5/mac</a></p>
<p>从官方帮助手册看到networksetup命令，通过<code>networksetup -help</code>获取命令帮助手册</p>
<p>可以看到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网络代理状态</span></span><br><span class="line">networksetup -getwebproxy &lt;networkservice&gt;</span><br><span class="line">networksetup -getsecurewebproxy &lt;networkservice&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络接口</span></span><br><span class="line">networksetup -listallnetworkservices</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网络代理：http 和 https </span></span><br><span class="line">networksetup -setwebproxy &lt;networkservice&gt; &lt;domain&gt; &lt;port number&gt; &lt;authenticated&gt; &lt;username&gt; &lt;password&gt;</span><br><span class="line">networksetup -setsecurewebproxy &lt;networkservice&gt; &lt;domain&gt; &lt;port number&gt; &lt;authenticated&gt; &lt;username&gt; &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网络代理状态</span></span><br><span class="line">networksetup -setwebproxystate &lt;networkservice&gt; &lt;on off&gt;</span><br><span class="line">networksetup -setsecurewebproxystate &lt;networkservice&gt; &lt;on off&gt;</span><br></pre></td></tr></table></figure>
<h3 id="do-it"><a href="#do-it" class="headerlink" title="do it"></a>do it</h3><h4 id="获取网络接口"><a href="#获取网络接口" class="headerlink" title="获取网络接口"></a>获取网络接口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">networksetup -listallnetworkservices</span><br><span class="line"></span><br><span class="line">    An asterisk (*) denotes that a network service is disabled.</span><br><span class="line">    Wi-Fi</span><br><span class="line">    Thunderbolt Bridge</span><br><span class="line">    Thunderbolt Ethernet</span><br><span class="line">    iPhone USB</span><br><span class="line">    Bluetooth PAN</span><br></pre></td></tr></table></figure>
<h4 id="配置代理信息"><a href="#配置代理信息" class="headerlink" title="配置代理信息"></a>配置代理信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建议是在图形界面-网络管理中配置</span></span><br><span class="line"><span class="comment"># 以下是命令行方式</span></span><br><span class="line"></span><br><span class="line">networksetup -setwebproxy <span class="string">&#x27;Thunderbolt Ethernet&#x27;</span> 172.16.242.47 3128 username password</span><br><span class="line">networksetup -setsecurewebproxy <span class="string">&#x27;Thunderbolt Ethernet&#x27;</span> 172.16.242.47 3128 username password</span><br></pre></td></tr></table></figure>
<h4 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">networksetup -setwebproxystate <span class="string">&#x27;Thunderbolt Ethernet&#x27;</span> on</span><br><span class="line">networksetup -setsecurewebproxystate <span class="string">&#x27;Thunderbolt Ethernet&#x27;</span> on</span><br></pre></td></tr></table></figure>
<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">networksetup -getsecurewebproxy <span class="string">&#x27;Thunderbolt Ethernet&#x27;</span></span><br><span class="line"></span><br><span class="line">    Enabled: Yes</span><br><span class="line">    Server: 172.16.242.47</span><br><span class="line">    Port: 3128</span><br><span class="line">    Authenticated Proxy Enabled: 0</span><br><span class="line">    </span><br><span class="line">networksetup -getwebproxy <span class="string">&#x27;Thunderbolt Ethernet&#x27;</span></span><br><span class="line"></span><br><span class="line">    Enabled: Yes</span><br><span class="line">    Server: 172.16.242.47</span><br><span class="line">    Port: 3128</span><br><span class="line">    Authenticated Proxy Enabled: 0</span><br></pre></td></tr></table></figure>
<h3 id="shuttle实现快捷切换"><a href="#shuttle实现快捷切换" class="headerlink" title="shuttle实现快捷切换"></a><a href="https://github.com/fitztrev/shuttle">shuttle</a>实现快捷切换</h3><p><a href="https://github.com/fitztrev/shuttle">https://github.com/fitztrev/shuttle</a></p>
<p>.shuttle.json 的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_comments&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;Valid terminals include: &#x27;Terminal.app&#x27; or &#x27;iTerm&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;In the editor value change &#x27;default&#x27; to &#x27;nano&#x27;, &#x27;vi&#x27;, or another terminal based editor.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Hosts will also be read from your ~/.ssh/config or /etc/ssh_config file, if available&quot;</span>,</span><br><span class="line">    <span class="string">&quot;For more information on how to configure, please see http://fitztrev.github.io/shuttle/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;editor&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;launch_at_login&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;terminal&quot;</span>: <span class="string">&quot;iTerm.app&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iTerm_version&quot;</span>: <span class="string">&quot;nightly&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;default_theme&quot;</span>: <span class="string">&quot;Homebrew&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;open_in&quot;</span>: <span class="string">&quot;new&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;show_ssh_config_hosts&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;ssh_config_ignore_hosts&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;ssh_config_ignore_keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;hosts&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Proxy&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cmd&quot;</span>: <span class="string">&quot;networksetup -setwebproxystate &#x27;Thunderbolt Ethernet&#x27; on &amp;&amp; networksetup -setsecurewebproxystate &#x27;Thunderbolt Ethernet&#x27; on&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;开启代理&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cmd&quot;</span>: <span class="string">&quot;networksetup -setwebproxystate &#x27;Thunderbolt Ethernet&#x27; off &amp;&amp; networksetup -setsecurewebproxystate &#x27;Thunderbolt Ethernet&#x27; off&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;关闭代理&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;cmd&quot;</span>: <span class="string">&quot;networksetup -getwebproxy &#x27;Thunderbolt Ethernet&#x27; &amp;&amp; networksetup -getsecurewebproxy &#x27;Thunderbolt Ethernet&#x27;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;获取当前状态&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>CentOS7安装MariaDB</title>
    <url>/mariadb-install/</url>
    <content><![CDATA[<p>do what you loveeee<br><span id="more"></span><br>CentOS7安装MariaDB</p>
<p><a href="https://mariadb.com/kb/en/library/yum/">https://mariadb.com/kb/en/library/yum/</a></p>
<h5 id="配置YUM源"><a href="#配置YUM源" class="headerlink" title="配置YUM源"></a>配置YUM源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/MariaDB.repo</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&#x27;ll need the current</span><br><span class="line">password for the root user.  If you&#x27;ve just installed MariaDB, and</span><br><span class="line">you haven&#x27;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &#x27;test&#x27; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] y</span><br><span class="line"> - Dropping test database...</span><br><span class="line"> ... Success!</span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&#x27;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br></pre></td></tr></table></figure>
<h6 id="配置远程登录"><a href="#配置远程登录" class="headerlink" title="配置远程登录"></a>配置远程登录</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 登录数据库</span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line"># 授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;virgo&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>MySQL设计和使用规范</title>
    <url>/mysql-design-and-use-specification/</url>
    <content><![CDATA[<p><img src="/mysql-design-and-use-specification/z.jpg" alt></p>
<span id="more"></span>
<p>转自蓝鲸智云<a href="https://bk.tencent.com/docs/document/6.0/130/7057">https://bk.tencent.com/docs/document/6.0/130/7057</a></p>
<h3 id="库表字段设计规范"><a href="#库表字段设计规范" class="headerlink" title="库表字段设计规范"></a>库表字段设计规范</h3><ul>
<li>【必须】库/表/字段的字符集必须保持一致</li>
<li>【必须】<strong>所有表必须要有主键，主键不能使用更新频繁的列</strong>，以定长类型作为主键或者联合主键的第一字段</li>
<li>【必须】不使用 UUID MD5 HASH 这些值作为主键(一般使用连续递增的值作为主键，比如自增 ID) 【必须】存在自增列的表，自增列上必须存在一个单独的索引，若在复合索引中，自增列必须置于第一位</li>
<li>【建议】建表时应建立好合适的索引，并考虑未来的需求建立保留索引，避免上线后数据量增大再来创建新索引</li>
<li>【建议】建表时可以适当考虑未来功能需求，设计一些保留字段，避免频繁的 DB 增加字段 【建议】避免使用临时表</li>
<li>【建议】表中避免使用外键</li>
<li>【必须】<strong>库名、表名、字段名避免使用 MySQL</strong> <strong>保留字</strong>(如: BACKUP/CACHE/CODE 等) 详细参看官方文档 8.0 版本<a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">https://dev.mysql.com/doc/refman/8.0/en/keywords.html</a></li>
<li>【必须】所有字段均定义为 NOT NULL ，并设置 default 值 (NULL 字段很难优化查询，NULL 字段的索引需要额外空间，NULL 字段的复合索引无效)</li>
<li>【建议】避免单表太多字段, 最好不超过 32 个，尤其是版本不断迭代的情况下，如果字段过多，建议适当考虑分表而不是加字段</li>
<li>【建议】加字段尽量在表的末尾增加，避免使用 after/before 类 alter 操作</li>
<li>【建议】尽可能避免单个 blob 过大，实在不行请分表</li>
<li>【建议】如果使用到 text/blob 类型，单表避免使用超过 8 个 blob 字段；如果 blob 字段内容较多，程序考虑做压缩 (blob 超过 8 个建议使用 row_format=dynamic 行格式来存储)</li>
<li>【建议】整型字段, 如果数据量会很大,请使用 BIGINT,避免字段溢出(流水 ID/道具 ID 等)</li>
<li>【建议】日期字段建议用 DATETIME</li>
<li>【建议】强烈建议使用 TINYINT 来代替 ENUM 类型</li>
<li>【建议】遵循精确原则，用 DECIMAL 代替 FLOAT 和 DOUBLE 存储精确浮点数</li>
<li>【建议】建议使用 INT UNSIGNED 存储 IPV4</li>
<li>【建议】使用 UNSIGNED 存储非负整数</li>
<li>【必须】所有表/字段均应使用 comment 来描述此表/字段所代表的真正含义</li>
<li>【必须】禁止在数据库中存储明文密码，把密码在应用层做加密后存储(非对称算法最佳)</li>
<li>【必须】数据库中不允许存储视频或者照片等大文件，可以将大对象放到磁盘或者其他对象存储上</li>
</ul>
<h3 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h3><ul>
<li>【必须】单表中索引数量不超过 5 个，过多的索引会影响 UPDATE/INSERT/DELETE 操作</li>
<li>【必须】单个索引中的字段数不超过 5 个</li>
<li>【必须】单表中的索引数禁止超过字段数</li>
<li>【必须】重要的 SQL 必须被索引，核心 SQL 优先考虑覆盖索引，避免回表 (说明：索引包含所有满足查询需要的数据的索引就是覆盖索引)</li>
<li>【必须】禁止重复索引(一个字段上建立多个索引) 例如表含有 <code>primary key a</code> <code>uniq index a</code> <code>index a</code>，则字段 a 被建了 3 个重复索引</li>
<li>【必须】禁止冗余索引(多个索引的前缀列相同，或在联合索引中包含了主键的索引) 例如表有索引 idx1(a,b,c)、idx2(a,b)，则 idx2 为冗余索引，因为 idx1 已经包含 idx2</li>
<li>【必须】<code>UPDATE/DELETE</code> 语句的 <code>WHERE</code> 条件列；<code>ORDER BY、GROUP BY、DISTINCT</code>的字段；多表关联的 JOIN 字段都应该要有索引</li>
<li>【必须】区分度最大的字段放在前面，符合最左前缀的特点建立索引</li>
<li>【必须】不在索引列进行数学运算和函数运算，否则无法使用索引/导致全表扫描。例子: <code>SELECT name FROM class WHERE ABS(score) &gt; 80;</code></li>
<li>【必须】不在低基数列上建立索引，例如“性别”、布尔值的列</li>
<li>【必须】索引字段的默认值不能为 NULL ，要改为其他的默认值，因 NULL 值对查询效率影响很大</li>
<li>【知会】对字符串使用前缀索引，前缀索引长度不超过 8 个字符，但在 ORDER BY 或 GROUP BY 中使用不到前缀索引。建立前缀索引的语法：<code>ALTER TABLE table_name ADD KEY(column_name(prefix_length));</code></li>
<li>【知会】尽量不在 BLOB/TEXT 等字段上建立索引，且 BLOB 和 TEXT 类型的列只能创建前缀索引</li>
<li>【知会】合理创建联合索引(避免冗余)，减少维护索引的 IO 开销</li>
<li>【知会】使用不等于 (!=、&lt;&gt;、not in 、not like 等) 的时候，MYSQL 无法使用索引</li>
<li>【知会】使用 LIKE 操作的时候 where 条件以%开始 (如‘%abc’)时，MYSQL 无法使用索引，使用通配符尽量不要放在开头</li>
<li>【知会】多表关联中 join 条件字段类型不一致的时候无法使用索引</li>
</ul>
<h3 id="SQL-语句设计规范"><a href="#SQL-语句设计规范" class="headerlink" title="SQL 语句设计规范"></a>SQL 语句设计规范</h3><ul>
<li>【必须】MySQL 不擅长数学计算，不要把大计算量的 SQL 放在 MySQL 中执行。 如：统计/计算类操作避免从 DB 中直接计算</li>
<li>【必须】单次查询的结果集行数不要过多(控制在几百几千行)，如果结果集确实很多，注意控制查询频率(避免对 DB 机器的流量/IO/CPU 等产生压力)</li>
<li>【必须】避免使用 <code>CREATE table AS SELECT * FROM ...</code>的操作</li>
<li>【必须】程序层避免使用 <code>INSERT INTO … SELECT *</code></li>
<li>【必须】不要用 <code>SELECT * FROM</code>，查询哪几个字段就 SELECT 几个字段</li>
<li>【必须】业务代码中事务及时提交，避免产生没必要的锁等待</li>
<li>【必须】SQL 中使用到 OR 的改写为用 IN()，且 in 的值最好不超过 1000 个</li>
<li>【必须】SQL 中避免隐式转换，会导致索引失效(这是一个大坑)，如：数值类型禁止加引号；字符串类型必须加引号</li>
<li>【必须】充分利用前缀索引，而且要符合最左前缀原则</li>
<li>【必须】不使用%前导的查询，如<code>like “%abc&quot;</code>，会导致索引失效</li>
<li>【必须】不使用负向查询，如 NOT IN、NOT LIKE、!=、&lt;&gt;会导致无法使用索引，引起全表扫描，并且会把 NULL 查出来</li>
<li>【必须】UPDATE、DELETE 语句必须使用 WHERE 条件</li>
<li>【必须】清理历史数据时，不要一次清理过多，建议使用<code>DELETE … LIMIT N</code>分批清理</li>
<li>【必须】统计行数使用<code>COUNT(*)</code>，避免使用 COUNT(app)这样的操作</li>
<li>【必须】INSERT 语句必须指定字段列表，禁止使用<code>INSERT INTO TABLE()</code></li>
<li>【必须】禁止使用<code>ORDER BY RAND()</code></li>
<li>【建议】避免使用 JOIN 联表操作</li>
<li>【建议】避免使用触发器、函数、存储过程、event 等</li>
<li>【建议】如果确认合并的两个结果集中不包含重复的数据，那么请使用 UNION ALL 而不是 UNION</li>
<li>【建议】减少与数据库交互次数，尽量采用批处理 SQL 语句</li>
<li>【必须】防止 SQL 注入，程序应对传入的参数进行严格校验，正确过滤字符，而且避免使用动态拼装 SQL</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-主从复制原理</title>
    <url>/mysql-master-slave/</url>
    <content><![CDATA[<p><img src="/mysql-master-slave/./mysql01.png" alt></p>
<p>在大规模的数据库应用中，通过主从复制可以提高数据库系统的对外服务能力。</p>
<span id="more"></span>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MySQL主从复制也可以称为MySQL主从同步，它是构建数据库高可用集群架构的基础。</p>
<p>它通过将一台主机的数据复制到其他一台或多台主机上，并重新应用relay log中的SQL语句来实现复制功能。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>实时灾备</li>
<li>读写分离</li>
<li>高可用</li>
<li>平滑升级</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>主服务数据库启用二级制日志，主服务器上的修改保存至本地二进制日志。</p>
<p>Master接收到来自Slave的IO线程的请求后，通过负责复制的IO线程根据请求信息读取指定日志位置之后的日志信息，返回给Slave端的IO线程。返回信息中除了日志所包含的信息之外，还包括本次反馈的信息在Master端的Binary Log文件的名称以及在Binary Log中的位置。</p>
<p>Slave的IO线程接受到信息后，将接收到的日志内容依次写入Slave端的Realy Log（中继日志）文件（mysql-realy-lin.xxxxxx）的最末端，并将读取到的Master端的bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚地告诉Master “我需要从某个bin-log”的哪个位置开始往后的日志内容，请发给我”。</p>
<p>Slave的SQL线程检测到Relay Log中新增加了内容后，会马上解析该Log文件中的内容成为在Master端真实执行时候的那些可执行的Query语句，并在自身执行这些Query。这样，实际上就是在Master端和Slave端都执行了同样的Query，所以两端的数据是完成一样的。</p>
<p>原理图</p>
<p><img src="/mysql-master-slave/./mysql02.png" alt></p>
<p><strong>也就是说：</strong></p>
<ul>
<li>从库会生成两个线程,一个I/O线程,一个SQL线程;</li>
<li>I/O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中;</li>
<li>主库会生成一个log dump线程,用来给从库I/O线程传binlog;</li>
<li>SQL线程,会读取relay log文件中的日志,并解析成sql语句逐一执行;</li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus手动上传依赖包</title>
    <url>/nexus-upload-jar/</url>
    <content><![CDATA[<p>Nexus是一个强大的Maven仓库管理器，它极大地简化了自己内部仓库的维护和外部仓库的访问。<br><span id="more"></span><br>Nexus手动上传依赖包</p>
<ol>
<li>选择仓库Repositories</li>
<li>Artifact Upload，填写信息，选择文件</li>
<li>验证</li>
</ol>
<p><img src="/nexus-upload-jar/./WechatIMG1.png" alt="WechatIMG1"></p>
<p><img src="/nexus-upload-jar/./WechatIMG2.png" alt="WechatIMG2"></p>
]]></content>
  </entry>
  <entry>
    <title>Nginx-日志切割</title>
    <url>/nginx-log-qiege-shell/</url>
    <content><![CDATA[<p>nginx日志按天进行切割，通过写shell脚本，创建以日期命名文件</p>
<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义nginx 日志路径</span></span><br><span class="line">LOG_PATH=&quot;/var/gb/logs/&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义nginx 访问日志文件名称</span></span><br><span class="line">ACCESS_LOG=&quot;access.log&quot;</span><br><span class="line">ERROR_LOG=&quot;error.log&quot;</span><br><span class="line"></span><br><span class="line">for i in `find  $LOG_PATH -name &quot;$ACCESS_LOG&quot;`; do</span><br><span class="line">    cd $(dirname $i)</span><br><span class="line">    # 切割access日志</span><br><span class="line">    if [[ -f $ACCESS_LOG ]]; then</span><br><span class="line">        cp &#123;,$(date +%F)-&#125;$&#123;ACCESS_LOG&#125;</span><br><span class="line">        : &gt; $ACCESS_LOG</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    # 如果error日志&gt;20m，切</span><br><span class="line">    if [[ -f $ERROR_LOG ]]; then</span><br><span class="line">        ERROR_SIZE=`ls -l $ERROR_LOG | awk &#x27;&#123; print $5 &#125;&#x27;`</span><br><span class="line">        if [[ $ERROR_SIZE -gt 20971520 ]]; then</span><br><span class="line">            cp &#123;,$(date +%F)-&#125;$&#123;ERROR_LOG&#125;</span><br><span class="line">            : &gt; $&#123;ERROR_LOG&#125;</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找nginx 日志目录下7天前的日志并删除</span></span><br><span class="line">find $&#123;LOG_PATH&#125; -type f -name &quot;*-$&#123;ACCESS_LOG&#125;&quot; -mtime +7 -delete</span><br><span class="line">find $&#123;LOG_PATH&#125; -type f -name &quot;*-$&#123;ERROR_LOG&#125;&quot;  -mtime +7 -delete</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Nginx反向代理demo</title>
    <url>/nginx-proxy-demo/</url>
    <content><![CDATA[<p>Nginx 反向代理配置Demo</p>
<span id="more"></span>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http --&gt; https</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> report.visualchina.com;</span><br><span class="line">	<span class="attribute">rewrite</span>  (.*) https://$host$request_uri;  <span class="comment"># 返回302</span></span><br><span class="line">  <span class="comment"># return 301 https://$host$request_uri;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">	<span class="attribute">server_name</span> report.visualchina.com;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">access_log</span>  /var/log/nginx/report.visualchina.com.log main;</span><br><span class="line">	<span class="attribute">error_log</span>  /var/log/nginx/report.visualchina.com.<span class="literal">error</span>.log;</span><br><span class="line">	<span class="attribute">ssl_certificate</span> sslfile/visualchina.com-<span class="number">2022</span>.pem;                         <span class="comment">#证书路径</span></span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> sslfile/visualchina.com-<span class="number">2022</span>.key;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        Host $host:$server_port;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Real-IP $remote_addr;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Proto $scheme;</span><br><span class="line">		<span class="attribute">proxy_pass</span>              http://172.16.99.184:37799;</span><br><span class="line">		<span class="attribute">client_max_body_size</span>    <span class="number">10M</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Host $host;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Server $host;</span><br><span class="line">		<span class="comment"># Required for new HTTP-based CLI</span></span><br><span class="line">		<span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">		<span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 指访问域名根目录的话，后面添加 /webroot/decision/</span></span><br><span class="line">	<span class="attribute">if</span> ($request_uri <span class="regexp">~* &quot;^/$&quot;)</span> &#123;</span><br><span class="line">		<span class="attribute">rewrite</span>  (.*) https://$host/webroot/decision/;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx_配置SSL证书</title>
    <url>/nginx-ssl/</url>
    <content><![CDATA[<p>Nginx配置域名的SSL证书<br><span id="more"></span></p>
<ol>
<li><h4 id="获取证书并上传到Ngx服务器"><a href="#获取证书并上传到Ngx服务器" class="headerlink" title="获取证书并上传到Ngx服务器"></a>获取证书并上传到Ngx服务器</h4></li>
</ol>
<ol start="2">
<li><h4 id="检查Ngx是否安装–with-http-ssl-module模块"><a href="#检查Ngx是否安装–with-http-ssl-module模块" class="headerlink" title="检查Ngx是否安装–with-http_ssl_module模块"></a>检查Ngx是否安装–with-http_ssl_module模块</h4></li>
</ol>
<ol start="3">
<li><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4></li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> <span class="regexp">*.zhaohongye.com</span>;</span><br><span class="line">	<span class="comment">#return 301 https://$host$request_uri;</span></span><br><span class="line">	<span class="attribute">return</span> <span class="number">301</span> https://zhaohongye.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">	<span class="attribute">server_name</span> zhaohongye.com www.zhaohongye.com;</span><br><span class="line">	<span class="attribute">access_log</span>  /var/log/nginx/zhy.log main;</span><br><span class="line">	<span class="attribute">error_log</span>  /var/log/nginx/zhy.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">ssl</span> <span class="literal">on</span>;   <span class="comment">#ssl功能开启</span></span><br><span class="line">	<span class="attribute">ssl_certificate</span> sslfile/2027481_zhaohongye.com.pem;</span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> sslfile/2027481_zhaohongye.com.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        Host $host:$server_port;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Real-IP $remote_addr;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Proto $scheme;</span><br><span class="line">		<span class="attribute">proxy_redirect</span>          http:// https://;</span><br><span class="line">		<span class="attribute">proxy_pass</span>              http://127.0.0.1:4000; </span><br><span class="line">		<span class="attribute">client_max_body_size</span>    <span class="number">10M</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Host $host;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Server $host;</span><br><span class="line">		<span class="comment"># Required for new HTTP-based CLI</span></span><br><span class="line">		<span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">		<span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><h4 id="https访问验证"><a href="#https访问验证" class="headerlink" title="https访问验证"></a>https访问验证</h4></li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs-npm-cnpm</title>
    <url>/nodejs-npm-cnpm/</url>
    <content><![CDATA[<p><a href="https://npm.taobao.org/">淘宝NPM镜像官网</a></p>
<h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><h6 id="node-8-16-0"><a href="#node-8-16-0" class="headerlink" title="node:8.16.0"></a>node:8.16.0</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、创建目录</span></span><br><span class="line">mkdir -p /usr/local/lib/nodejs/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、下载安装包</span></span><br><span class="line">wget https://nodejs.org/dist/v8.16.0/node-v8.16.0-linux-x64.tar.xz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、解压</span></span><br><span class="line">tar -xJvf node-v8.16.0-linux-x64.tar.xz -C /usr/local/lib/nodejs/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、配置环境变量</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nodejs</span></span><br><span class="line">VERSION=v8.16.0</span><br><span class="line">DISTRO=linux-x64</span><br><span class="line">export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH</span><br></pre></td></tr></table></figure>
<h5 id="node-10-16-0"><a href="#node-10-16-0" class="headerlink" title="node:10.16.0"></a>node:10.16.0</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、创建目录</span></span><br><span class="line">mkdir -p /usr/local/lib/nodejs/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、下载安装包</span></span><br><span class="line">wget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、解压</span></span><br><span class="line">tar -xJvf node-v10.16.0-linux-x64.tar.xz -C /usr/local/lib/nodejs/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、配置环境变量</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nodejs</span></span><br><span class="line">VERSION=v10.16.0</span><br><span class="line">DISTRO=linux-x64</span><br><span class="line">export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH</span><br></pre></td></tr></table></figure>
<h5 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Open-LDAP容器化部署</title>
    <url>/open-ldap/</url>
    <content><![CDATA[<p>Docker部署<strong>LDAP</strong>，安装<strong>LDAP Account Manager (LAM)</strong>来网页端管理user和group<br><img src="/open-ldap/./ldap-07.png" alt></p>
<span id="more"></span>
<p>OpenLDAP官网：<a href="https://www.openldap.org/">https://www.openldap.org/</a></p>
<p>LDAP Account Manager官网：<a href="https://www.ldap-account-manager.org/lamcms/">https://www.ldap-account-manager.org/lamcms/</a></p>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="Open-LDAP"><a href="#Open-LDAP" class="headerlink" title="Open LDAP"></a>Open LDAP</h4><p>可参考<a href="https://github.com/osixia/docker-openldap">https://github.com/osixia/docker-openldap</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 389:389 --name open-ldap \</span><br><span class="line">	--env LDAP_ORGANISATION=<span class="string">&quot;ops&quot;</span> \</span><br><span class="line">	--env LDAP_DOMAIN=<span class="string">&quot;ops.work&quot;</span> \</span><br><span class="line">	--env LDAP_ADMIN_PASSWORD=<span class="string">&quot;*****&quot;</span> \</span><br><span class="line">	--env LDAP_BASE_DN=<span class="string">&quot;dc=ops,dc=work&quot;</span> \</span><br><span class="line">	--detach osixia/openldap:1.5.0</span><br></pre></td></tr></table></figure>
<h4 id="LAM"><a href="#LAM" class="headerlink" title="LAM"></a>LAM</h4><p>可参考<a href="https://github.com/LDAPAccountManager/lam">https://github.com/LDAPAccountManager/lam</a></p>
<p>环境变量请参考：<a href="https://github.com/LDAPAccountManager/lam/blob/develop/lam-packaging/docker/.env">https://github.com/LDAPAccountManager/lam/blob/develop/lam-packaging/docker/.env</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name ldap-lam \</span><br><span class="line">	--env LDAP_DOMAIN=<span class="string">&quot;ops.work&quot;</span> \</span><br><span class="line">	--env LDAP_BASE_DN=<span class="string">&quot;dc=ops,dc=work&quot;</span> \</span><br><span class="line">	--env LDAP_USERS_DN=<span class="string">&quot;ou=people,dc=ops,dc=work&quot;</span> \</span><br><span class="line">	--env LDAP_GROUPS_DN=<span class="string">&quot;ou=group,dc=ops,dc=work&quot;</span> \</span><br><span class="line">  --env LDAP_SERVER=<span class="string">&quot;ldap://open-lan:389&quot;</span> \</span><br><span class="line">	--env LDAP_USER=<span class="string">&quot;cn=admin,dc=ops,dc=work&quot;</span> \</span><br><span class="line">	--env LAM_PASSWORD=<span class="string">&quot;*****&quot;</span> \</span><br><span class="line">	--detach osixia/openldap:1.5.0</span><br></pre></td></tr></table></figure>
<p>我是部署在k8s里，环境变量配置如下：</p>
<p><img src="/open-ldap/./ldap-01.png" alt></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/open-ldap/./ldap-02.png" alt></p>
<p><img src="/open-ldap/./ldap-03.png" alt></p>
<p><img src="/open-ldap/./ldap-04.png" alt></p>
<p><img src="/open-ldap/./ldap-05.png" alt></p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="/open-ldap/./ldap-06.png" alt></p>
<p><img src="/open-ldap/./ldap-07.png" alt></p>
<p>完工，嘻嘻😝</p>
]]></content>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN</title>
    <url>/openvpn/</url>
    <content><![CDATA[<p><img src="/openvpn/./z.jpg" alt></p>
<span id="more"></span>
<p>OpenVPN是一个用于创建虚拟专用网络(Virtual Private Network)加密通道的免费开源软件。使用OpenVPN可以方便地在家庭、办公场所、住宿酒店等不同网络访问场所之间搭建类似于局域网的专用网络通道。</p>
<p>  使用OpenVPN配合特定的代理服务器，可用于访问Youtube、FaceBook、Twitter等受限网站，也可用于突破公司的网络限制。</p>
<h1 id="服务器端安装及配置"><a href="#服务器端安装及配置" class="headerlink" title="服务器端安装及配置**"></a>服务器端安装及配置**</h1><p>  <strong>1、安装前准备</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;/^SELINUX=/c\SELINUX=disabled&#x27;</span> /etc/selinux/config</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装openssl和lzo，lzo用于压缩通讯数据加快传输速度</span></span><br><span class="line">yum -y install openssl openssl-devel loz </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装epel源</span></span><br><span class="line">rpm -ivh http://mirrors.sohu.com/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">sed -i <span class="string">&#x27;s/^mirrorlist=https/mirrorlist=http/&#x27;</span> /etc/yum.repos.d/epel.repo</span><br></pre></td></tr></table></figure>
<p>  <strong>2、安装及配置OpenVPN和easy-rsa</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装openvpn和easy-rsa</span></span><br><span class="line">yum -y install openvpn easy-rsa</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改vars文件</span></span><br><span class="line">cd /usr/share/easy-rsa/2.0/</span><br><span class="line">vim vars</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改注册信息，比如公司地址、公司名称、部门名称等。</span></span><br><span class="line">export KEY_COUNTRY=&quot;CN&quot;</span><br><span class="line">export KEY_PROVINCE=&quot;Shandong&quot;</span><br><span class="line">export KEY_CITY=&quot;Qingdao&quot;</span><br><span class="line">export KEY_ORG=&quot;MyOrganization&quot;</span><br><span class="line">export KEY_EMAIL=&quot;me@myhost.mydomain&quot;</span><br><span class="line">export KEY_OU=&quot;MyOrganizationalUnit&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化环境变量</span></span><br><span class="line">source vars</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除keys目录下所有与证书相关的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面步骤生成的证书和密钥都在/usr/share/easy-rsa/2.0/keys目录里</span></span><br><span class="line">./clean-all</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成根证书ca.crt和根密钥ca.key（一路按回车即可）</span></span><br><span class="line">./build-ca</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为服务端生成证书和密钥（一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次）</span></span><br><span class="line">./build-key-server server</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每一个登陆的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接，下面建立2份</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为客户端生成证书和密钥（一路按回车，直到提示需要输入y/n时，输入y再按回车，一共两次）</span></span><br><span class="line">./build-key client1</span><br><span class="line">./build-key client2</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建迪菲·赫尔曼密钥，会生成dh2048.pem文件（生成过程比较慢，在此期间不要去中断它）</span></span><br><span class="line">./build-dh</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成ta.key文件（防DDos攻击、UDP淹没等恶意攻击）</span></span><br><span class="line">openvpn --genkey --secret keys/ta.key</span><br></pre></td></tr></table></figure>
<p>  <strong>3、创建服务器端配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在openvpn的配置目录下新建一个keys目录</span></span><br><span class="line">mkdir /etc/openvpn/keys</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将需要用到的openvpn证书和密钥复制一份到刚创建好的keys目录中</span></span><br><span class="line">cp /usr/share/easy-rsa/2.0/keys/&#123;ca.crt,server.&#123;crt,key&#125;,dh2048.pem,ta.key&#125; /etc/openvpn/keys/</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制一份服务器端配置文件模板server.conf到/etc/openvpn/</span></span><br><span class="line">cp /usr/share/doc/openvpn-2.3.2/sample/sample-config-files/server.conf /etc/openvpn/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看server.conf里的配置参数</span></span><br><span class="line">grep &#x27;^[^#;]&#x27; /etc/openvpn/server.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑server.conf</span></span><br><span class="line">vim /etc/openvpn/server.conf</span><br><span class="line"></span><br><span class="line">port 1194</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改成tcp，默认使用udp，如果使用HTTP Proxy，必须使用tcp协议</span></span><br><span class="line">proto tcp</span><br><span class="line">dev tun</span><br><span class="line"><span class="meta">#</span><span class="bash"> 路径前面加keys，全路径为/etc/openvpn/keys/ca.crt</span></span><br><span class="line">ca keys/ca.crt</span><br><span class="line">cert keys/server.crt</span><br><span class="line">key keys/server.key  # This file should be kept secret</span><br><span class="line">dh keys/dh2048.pem</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认虚拟局域网网段，不要和实际的局域网冲突即可</span></span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 10.0.0.0/8是我这台VPN服务器所在的内网的网段，读者应该根据自身实际情况进行修改</span></span><br><span class="line">push &quot;route 10.0.0.0 255.0.0.0&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以让客户端之间相互访问直接通过openvpn程序转发，根据需要设置</span></span><br><span class="line">client-to-client</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果客户端都使用相同的证书和密钥连接VPN，一定要打开这个选项，否则每个证书只允许一个人连接VPN</span></span><br><span class="line">duplicate-cn</span><br><span class="line">keepalive 10 120</span><br><span class="line">tls-auth keys/ta.key 0 # This file is secret</span><br><span class="line">comp-lzo</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenVPN的状态日志，默认为/etc/openvpn/openvpn-status.log</span></span><br><span class="line">status openvpn-status.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenVPN的运行日志，默认为/etc/openvpn/openvpn.log</span> </span><br><span class="line">log-append openvpn.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改成verb 5可以多查看一些调试信息</span></span><br><span class="line">verb 5</span><br></pre></td></tr></table></figure>
<p><strong>4、配置内核和防火墙，启动服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启路由转发功能</span></span><br><span class="line">sed -i &#x27;/net.ipv4.ip_forward/s/0/1/&#x27; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置防火墙，别忘记保存</span></span><br><span class="line">iptables -I INPUT -p tcp --dport 1194 -m comment --comment &quot;openvpn&quot; -j ACCEPT</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</span><br><span class="line">service iptables save</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动openvpn并设置为开机启动</span></span><br><span class="line">service openvpn start</span><br><span class="line">chkconfig openvpn on</span><br></pre></td></tr></table></figure>
<p>  <strong>5、创建客户端配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 复制一份client.conf模板命名为client.ovpn</span></span><br><span class="line">cp /usr/share/doc/openvpn-2.3.2/sample/sample-config-files/client.conf client.ovpn</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑client.ovpn</span></span><br><span class="line">vim client.ovpn</span><br><span class="line"></span><br><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为tcp</span></span><br><span class="line">proto tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenVPN服务器的外网IP和端口</span></span><br><span class="line">remote 203.195.xxx.xxx 1194</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca.crt</span><br><span class="line"><span class="meta">#</span><span class="bash"> client1的证书</span></span><br><span class="line">cert client1.crt</span><br><span class="line"><span class="meta">#</span><span class="bash"> client1的密钥</span></span><br><span class="line">key client1.key</span><br><span class="line">ns-cert-type server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 去掉前面的注释</span></span><br><span class="line">tls-auth ta.key 1</span><br><span class="line">comp-lzo</span><br><span class="line">verb 3</span><br></pre></td></tr></table></figure>
<h1 id="Windows客户端安装及配置"><a href="#Windows客户端安装及配置" class="headerlink" title="Windows客户端安装及配置"></a><strong>Windows客户端安装及配置</strong></h1><p>  客户端系统：Windows7 64位</p>
<p>  内网IP：172.16.4.4</p>
<p>  OpenVPN版本：OpenVPN 2.3.3 Windows 64位</p>
<p>  <strong>1、下载安装OpenVPN</strong></p>
<p>  OpenVPN 2.3.3 Windows 32位 安装文件：</p>
<p>  <a href="http://swupdate.openvpn.org/community/releases/openvpn-install-2.3.3-I002-i686.exe">http://swupdate.openvpn.org/community/releases/openvpn-install-2.3.3-I002-i686.exe</a></p>
<p>  OpenVPN 2.3.3 Windows 64位 安装文件：</p>
<p>  <a href="http://swupdate.openvpn.org/community/releases/openvpn-install-2.3.3-I002-x86_64.exe">http://swupdate.openvpn.org/community/releases/openvpn-install-2.3.3-I002-x86_64.exe</a></p>
<p>  <strong>2、配置client</strong></p>
<p>  将OpenVPN服务器上的client.ovpn、ca.crt、client1.crt、client1.key、ta.key上传到Windows客户端安装目录下的config文件夹（C:\Program Files\OpenVPN\config）</p>
<p>  <strong>3、启动OpenVPN GUI</strong></p>
<p>  在电脑右下角的openvpn图标上右击，选择“Connect”。正常情况下应该能够连接成功，分配正常的IP。</p>
<p>  到OpenVPN服务器上查看客户端的连接情况，查看状态文件/etc/openvpn/openvpn-status.log：</p>
<h1 id="openvpn开启用户密码认证"><a href="#openvpn开启用户密码认证" class="headerlink" title="openvpn开启用户密码认证"></a><strong>openvpn开启用户密码认证</strong></h1><p>一、服务端配置</p>
<p>1、修改openvpn的主配置文件，添加如下内容</p>
<p>cat /etc/openvpn/server.conf |more</p>
<p>#########auth password########</p>
<p>script-security 3 ###–加入脚本处理，如用密码验证</p>
<p>auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env ###指定只用的认证脚本</p>
<p>client-cert-not-required #####不请求客户的CA证书，使用User/Pass验证，如果同时启用证书和密码认证，注释掉该行</p>
<p>username-as-common-name ### 使用客户提供的UserName作为Common Name</p>
<p>############################</p>
<p>2、按照配置文件中的脚本路径放置checkpsw.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> cat checkpsw.sh </span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line">PASSFILE=&quot;/etc/openvpn/psw-file&quot;</span><br><span class="line">LOG_FILE=&quot;/var/log/openvpn-password.log&quot;</span><br><span class="line">TIME_STAMP=`date &quot;+%Y-%m-%d %T&quot;`</span><br><span class="line">if [ ! -r &quot;$&#123;PASSFILE&#125;&quot; ]; then</span><br><span class="line">echo &quot;$&#123;TIME_STAMP&#125;: Could not open password file \&quot;$&#123;PASSFILE&#125;\&quot; for reading.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">CORRECT_PASSWORD=`awk &#x27;!/^;/&amp;&amp;!/^#/&amp;&amp;$1==&quot;&#x27;$&#123;username&#125;&#x27;&quot;&#123;print $2;exit&#125;&#x27; $&#123;PASSFILE&#125;`</span><br><span class="line">if [ &quot;$&#123;CORRECT_PASSWORD&#125;&quot; = &quot;&quot; ]; then</span><br><span class="line">echo &quot;$&#123;TIME_STAMP&#125;: User does not exist: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$&#123;password&#125;&quot; = &quot;$&#123;CORRECT_PASSWORD&#125;&quot; ]; then</span><br><span class="line">echo &quot;$&#123;TIME_STAMP&#125;: Successful authentication: username=\&quot;$&#123;username&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">exit 0</span><br><span class="line">fi</span><br><span class="line">echo &quot;$&#123;TIME_STAMP&#125;: Incorrect password: username=\&quot;$&#123;username&#125;\&quot;, password=\&quot;$&#123;password&#125;\&quot;.&quot; &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class="line">exit 1</span><br></pre></td></tr></table></figure>
<p>3、赋予该脚本执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x checkpsw.sh</span><br></pre></td></tr></table></figure>
<p>4、准备用户名和密码认证文件，用户名和密码用空格隔开，同时确保openvpn启动用户可读取该文件</p>
<p>cat psw-file </p>
<p>client01 123456</p>
<p>client02 123456789</p>
<p>为了安全起见，将psw-file的权限尽量改小</p>
<p>chmod 400 psw-file</p>
<p>chown nobody.nobody psw-file</p>
<p>5、重启openvpn的服务进程</p>
<p>二、修改客户端的配置文件，添加下面一行</p>
<p>auth-user-pass</p>
]]></content>
      <tags>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>提升登录口令安全最佳实践</title>
    <url>/ops-safe-weak-passwords/</url>
    <content><![CDATA[<p>如果您的服务器使用弱口令登录，黑客可能会非法登录您的服务器，窃取服务器数据或破坏服务器。建议您为服务器设置复杂登录口令，并定期提升登录口令的安全性。本文介绍如何提升登录口令的安全性以及常见的修改方法。</p>
<span id="more"></span>
<h2 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h2><p>在服务器系统中使用弱口令可能会造成以下危害：</p>
<ul>
<li>个人用户使用的弱口令可能会被猜解或被破解工具破解，从而泄露个人隐私信息，甚至造成财产损失。</li>
<li>系统管理员使用弱口令可能会导致整个系统被攻击、数据库信息被窃取、业务系统瘫痪，造成所有用户信息的泄露和巨大的经济损失。</li>
</ul>
<p>弱口令会造成用户信息泄露事件和群体性的网络安全危害事件，及时检测出弱口令能够有效防止系统被攻击和信息泄露，提高系统的安全性。云安全中心基线检查功能为您提供了弱口令检测功能，可以及时检测您资产中是否存在弱口令风险。您可以根据以下建议提升您服务器的安全防护。</p>
<ul>
<li>参考本文介绍的提升口令安全的方法设置登录口令。具体方法请参见<a href="https://help.aliyun.com/document_detail/185039.html?spm=a2c4g.11174283.6.711.6bcf7f35q8pjH7#section-ta9-kwv-1k8">提升口令安全</a>。</li>
<li>使用云安全中心基线检查功能，检查您的服务器中是否存在高危弱口令风险。如果在您的资产中检测出了高危弱口令风险，建议您及时修改资产中的弱口令。详细操作步骤请参见<a href="https://help.aliyun.com/document_detail/185039.html?spm=a2c4g.11174283.6.711.6bcf7f35q8pjH7#section-bpx-4cy-cbz">修改常见的服务器弱口令</a>。</li>
</ul>
<h2 id="提升口令安全"><a href="#提升口令安全" class="headerlink" title="提升口令安全"></a>提升口令安全</h2><p>您可以通过以下方法提高登录口令的安全性：</p>
<ul>
<li><p>设置复杂密码</p>
<p>密码复杂度至少应同时满足以下要求：</p>
<ul>
<li>密码长度大于等于8个字符。</li>
<li>至少包含以下三种字符的组合：<ul>
<li>大写字母（A~Z）</li>
<li>小写字母（a~z）</li>
<li>数字（0~9）</li>
<li>特殊字符（`~!@$%^&amp;*()-_=+#|[{}];:’”,&lt;.&gt;/?）</li>
</ul>
</li>
<li>密码不为用户名或用户名的倒序。</li>
</ul>
</li>
<li><p>不使用常见或公开的弱口令</p>
<p>以下是常见或公开的弱口令：</p>
<ul>
<li>已公开的常用弱口令。例如abcd1234、admin、root、admin@123等。</li>
<li>数字或字母连排或混排，键盘字母连排。例如123456、abcdef、123abc、qwerty、1qaz2wsx等。</li>
<li>短语密码。例如5201314、woaini1314等。</li>
<li>公司名称、 生日、姓名、身份证、手机号、邮箱名、用户ID、时间年份等。</li>
</ul>
</li>
<li><p>定期修改密码</p>
<p>建议每隔90天更改一次密码。</p>
</li>
</ul>
<h2 id="修改常见的服务器弱口令"><a href="#修改常见的服务器弱口令" class="headerlink" title="修改常见的服务器弱口令"></a>修改常见的服务器弱口令</h2><p>以下表格介绍修改Linux服务器、MySQL数据库、Redis数据库等常见系统的登录弱口令的操作防范。</p>
<table>
<thead>
<tr>
<th style="text-align:left">系统名称</th>
<th style="text-align:left">修改登录口令操作步骤</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Linux系统</td>
<td style="text-align:left">在Linux系统服务器中，执行<code>passwd [&lt;user&gt;]</code>命令修改用户登录口令。</td>
<td style="text-align:left">其中<code>&lt;user&gt;</code>为登录用户名，如果不输入则修改的是当前用户的口令。执行完命令后请根据提示输入新口令。</td>
</tr>
<tr>
<td style="text-align:left">Windows系统</td>
<td style="text-align:left">本处以Windows 10为例说明修改用户登录口令的方法。登录Windows服务器后，在左下角单击<a href="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/1182590061/p170023.png"><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/1182590061/p170023.png" alt="开始图标"></a>图标。单击<a href="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/1182590061/p170024.png"><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/1182590061/p170024.png" alt="设置图标"></a>图标。在<strong>Windows设置</strong>页面，单击<strong>帐户</strong>。在左侧导航栏单击<strong>登录选项</strong>。根据页面提示更改服务器密码。</td>
<td style="text-align:left">无。</td>
</tr>
<tr>
<td style="text-align:left">MySQL数据库</td>
<td style="text-align:left">登录MySQL数据库。执行以下命令查看数据库用户密码信息。<code>SELECT user, host, authentication_string FROM user;</code><strong>说明</strong> 部分MySQL数据库版本可能不支持上述查询命令。如果您执行上述命令未获得用户密码信息，请您执行以下命令。<code>SELECT user, host, password FROM user;</code>执行以下命令根据查询结果及弱密码告警信息修改具体用户的密码。<code>SET PASSWORD FOR &#39;用户名&#39;@&#39;主机&#39; = PASSWORD(&#39;新密码&#39;);</code>执行刷新命令<code>flush privileges;</code>。</td>
<td style="text-align:left">无</td>
</tr>
<tr>
<td style="text-align:left">Redis数据库</td>
<td style="text-align:left">打开Redis数据库的配置文件redis.conf。执行以下命令修改或增加口令。<code>requirepass &lt;password&gt;；</code>重启Redis服务。</td>
<td style="text-align:left">其中<code>&lt;password&gt;</code>为登录口令。如果已存在登录口令，则将其修改为复杂口令；如果不存在登录口令，则添加新口令。</td>
</tr>
<tr>
<td style="text-align:left">SQL Server数据库</td>
<td style="text-align:left">Linux系统登录登录SQL Server数据库，执行以下命令修改登录口令。<code>exec sp_password &#39;&lt;oldpassword&gt;&#39;,&#39;&lt;newpassword&gt;&#39;,&#39;&lt;user&gt;&#39;</code>Windows认证登录在SQL Server数据库客户端依次选择<strong><em>\</em>安全性\</strong> &gt; **登录名**** ，选中用户后将弱口令修改为复杂口令。</td>
<td style="text-align:left">其中<code>&lt;oldpassword&gt;</code>为旧口令，<code>&lt;newpassword&gt;</code>为新口令，<code>&lt;user&gt;</code>为用户名。</td>
</tr>
<tr>
<td style="text-align:left">MongoDB数据库</td>
<td style="text-align:left">登录MongoDB数据库。执行<code>use admin</code>命令切换到admin用户。执行<code>use &lt;db_name&gt;</code>命令切换到需要修改登录口令的数据库。执行<code>db.updateUser(&#39;&lt;username&gt;&#39;,&#123;pwd:&#39;&lt;newpassword&gt;&#39;&#125;)</code>命令修改数据库的登录名和口令。</td>
<td style="text-align:left"><code>db_name</code>为需要修改登录口令的数据库名称。<code>username</code>为待修改口令的用户名，<code>newpassword</code>为新口令。修改口令完成后，需等待15分钟才能检测修改后的口令是否为弱口令。</td>
</tr>
<tr>
<td style="text-align:left">PostgreSQL数据库</td>
<td style="text-align:left">登录PostgreSQL数据库。执行以下命令修改弱口令。<code>ALTER USER &lt;user&gt; WITH PASSWORD &#39;&lt;newpassword&gt;&#39;;</code></td>
<td style="text-align:left">其中<code>&lt;user&gt;</code>为用户名，<code>&lt;newpassword&gt;</code>为新口令。</td>
</tr>
<tr>
<td style="text-align:left">Tomcat</td>
<td style="text-align:left">打开Tomcat根目录下的配置文件conf/tomcat-user.xml。修改user节点的password属性值为复杂口令。</td>
<td style="text-align:left">无。</td>
</tr>
<tr>
<td style="text-align:left">Rsync</td>
<td style="text-align:left">打开Rsync的配置文件rsyncd.conf。找到<code>secrets file</code>配置项，并在该配置项中找到<code>rsyncd.secret</code>文件的路径。将rsyncd.secret文件按<code>用户名:口令</code>的形式编辑，修改对应用户的口令为新的复杂口令。重启Rsync服务。</td>
<td style="text-align:left">无。</td>
</tr>
<tr>
<td style="text-align:left">SVN</td>
<td style="text-align:left">打开版本库目录。在配置文件<path></path>/conf/svnserve.conf中找到<code>password-db</code>。根据password-db配置找到口令配置文件路径，将该文件中的口令修改为指定的口令（默认为passwd文件）。重启SVN服务。</td>
<td style="text-align:left">无。</td>
</tr>
<tr>
<td style="text-align:left">vsftpd服务器软件</td>
<td style="text-align:left">本地用户打开配置文件vsftpd.conf。增加或修改配置项<code>anonymous_enable</code>的值为<strong>NO</strong>。<code>anonymous_enable</code>的值为<strong>NO</strong>表示禁止匿名登录。执行<code>passwd &lt;ftpuser&gt;</code>命令修改FTP用户的口令。<code>&lt;ftpuser&gt;</code>为ftp用户的用户名。根据提示设置符合要求的新的复杂口令。虚拟用户打开文件/etc/vsftpd/login.txt。修改用户名对应的口令并保存。该文件格式为：第1行是用户A的用户名，第2行是用户A的口令，第3行是用户B的用户名，第4行是用户B的口令，以此类推。执行<code>db_load -T -t hash -f /etc/vsftpd/login.txt /etc/vsftpd/login.db</code>命令。修改/etc/pam.d/vsftpd文件。在存在<code>auth pam_userdb.so</code>和<code>account pam_userdb.so</code>的行后分别添加语句<code>db=/etc/vsftpd/login</code>，修改完成后保存。具体位置见下图。<a href="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/1182590061/p170046.png"><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/1182590061/p170046.png" alt="vsftpd文件修改位置"></a>重启vsftpd。</td>
<td style="text-align:left">无。</td>
</tr>
</tbody>
</table>
<h4 id="Linux系统登录弱口令检查"><a href="#Linux系统登录弱口令检查" class="headerlink" title="Linux系统登录弱口令检查"></a>Linux系统登录弱口令检查</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>若系统使用弱口令，存在极大的被恶意猜解入侵风险，需立即修复。</p>
<h5 id="检查提示"><a href="#检查提示" class="headerlink" title="检查提示"></a>检查提示</h5><p>存在弱密码(用户名/密码):root/12**56</p>
<h5 id="加固建议"><a href="#加固建议" class="headerlink" title="加固建议"></a>加固建议</h5><p>执行命令<code>passwd [&lt;user&gt;]</code>，然后根据提示输入新口令完成修改，其中<user>为用户名，如果不输入则修改的是当前用户的口令。口令应符合复杂性要求：</user></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、长度8位以上</span><br><span class="line">2、包含以下四类字符中的三类字符:</span><br><span class="line">英文大写字母(A 到 Z)</span><br><span class="line">英文小写字母(a 到 z)</span><br><span class="line">10 个基本数字(0 到 9)</span><br><span class="line">非字母字符(例如 !、$、#、%、@、^、&amp;)</span><br><span class="line">3、避免使用已公开的弱口令，如：abcd.1234 、admin@123等</span><br></pre></td></tr></table></figure>
<h4 id="MySQL数据库登录弱口令检查"><a href="#MySQL数据库登录弱口令检查" class="headerlink" title="MySQL数据库登录弱口令检查"></a>MySQL数据库登录弱口令检查</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p>若系统使用弱口令，存在极大的被恶意猜解入侵风险，需立即修复。</p>
<h5 id="加固建议-1"><a href="#加固建议-1" class="headerlink" title="加固建议"></a>加固建议</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录mysql数据库；</span><br><span class="line">查看数据库用户密码信息：`SELECT user, host, authentication_string FROM user;` 部分版本查询命令为：`SELECT user, host, password FROM user;` </span><br><span class="line">根据查询结果及弱密码告警信息修改具体用户的密码：`SET PASSWORD FOR &#x27;用户名&#x27;@&#x27;主机&#x27; = PASSWORD(&#x27;新密码&#x27;);`</span><br><span class="line">执行刷新命令：`flush privileges;` </span><br></pre></td></tr></table></figure>
<h6 id="新口令应符合复杂性要求："><a href="#新口令应符合复杂性要求：" class="headerlink" title="新口令应符合复杂性要求："></a>新口令应符合复杂性要求：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、长度8位以上</span><br><span class="line">2、包含以下四类字符中的三类字符:</span><br><span class="line">英文大写字母(A 到 Z)</span><br><span class="line">英文小写字母(a 到 z)</span><br><span class="line">10 个基本数字(0 到 9)</span><br><span class="line">非字母字符(例如 !、$、#、%、@、^、&amp;)</span><br><span class="line">3、避免使用已公开的弱口令，如：abcd.1234 、admin@123等</span><br></pre></td></tr></table></figure>
<h4 id="Redis数据库登录弱口令检查"><a href="#Redis数据库登录弱口令检查" class="headerlink" title="Redis数据库登录弱口令检查"></a>Redis数据库登录弱口令检查</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><p>redis在redis.conf配置文件中，设置配置项requirepass， 开户密码认证。 redis因查询效率高，auth这种命令每秒能处理9w次以上，简单的redis的密码极容易为攻击者暴破。</p>
<h5 id="检查提示-1"><a href="#检查提示-1" class="headerlink" title="检查提示"></a>检查提示</h5><p>存在弱密码(配置文件|密码):/etc/redis.conf|</p>
<h5 id="加固建议-2"><a href="#加固建议-2" class="headerlink" title="加固建议"></a>加固建议</h5><p>打开redis.conf，找到requirepass所在的地方，修改为指定的密码，密码应符合复杂性要求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、长度8位以上</span><br><span class="line">2、包含以下四类字符中的三类字符:</span><br><span class="line">英文大写字母(A 到 Z)</span><br><span class="line">英文小写字母(a 到 z)</span><br><span class="line">10 个基本数字(0 到 9)</span><br><span class="line">非字母字符(例如 !、$、#、%、@、^、&amp;)</span><br><span class="line">3、避免使用已公开的弱口令，如：abcd.1234 、admin@123等</span><br></pre></td></tr></table></figure>
<p>再去掉前面的#号注释符，然后重启redis</p>
<h4 id="Apache-Tomcat控制台弱口令检查"><a href="#Apache-Tomcat控制台弱口令检查" class="headerlink" title="Apache Tomcat控制台弱口令检查"></a>Apache Tomcat控制台弱口令检查</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><p>tomcat-manger是Tomcat提供的web应用热部署功能，该功能具有较高权限，会直接控制Tomcat应用，应尽量避免使用此功能。如有特殊需求，请务必确保为该功能配置了强口令</p>
<h5 id="检查提示-2"><a href="#检查提示-2" class="headerlink" title="检查提示"></a>检查提示</h5><p>存在弱密码(配置文件：用户名|密码):/data1/tom-7.0.73/conf/tomcat-users.xml:tungstar|tu<strong><strong>***</strong></strong>cg</p>
<h5 id="加固建议-3"><a href="#加固建议-3" class="headerlink" title="加固建议"></a>加固建议</h5><p>编辑Tomcat根目录下的配置文件conf/tomcat-user.xml，修改user节点的password属性值为复杂口令, 口令应符合复杂性要求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、长度8位以上</span><br><span class="line">2、包含以下四类字符中的三类字符:</span><br><span class="line">英文大写字母(A 到 Z)</span><br><span class="line">英文小写字母(a 到 z)</span><br><span class="line">10 个基本数字(0 到 9)</span><br><span class="line">非字母字符(例如 !、$、#、%、@、^、&amp;)</span><br><span class="line">3、避免使用已公开的弱口令，如：abcd.1234 、admin@123等</span><br></pre></td></tr></table></figure>
<p>操作时建议做好记录或备份</p>
<h4 id="PostgreSQL数据库登录弱口令检查"><a href="#PostgreSQL数据库登录弱口令检查" class="headerlink" title="PostgreSQL数据库登录弱口令检查"></a>PostgreSQL数据库登录弱口令检查</h4><h5 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h5><p>若系统使用弱口令，存在极大的被恶意猜解入侵风险，需立即修复。</p>
<h5 id="加固建议-4"><a href="#加固建议-4" class="headerlink" title="加固建议"></a>加固建议</h5><p>登录postgresql，使用如下命令修改弱口令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &lt;user&gt; WITH PASSWORD &#x27;&lt;newpassword&gt;&#x27;;</span><br></pre></td></tr></table></figure>
<p>其中<user>为用户名，<newpassword>为新口令。新口令应符合复杂性要求：</newpassword></user></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、长度8位以上</span><br><span class="line">2、包含以下四类字符中的三类字符:</span><br><span class="line">英文大写字母(A 到 Z)</span><br><span class="line">英文小写字母(a 到 z)</span><br><span class="line">10 个基本数字(0 到 9)</span><br><span class="line">非字母字符(例如 !、$、#、%、@、^、&amp;)</span><br><span class="line">3、避免使用已公开的弱口令，如：abcd.1234 、admin@123等</span><br></pre></td></tr></table></figure>
<h4 id="Windows系统登录弱口令检查"><a href="#Windows系统登录弱口令检查" class="headerlink" title="Windows系统登录弱口令检查"></a>Windows系统登录弱口令检查</h4><h5 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h5><p>若系统使用弱口令，存在极大的被恶意猜解入侵风险，需立即修复。</p>
<h5 id="加固建议-5"><a href="#加固建议-5" class="headerlink" title="加固建议"></a>加固建议</h5><p>以win10为例，依次选择“开始 ”菜单&gt;“设置 ”&gt;“帐户 ” &gt;“登录选项 ”。在“密码”下面，选择“更改”按钮，然后按照步骤操作输入原口令和新口令，完成设置。新口令应符合复杂性要求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、长度8位以上 2、包含以下四类字符中的三类字符: 英文大写字母(A 到 Z) 英文小写字母(a 到 z) 10 个基本数字(0 到 9) 非字母字符(例如 !、$、#、%、@、^、&amp;) 3、避免使用已公开的弱口令，如：abcd.1234 、admin@123等 </span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pip-学习笔记</title>
    <url>/pip/</url>
    <content><![CDATA[<p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。<br><span id="more"></span><br>目前如果你在 <a href="https://www.python.org/">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p>
<p>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p>
<p>pip 官网：<a href="https://pypi.org/project/pip/">https://pypi.org/project/pip/</a></p>
<p>你可以通过以下命令来判断是否已安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>如果你还未安装，则可以使用以下方法来安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载安装脚本</span></span><br><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">python get-pip.py    </span><br></pre></td></tr></table></figure>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><h6 id="显示版本和路径"><a href="#显示版本和路径" class="headerlink" title="显示版本和路径"></a>显示版本和路径</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaohongye ~ ^-^ #pip --version</span><br><span class="line">pip 19.2.2 from /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip (python 3.7)</span><br></pre></td></tr></table></figure>
<h6 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a><strong>获取帮助</strong></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip --help</span><br></pre></td></tr></table></figure>
<h6 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -U pip</span><br><span class="line"></span><br><span class="line">easy_install --upgrade pip</span><br></pre></td></tr></table></figure>
<h6 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a><strong>安装包</strong></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install SomePackage              # 最新版本</span><br><span class="line">pip install SomePackage==1.0.4       # 指定版本</span><br><span class="line">pip install &#x27;SomePackage&gt;=1.0.4&#x27;     # 最小版本</span><br></pre></td></tr></table></figure>
<h6 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --upgrade SomePackage</span><br></pre></td></tr></table></figure>
<h6 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall SomePackage</span><br></pre></td></tr></table></figure>
<h5 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h5><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p>
<p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p>豆瓣 (douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p>
<p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p>
<p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p><strong>配置方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在文件</span><br><span class="line"></span><br><span class="line">~/.pip/pip.conf</span><br><span class="line">中添加或修改:</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<h5 id="pip-review"><a href="#pip-review" class="headerlink" title="pip-review"></a>pip-review</h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pip-review</span><br></pre></td></tr></table></figure>
<h6 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip-review --auto</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python-脚本调用阿里SDK实现控制SLB</title>
    <url>/python-ali-slb/</url>
    <content><![CDATA[<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>今天哥们提了一个需求，想实现调阿里云SLB的SDK实现脚本调整权重、增加或移除后端ECS实例</p>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#安装python3和pip</span></span><br><span class="line"><span class="comment">#安装以下sdk模块</span></span><br><span class="line"><span class="comment">#pip install aliyun-python-sdk-core-v3</span></span><br><span class="line"><span class="comment">#pip install aliyun-python-sdk-slb</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> DescribeLoadBalancersRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> DescribeLoadBalancerAttributeRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> SetBackendServersRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> AddBackendServersRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> RemoveBackendServersRequest</span><br><span class="line"></span><br><span class="line"><span class="comment">#  需填写ak信息，可用区</span></span><br><span class="line">AccessKey=<span class="string">&#x27;&#x27;</span></span><br><span class="line">AccessKeySecret=<span class="string">&#x27;&#x27;</span></span><br><span class="line">RegionId = <span class="string">&quot;cn-beijing&quot;</span></span><br><span class="line"></span><br><span class="line">client = AcsClient(AccessKey,AccessKeySecret,RegionId);</span><br><span class="line">helpInfo=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Basic Commands :</span></span><br><span class="line"><span class="string">  get            获取SLB信息</span></span><br><span class="line"><span class="string">  edit           配置SLB的后端权重</span></span><br><span class="line"><span class="string">  add            添加SLB的后端实例</span></span><br><span class="line"><span class="string">  remove         删除SLB的后端实例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    获取所有实例的信息</span></span><br><span class="line"><span class="string">        python slb-0604.py get all</span></span><br><span class="line"><span class="string">    获取某一实例的信息</span></span><br><span class="line"><span class="string">        python slb-0604.py get lb-2zedfhvgznrm7eqbr00uv</span></span><br><span class="line"><span class="string">    编辑单个权重</span></span><br><span class="line"><span class="string">        python slb-0604.py edit lb-2zedfhvgznrm7eqbr00uv [&#123;&#x27;ServerId&#x27;: &#x27;i-2zedna91yczcq12zm60q&#x27;, &#x27;Weight&#x27;: 99, &#x27;Type&#x27;: &#x27;ecs&#x27;&#125;]</span></span><br><span class="line"><span class="string">    编辑多个权重（最多20个）</span></span><br><span class="line"><span class="string">        python slb-0604.py edit lb-2zedfhvgznrm7eqbr00uv [&#123;&quot;ServerId&quot;:&quot;i-2zej4lxhjoq1icue6kup&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;,&#123;&quot;ServerId&quot;:&quot;i-2ze1u9ywulp5pbvvc7hv&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;]</span></span><br><span class="line"><span class="string">    添加单个后端ecs</span></span><br><span class="line"><span class="string">        python slb-0604.py add lb-2zedfhvgznrm7eqbr00uv [&#123;&quot;ServerId&quot;:&quot;i-2ze1u9ywulp5pbvvc7hv&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;]</span></span><br><span class="line"><span class="string">    添加多个后端ecs</span></span><br><span class="line"><span class="string">        python slb-0604.py add lb-2zedfhvgznrm7eqbr00uv [&#123;&quot;ServerId&quot;:&quot;i-2zej4lxhjoq1icue6kup&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;,&#123;&quot;ServerId&quot;:&quot;i-2ze1u9ywulp5pbvvc7hv&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;]</span></span><br><span class="line"><span class="string">    删除后端ecs</span></span><br><span class="line"><span class="string">        python slb-0604.py remove lb-2zedfhvgznrm7eqbr00uv [&#123;&quot;ServerId&quot;:&quot;i-2zej4lxhjoq1icue6kup&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;,&#123;&quot;ServerId&quot;:&quot;i-2ze1u9ywulp5pbvvc7hv&quot;,&quot;Weight&quot;:&quot;100&quot;&#125;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(helpInfo)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DescribeLoadBalancers</span>(<span class="params">resource</span>):</span></span><br><span class="line">    request = DescribeLoadBalancersRequest.DescribeLoadBalancersRequest()</span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    SLBInfo = json.loads(response)</span><br><span class="line">    LoadBalancerIdList = []</span><br><span class="line">    <span class="keyword">for</span> SLBInstance <span class="keyword">in</span> SLBInfo[<span class="string">&#x27;LoadBalancers&#x27;</span>][<span class="string">&#x27;LoadBalancer&#x27;</span>]:</span><br><span class="line">        LoadBalancerIdList.append(SLBInstance[<span class="string">&#x27;LoadBalancerId&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resource == <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">        Ali_Slb_Info = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> SLBInstance <span class="keyword">in</span> SLBInfo[<span class="string">&#x27;LoadBalancers&#x27;</span>][<span class="string">&#x27;LoadBalancer&#x27;</span>]:</span><br><span class="line">            request = DescribeLoadBalancerAttributeRequest.DescribeLoadBalancerAttributeRequest()</span><br><span class="line">            request.set_LoadBalancerId(SLBInstance[<span class="string">&#x27;LoadBalancerId&#x27;</span>])</span><br><span class="line">            response = client.do_action_with_exception(request)</span><br><span class="line">            Ali_Slb_Info[SLBInstance[<span class="string">&#x27;LoadBalancerId&#x27;</span>]] = json.loads(response.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(LoadBalancerIdList)</span><br><span class="line">    <span class="keyword">elif</span> resource <span class="keyword">in</span> LoadBalancerIdList:</span><br><span class="line">        request = DescribeLoadBalancerAttributeRequest.DescribeLoadBalancerAttributeRequest()</span><br><span class="line">        request.set_LoadBalancerId(resource)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        response = json.loads(response.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(response[<span class="string">&#x27;BackendServers&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误,请输入 all 或 SLB实例ID ！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SetBackendServers</span>(<span class="params">resource,BackendServers</span>):</span></span><br><span class="line">    request = SetBackendServersRequest.SetBackendServersRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">    request.set_BackendServers(BackendServers)</span><br><span class="line">    request.set_LoadBalancerId(resource)</span><br><span class="line"></span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(response, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddBackendServers</span>(<span class="params">resource,BackendServers</span>):</span></span><br><span class="line">    request = AddBackendServersRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    request.set_BackendServers(BackendServers)</span><br><span class="line">    request.set_LoadBalancerId(resource)</span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(response, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoveBackendServers</span>(<span class="params">resource,BackendServers</span>):</span></span><br><span class="line">    request = RemoveBackendServersRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">&#x27;json&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    request.set_BackendServers(BackendServers)</span><br><span class="line">    request.set_LoadBalancerId(resource)</span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(response, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        userInput = sys.argv[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">&#x27;get&#x27;</span> <span class="keyword">and</span> userInput[<span class="number">1</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            DescribeLoadBalancers(resource)</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">&#x27;edit&#x27;</span> <span class="keyword">and</span> userInput[<span class="number">1</span>] <span class="keyword">and</span> userInput[<span class="number">2</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            BackendServers = userInput[<span class="number">2</span>]</span><br><span class="line">            SetBackendServers(resource,BackendServers)</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">&#x27;add&#x27;</span> <span class="keyword">and</span> userInput[<span class="number">1</span>] <span class="keyword">and</span> userInput[<span class="number">2</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            BackendServers = userInput[<span class="number">2</span>]</span><br><span class="line">            AddBackendServers(resource,BackendServers)</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">&#x27;remove&#x27;</span> <span class="keyword">and</span> userInput[<span class="number">1</span>] <span class="keyword">and</span> userInput[<span class="number">2</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            BackendServers = userInput[<span class="number">2</span>]</span><br><span class="line">            RemoveBackendServers(resource,BackendServers)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python-调用阿里云API实现Swarm集群应用的更新或重启</title>
    <url>/python-ali-swarm-app-ops/</url>
    <content><![CDATA[<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>调用阿里云API实现 根据docker compose文件进行Swarm集群容器应用的更新、重启</p>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#调用阿里容器api</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">alics.py</span></span><br><span class="line"><span class="string">参数1   操作  update  restart</span></span><br><span class="line"><span class="string">参数2   集群名称   pre test pro</span></span><br><span class="line"><span class="string">参数2   应用名称</span></span><br><span class="line"><span class="string">参数3   dockercompose文件的绝对路径</span></span><br><span class="line"><span class="string">参数4   时间戳</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">Action=sys.argv[<span class="number">1</span>]</span><br><span class="line">TimeStamp=<span class="built_in">str</span>(time.time())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UpdataService</span>(<span class="params">ClusterName,Service,File,TimeStamp</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(File) <span class="keyword">as</span> file:</span><br><span class="line">        contents = file.read().replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;template&quot;</span>: contents,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: TimeStamp,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;预发环境的 %s 应用进行更新&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span> + Service + <span class="string">&#x27;/update&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;生产环境的 %s 应用进行更新&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span> + Service + <span class="string">&#x27;/update&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;测试环境的 %s 应用进行更新&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/&#x27;</span> + Service + <span class="string">&#x27;/update&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    res = requests.post(url,data=json.dumps(data),verify=verify,cert=cert)</span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    <span class="built_in">print</span> res.text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;202&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(res):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;\n应用更新请求已发送到阿里云容器服务！\n&#x27;</span></span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;更新失败，请查看compose文件是否缺少参数&#x27;</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateService</span>(<span class="params">ClusterName,Service,File,TimeStamp</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(File) <span class="keyword">as</span> file:</span><br><span class="line">        contents = file.read().replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: Service,</span><br><span class="line">        <span class="string">&quot;template&quot;</span>: contents,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: TimeStamp,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;创建预发环境的 %s 应用&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;创建生产环境的 %s 应用&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;创建测试环境的 %s 应用&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    res = requests.post(url,data=json.dumps(data),verify=verify,cert=cert)</span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    <span class="built_in">print</span> res.text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;201&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(res):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;\n应用更新请求已发送到阿里云容器服务！\n&#x27;</span></span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;更新失败，请查看compose文件是否缺少参数&#x27;</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RestartService</span>(<span class="params">ClusterName,Service</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;预发环境的 %s 应用进行重启&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span> + Service + <span class="string">&#x27;/restart&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;生产环境的 %s 应用进行重启&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span> + Service + <span class="string">&#x27;/restart&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;测试环境的 %s 应用进行重启&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/&#x27;</span> + Service + <span class="string">&#x27;/restart&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = requests.post(url,verify=verify,cert=cert)</span><br><span class="line">        <span class="built_in">print</span> res</span><br><span class="line">        <span class="built_in">print</span> res.text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;200&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(res):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;\n应用重启完成！\n&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;程序正在更新，10秒后重试！&#x27;</span></span><br><span class="line">            time.sleep( <span class="number">10</span> )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetService</span>(<span class="params">ClusterName,Service</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取预发环境的 %s 应用的信息&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span> + Service</span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取生产环境的 %s 应用的信息&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span> + Service</span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取测试环境的 %s 应用的信息&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/&#x27;</span> + Service</span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    res = requests.get(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    <span class="built_in">print</span> json.loads(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RedeployService</span>(<span class="params">ClusterName,Service</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;预发环境的 %s 应用进行重新部署&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span> + Service + <span class="string">&#x27;/redeploy&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;生产环境的 %s 应用进行重新部署&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span> + Service  + <span class="string">&#x27;/redeploy&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;测试环境的 %s 应用进行重新部署&#x27;</span> % Service</span><br><span class="line">        url = <span class="string">&#x27;https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/&#x27;</span> + Service + <span class="string">&#x27;/redeploy&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    res = requests.post(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    <span class="built_in">print</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetComposeService</span>(<span class="params">ClusterName,Service</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        File = <span class="string">&#x27;/jenkins/vcgapp/compose-back/pre/&#x27;</span> + Service</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取预发环境的 %s 应用的Compose文件，保存本地后的文件为 %s&#x27;</span> % (Service,File)</span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span> + Service</span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        File = <span class="string">&#x27;/jenkins/vcgapp/compose-back/pro/&#x27;</span> + Service</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取生产环境的 %s 应用的Compose文件，保存本地后的文件为 %s&#x27;</span> % (Service,File)</span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span> + Service</span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    res = requests.get(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(File,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(json.loads(res.text).get(<span class="string">&#x27;template&#x27;</span>).replace(<span class="string">&#x27;\r\n&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetAllService</span>(<span class="params">ClusterName</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取预发环境所有应用的信息&#x27;</span></span><br><span class="line">        url = <span class="string">&#x27;https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;获取生产环境所有应用的信息&#x27;</span></span><br><span class="line">        url = <span class="string">&#x27;https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/&#x27;</span></span><br><span class="line">        verify = <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem&#x27;</span></span><br><span class="line">        cert = (<span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem&#x27;</span>, <span class="string">&#x27;/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem&#x27;</span>)</span><br><span class="line">    res = requests.get(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="built_in">print</span> res</span><br><span class="line">    <span class="comment">#print res.text</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> json.loads(res.text):</span><br><span class="line">        <span class="comment">#print i.get(&#x27;template&#x27;).replace(&#x27;\r\n&#x27;,&#x27;\n&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> ClusterName == <span class="string">&quot;pre&quot;</span>:</span><br><span class="line">            File = <span class="string">&#x27;/jenkins/vcgapp/compose-back/pre/&#x27;</span> + i.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ClusterName == <span class="string">&quot;pro&quot;</span>:</span><br><span class="line">            File = <span class="string">&#x27;/jenkins/vcgapp/compose-back/pro/&#x27;</span> + i.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        composefile = i.get(<span class="string">&#x27;template&#x27;</span>).replace(<span class="string">&#x27;\r\n&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(File,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(composefile)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;%s 的 compose 文件已备份到 %s &quot;</span> % (i.get(<span class="string">&#x27;name&#x27;</span>),File)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Action == <span class="string">&quot;update&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    File = sys.argv[<span class="number">4</span>]</span><br><span class="line">    UpdataService(ClusterName,Service,File,TimeStamp)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">&quot;create&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    File = sys.argv[<span class="number">4</span>]</span><br><span class="line">    CreateService(ClusterName,Service,File,TimeStamp)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">&quot;restart&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    RestartService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">&quot;getinfo&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    GetService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">&quot;redeploy&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    RedeployService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">&quot;getcompose&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    GetComposeService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">&quot;getallservice&quot;</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    GetAllService(ClusterName)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python学习进阶之路</title>
    <url>/python/</url>
    <content><![CDATA[<p><img src="/python/./python.png" alt></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>修复漏洞-提升RDS响应速度</title>
    <url>/rds-optimize/</url>
    <content><![CDATA[<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><ol>
<li>升级linux内核版本，修复SACK Panic”远程DoS漏洞</li>
<li>安装nscd，提升RDS响应速度</li>
</ol>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><h5 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h5><p><em>Linux 以及 FreeBSD 等系统内核上存在严重远程DoS漏洞，攻击者可利用该漏洞构造并发送特定的 SACK 序列请求到目标服务器导致服务器崩溃或拒绝服务。</em></p>
<p><em>目前已知受影响版本如下：</em><br> <em>• FreeBSD 12（使用到 RACK TCP 协议栈）</em><br> <em>• CentOS 5（Redhat 官方已停止支持，不再提供补丁）</em><br> <em>• CentOS 6</em><br> <em>• CentOS 7</em><br> <em>• Ubuntu 18.04 LTS</em><br> <em>• Ubuntu 16.04 LTS</em><br> <em>• Ubuntu 19.04</em><br> <em>• Ubuntu 18.10</em><br><em>各大Linux发行厂商已发布内核修复补丁，详细内核修复版本如下：</em><br> <em>• CentOS 6 ：2.6.32-754.15.3</em><br> <em>• CentOS 7 ：3.10.0-957.21.3</em><br> <em>• Ubuntu 18.04 LTS ：4.15.0-52.56</em><br> <em>• Ubuntu 16.04 LTS：4.4.0-151.178</em></p>
<p><em>修复建议：</em><br><em>➤【CentOS 6/7 系列用户】</em><br><em>注：截止文章发布，CentOS官方暂未同步内核修复补丁到软件源，建议用户及时关注补丁更新情况并开展相应升级工作。升级方式如下：</em></p>
<ol>
<li><em>yum clean all &amp;&amp; yum makecache，进行软件源更新；</em></li>
<li><em>yum update kernel  -y，更新当前内核版本;</em></li>
<li><em>reboot，更新后重启系统生效;</em></li>
<li><em>uname -a，检查当前版本是否为上述【安全版本】，如果是，则说明修复成功。</em></li>
</ol>
<p><em>➤【Ubuntu 16.06/18.04 LTS 系列用户】</em></p>
<ol>
<li><em>sudo apt-get update &amp;&amp; sudo apt-get install linux-image-generic，进行软件源更新并安装最新内核版本；</em></li>
<li><em>sudo reboot，更新后重启系统生效；</em></li>
<li><em>uname -a，检查当前版本是否为【安全版本】，如果是，则说明修复成功。</em><br><em>如果用户不方便重启进行内核补丁更新，可选择临时缓解方案：</em><br><em>运行如下命令禁用内核 SACK 配置防范漏洞利用：</em><br><em>sysctl -w net.ipv4.tcp_sack=0</em></li>
</ol>
<h5 id="NSCD服务："><a href="#NSCD服务：" class="headerlink" title="NSCD服务："></a>NSCD服务：</h5><p><em><a href="https://help.aliyun.com/knowledge_detail/41806.html">https://help.aliyun.com/knowledge_detail/41806.html</a></em></p>
<p><em>NSCD（Name Service Cache Daemon）是一种能够缓存passwd、group、hosts的本地缓存服务。若您使用短连接的方式连接RDS，请在与RDS相连的ECS实例上进行如下操作开启NSCD，提升RDS响应速度。</em></p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ol>
<li>编写Shell脚本</li>
<li>Ansible分发脚本</li>
<li>Ansible执行脚本</li>
<li>验证脚本执行情况</li>
<li>分批重启主机</li>
</ol>
<h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><h5 id="Shell脚本："><a href="#Shell脚本：" class="headerlink" title="Shell脚本："></a>Shell脚本：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /data/vcg/zhy/ansible/0623.sh</span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum update -y  # 或者 yum update kernel  -y</span><br><span class="line">yum install -y nscd</span><br><span class="line">systemctl enable nscd.service</span><br><span class="line">echo &quot;options timeout:1 attempts:1&quot; &gt;&gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<h5 id="分发脚本"><a href="#分发脚本" class="headerlink" title="分发脚本"></a>分发脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible pre-k8s -m copy -a &quot;src=/data/vcg/zhy/ansible/0623.sh dest=/tmp/0623.sh mode=755&quot;</span><br></pre></td></tr></table></figure>
<h5 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible pre-k8s -m shell -a &quot;/tmp/0623.sh&quot;</span><br></pre></td></tr></table></figure>
<h5 id="验证脚本执行情况"><a href="#验证脚本执行情况" class="headerlink" title="验证脚本执行情况"></a>验证脚本执行情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible pre-k8s -m shell -a &quot;cat /etc/resolv.conf |grep options&quot;</span><br></pre></td></tr></table></figure>
<h5 id="分批重启主机"><a href="#分批重启主机" class="headerlink" title="分批重启主机"></a>分批重启主机</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">脚本内容：</span></span><br><span class="line">hosts=&quot;</span><br><span class="line">172.20.21.249</span><br><span class="line">172.20.21.250</span><br><span class="line">172.20.21.251</span><br><span class="line">172.20.21.252</span><br><span class="line">172.20.21.253</span><br><span class="line">172.20.21.254</span><br><span class="line">172.20.21.255</span><br><span class="line">172.20.22.0</span><br><span class="line">172.20.22.1</span><br><span class="line">172.20.22.2&quot;</span><br><span class="line">for i in $hosts;</span><br><span class="line">do</span><br><span class="line">  ssh $i uptime</span><br><span class="line">  ssh $i reboot</span><br><span class="line">  sleep 2m</span><br><span class="line">  ssh $i uptime</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Redis设计和使用规范</title>
    <url>/redis-design-and-use-specification/</url>
    <content><![CDATA[<p><img src="/redis-design-and-use-specification/z.jpg" alt></p>
<span id="more"></span>
<p>转自蓝鲸智云<a href="https://bk.tencent.com/docs/document/6.0/130/7035">https://bk.tencent.com/docs/document/6.0/130/7035</a></p>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul>
<li>【建议】key 名尽量具有可读性，同一类型/模块使用相同的前缀: 如 <code>igame*</code>, <code>dnf*</code></li>
<li>【建议】key 名多个段之间用统一的字符分割，推荐分割符： <code>_ | : # + = ; ,.</code></li>
<li>【建议】key 名字尽量简短，建议控制在 100 字节内，不允许超过 976 字节</li>
<li>【建议】key 名尽量避免使用二进制</li>
<li>【建议】key 名不要包含空格/换行/回车/单双引号/tab 等特殊字符</li>
</ul>
<h3 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h3><ul>
<li>【建议】尽量减少大 key 的设计，string 类型控制在 10KB 以内，hash、list、set、zset 元素个数不要超过 5000(避免网卡流量瓶颈/慢查询)</li>
<li>【建议】单个热点 key 可以考虑拆分成多个 key 进行处理，把热度打散</li>
<li>【建议】非字符串的 bigkey，不要使用 del 删除，使用 hscan、sscan、zscan 方式渐进式删除</li>
<li>【建议】注意防止 bigkey 过期时间自动删除问题，而引起阻塞</li>
<li>【建议】选择合适的数据类型</li>
<li>【建议】控制 key 的生命周期，尽量都设置 expire 过期时间，且要避免集中过期</li>
<li>【建议】Redis 事务功能较弱，不建议过多使用；集群模式下，不支持事务</li>
</ul>
<h3 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h3><ul>
<li>【建议】合理利用批操作命令，使用 O(N)命令(hgetall/lrange/smembers/zrange/sinter)时需关注 N 的数量，有遍历的需求可以使用 hscan/sscan/zscan 代替</li>
<li>【建议】减少不必要的请求，del 前先 ttl，避免删除不存在的 key</li>
<li>【必须】禁止线上使用 keys/monitor/flushall/flushdb 等危险命令，通过 Redis 的 rename 机制禁掉，或者使用 scan 的方式渐进式处理</li>
<li>【建议】合理使用 select，redis 默认使用 db0</li>
<li>【建议】在必须使用 monitor 命令时，要注意不要长时间开启</li>
</ul>
<h3 id="客户端规范"><a href="#客户端规范" class="headerlink" title="客户端规范"></a>客户端规范</h3><ul>
<li>【建议】避免多个业务使用同一个 Redis 实例</li>
<li>【建议】高并发下建议客户端添加熔断功能，减少到 DB 侧的压力</li>
<li>【必须】客户端必须要使用密码访问 Redis，并且避免在公网访问</li>
<li>【建议】客户端访问 Redis 最好带连接池，并且使用长连接，能够减少创建链接的开销</li>
</ul>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>优秀的 REST API 设计指南</title>
    <url>/rest-api-best-practices/</url>
    <content><![CDATA[<p><img src="/rest-api-best-practices/./code.jpg" alt></p>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>作为一名优秀的后端程序员，你照着产品需求设计好了模型，设计好了关联关系。</p>
<p>把这些模型和关系一再打磨了一番之后，你想是时候把API设计出来，与前端沟通了。</p>
<p>这时候问题来了：</p>
<p>一旦 API 进入前端 APP 代码，或者是被你的顾客广泛使用的话，再来大改就非常麻烦了。比如说，如果 APP 版本 1.0 用了一个接口 A，这个接口 A 如果要进行大改，那么必须将 A 维持至所有用户升级过 APP 1.0 后。</p>
<p>那么怎么样避免 API 发布之后大改呢？有没有一些提前可以注意到的设计准则可以帮我们避开 API 设计中的各种坑？</p>
<p>答案是有的。网上充满了各种对 API 设计的建议，而这篇文章里我们结合卡拉搜索设计 API 的经验，把 REST API 的最佳实践和常见的坑都总结出来，做成一个教程，希望可以在帮到正在设计/使用 API 的你。</p>
<blockquote>
<p><a href="https://kalasearch.cn/">卡拉搜索</a>致力于做中国的 Algolia，即为开发者提供 API，帮助他们构造自己的应用内搜索引擎。我们提供简单的 API 接口，让你可以在几分钟内为自己的 App、小程序、网站、博客等接入<a href="https://kalasearch.cn/docs">搜索功能</a>。欢迎体验我们的 Demo 和我们的 API 文档。</p>
</blockquote>
<h2 id="REST-API-是什么-程序员与服务之间沟通的语言"><a href="#REST-API-是什么-程序员与服务之间沟通的语言" class="headerlink" title="REST API 是什么 - 程序员与服务之间沟通的语言"></a>REST API 是什么 - 程序员与服务之间沟通的语言</h2><hr>
<p>任何语言的本质都是一套规则的合集。比如说，中文里要求句子要有主谓宾，而作为母语为中文的我们，一旦有人说了一句缺少主语的话，我们会直觉性地感觉很奇怪。</p>
<p>比如说，如果有人对你说“是一个神人”。</p>
<p>你会直觉地问：究竟谁是一个神人？</p>
<p>同样的，在各个程序的沟通中，或者各个服务的沟通中，我们也需要类似“语言”的东西，让我们可以不需要太多的上下文，就可以前端理解后端、后端也理解前端。</p>
<p>设想一下，有多少次你跟前端一起需要前后端 <code>联调</code>？有多少次前端觉得你定义的 API 不够方便直观，一定要你多返回一个参数或者改一下端点路径？</p>
<p>其实本质上，你们在 <code>联调</code> 时就是在尝试设计一个“语言”，以方便互相可以更容易地理解对方。</p>
<p>比如说，后端会要求前端说，你调用 <code>POST /user/abc</code> 就可以创建一个名为 <code>abc</code> 用户了。</p>
<p>短线来讲这当然没问题，你们可以几乎任意地定义 API 端点，任意地调整传递的参数。但是一旦项目开始变复杂，问题就开始出现了。</p>
<ul>
<li>首先大家有不同的经验和喜好，对 API 的定义可能千差万别，所谓众口难调</li>
<li>系统开始复杂后，各个系统之间的 API 因为定义的人的不同，会开始出现不一致，导致每个端口调用前需要详细阅读文档（如果有的话）或者与 API 设计者无穷无尽地讨论和会议</li>
<li>如果你的 API 是面向客户的，比如如果你是一家软件服务公司，那么你自定义的 API 会增加客户接入的成本</li>
<li>等等等等</li>
</ul>
<p>因此，要是有一套人类通用的”语言“或者”规范“，来指导大家定义 API 的方式，那样该多好？</p>
<p>REST API 就是这样一种规范，它是目前整个互联网应用最广泛的 API 规范。有意思的是，REST是由它的提出者 Roy Fielding 在他读书期间，写的博士论文里提出的。</p>
<p>总结一下，REST API 有一套 API 设计的准则，它规范了 API 设计的框架，使得服务间、程序员之间有一个通用的沟通语言。如果需要读 API 更广泛的定义，请参考文章<a href="https://kalasearch.cn/blog/what-is-api">什么是 API</a></p>
<p><a href="https://kalasearch.cn/static/0f972adb9bbda638b254409234373894/c08c5/communication.jpg"><img src="https://kalasearch.cn/static/0f972adb9bbda638b254409234373894/c08c5/communication.jpg" alt="REST API是沟通语言"></a>REST API是沟通语言</p>
<h2 id="REST-API-内具体规定了什么"><a href="#REST-API-内具体规定了什么" class="headerlink" title="REST API 内具体规定了什么"></a>REST API 内具体规定了什么</h2><hr>
<p>REST API 规范了 API 设计的两大核心原则</p>
<ol>
<li>API应该作用于 Resource（资源）上</li>
<li>对资源的操作应使用对应语义的几种操作，包括： GET, POST, PUT, PATCH, DELETE</li>
</ol>
<p>我们来详细解释一下这两点</p>
<h3 id="什么是-REST-API-里的-Resource（即资源）"><a href="#什么是-REST-API-里的-Resource（即资源）" class="headerlink" title="什么是 REST API 里的 Resource（即资源）"></a>什么是 REST API 里的 Resource（即资源）</h3><p>这里的资源是指你的 API 用户可操作的逻辑对象，举个例子</p>
<p>如果你的 API 中允许调用者对用户进行操作，比如说用户注册，那么 API 类似于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /users</span><br></pre></td></tr></table></figure>
<p>在这里，资源即为 <code>users</code>。在很多情况下，API 中的资源与你的数据模型（也就是数据库的表）是一一对应的。当然也有例外情况，比如说你的数据库中存有用户，但是你现在想要让调用者可以创建“管理员”，那么 API 可能是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /admins</span><br></pre></td></tr></table></figure>
<p>然而，你的表中并没有 <code>admins</code> 这个表，而是否是 admin 是 Users 表中的一个属性，比如 <code>role=admin</code>。</p>
<p>请注意，REST API中的资源一定需要是名词，即一定是一个实在存在的概念比如 <code>用户</code>, <code>帐号</code>, <code>车票</code>等，或一个抽象的概念比如 <code>权限</code> 等。如果你需要提供一个创建某种资源的API接口，上述则可以表述为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /indexes</span><br><span class="line">POST /accounts</span><br><span class="line">POST /docs</span><br></pre></td></tr></table></figure>
<p>等等。</p>
<p>通常对于资源的命名，我们建议统一命名为为英文的复数。比如说 <code>users</code> 而不是 <code>user</code>。同时请注意保持一致性，在所有地方用一样的复数。</p>
<h3 id="什么是-REST-API-里的操作"><a href="#什么是-REST-API-里的操作" class="headerlink" title="什么是 REST API 里的操作"></a>什么是 REST API 里的操作</h3><p>一旦你定义了资源，接下来你需要定义允许调用者在这些资源上做什么操作。</p>
<p>比如说，以携程抢车票网站为例，我们可能允许调用者进行以下操作</p>
<ul>
<li><code>GET /tickets</code> - 列出所有车票</li>
<li><code>GET /tickets/9839</code> - 列出 id 为 9839 这张车票的信息</li>
<li><code>POST /tickets</code> - 创建一张车票</li>
<li><code>PUT /tickets/9839</code> - 更新 9839 这张车票的信息</li>
<li><code>PATCH /tickets/9839</code> - 部分修改 983 这张车票的信息，比如只修改车票价格</li>
<li><code>DELETE /tickets/9839</code> - 删掉 9839 这张车票</li>
</ul>
<p>请注意，到这里为止，你应该可以总结出来REST的大致设计思路了。它由两部分组成，第一部分是 <code>操作</code>，第二部分是可操作的 <code>资源</code>。比如上文中的 <code>GET /tickets</code>，操作是 GET，可操作的资源是车票。</p>
<p>那么读到这里，如果你严格遵循了REST的设计准则，以及你的调用者也了解 REST 的准则的话，那么对于很多 API 调用，你们不用再参考互相写的文档了。如果需要调用一张车票的信息，你的调用者自然会知道应该用GET去查看一个车票资源的信息，即 <code>GET /tickets/:ticketId</code>。这样就极大降低了沟通成本和出错成本，提升效率。</p>
<h3 id="如何在-API-中表示实体（数据库表）间关系"><a href="#如何在-API-中表示实体（数据库表）间关系" class="headerlink" title="如何在 API 中表示实体（数据库表）间关系"></a>如何在 API 中表示实体（数据库表）间关系</h3><p>在后端设计中，有的资源逻辑上无法独立存在。比如说，在卡拉搜索的例子里，用户的文档是无法独立于索引存在的。那么自然地，我们用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /indexes/index_abc/docs/1</span><br></pre></td></tr></table></figure>
<p>来表达获取索引 <code>index_abc</code> 中编号为 <code>1</code> 的文档。因此，对于所有资源需要依赖于另一个资源存在时，我们就按顺序在端点中将资源列出来。对于卡拉搜索中，索引和文档的关系，我们有以下接口</p>
<ul>
<li><code>GET /indexes/index_abc/docs/1</code> - 获取index id为 <code>index_abc</code> 下的id为 <code>1</code> 的文档</li>
<li><code>GET /indexes/index_abc/docs</code> - 获取index id为 <code>index_abc</code> 下的所有文档</li>
<li><code>POST /indexes/index_abc/docs</code> - 在index id为 <code>index_abc</code> 的索引中，添加文档 …</li>
</ul>
<p>如果一个资源可以独立于另一个资源存在，并且你期望你的API调用者频繁调用，那么可以考虑直接提供子端点。比如说，如果一个宠物店主人和宠物信息分别都常常被同时调用，那么你可以考虑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /owners/  - 获取所有主人信息</span><br><span class="line">GET /owners/1/pets/ 获取 id 为 1 的主人的所有宠物</span><br><span class="line">GET /pets/ - 获取所有宠物信息（宠物店所有宠物）</span><br><span class="line">GET /pets/13 - 直接获取 id 为 13 的宠物</span><br></pre></td></tr></table></figure>
<h3 id="REST-API中如何表示一个动作"><a href="#REST-API中如何表示一个动作" class="headerlink" title="REST API中如何表示一个动作"></a>REST API中如何表示一个动作</h3><p>有时候，当我们试图表达一些接口时，会发现REST的准则很难直接应用。比如说，当你需要一个接口让用户登录时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /users/signin</span><br></pre></td></tr></table></figure>
<p>但要注意，这里的 <code>signin</code> 即登录，是一个动词。这里是采用REST准则时需要考虑的地方，你有三个选择</p>
<ol>
<li>如果你希望严格地遵循 REST 原则，那么你需要找一个替代动词的名词。比如说，这里的 <code>signin</code> 可以替换为<code>login</code>。或者，如果你是以 token 密钥的方式登录的话，也许可以改为 <code>POST /users/token</code>，即创建一个 user token(也就是登录了)</li>
<li>在某些实在困难的地方，放弃严格的REST原则</li>
<li>参考一些成功的 REST API 并寻找类似的 API，参考他们的命名设计</li>
</ol>
<p>对于3，我强烈建议你参考 GitHub 的 API，原因不光是其极为规范，还有它覆盖了极多的 API 调用的情景，因此大概率你可以找到个类似的命名参考。</p>
<p>比如说，在 GitHub 上，如果让你来设计加星这个操作，你会把端点被设计成什么样？</p>
<p>Github把加星端点设计为 <code>PUT /gists/:id/star</code>，把取消加星设计为 <code>DELETE /gitsts/:id/star</code>。这样就完美地遵循了 REST 名词作为资源的准则，把动词”加星“完美地用 <code>PUT/DELETE</code> 两个操作，清晰地表达了出来。</p>
<h2 id="REST-API-设计常见问题和建议"><a href="#REST-API-设计常见问题和建议" class="headerlink" title="REST API 设计常见问题和建议"></a>REST API 设计常见问题和建议</h2><hr>
<p>上面我们描述了 REST 设计的准则，而在准则中并不包括其它”最佳实践“。</p>
<p>这里的最佳实践，其实并没有什么客观标准，只是软件工程和架构经过多年的发展，REST API 的设计也从十几年前简单的web 应用，到应用到现在越来越复杂企业级软件中。因此，如果你刚刚开始学习 REST API 的设计，参考这些实践经验将会有非常大的帮助，可以帮你少走不少绕路。</p>
<p><a href="https://kalasearch.cn/static/55c01643c832a4d0dc733495966cedc6/29d31/rest-api-cartoon.jpg"><img src="https://kalasearch.cn/static/55c01643c832a4d0dc733495966cedc6/29d31/rest-api-cartoon.jpg" alt="REST API 最佳实践"></a>REST API 最佳实践</p>
<h3 id="REST-API-如何区分版本"><a href="#REST-API-如何区分版本" class="headerlink" title="REST API 如何区分版本"></a>REST API 如何区分版本</h3><p>在设计 REST API 时，你应该时刻准备好不断更新 API。想要把 API稳定后再一次发布多数情况下是不实际的——老板要催进度，用户要催功能。因此，在设计 API 的时候就应该把支持 API 改动设计到API本身中。</p>
<p>多数情况下，在一版 API 已经成熟的前提下，可以提前发布，同时开始进行下一版的开发。而你只需要在URL中区分好 API 的版本即可。</p>
<p>比如说，如果在大致将 v1 开发完毕后，v1 前缀的 API 就应该稳定下来，所有的改动进入 v2。同时你应该开始通知所有使用 v1 的用户，给他们几周到几个月的时间，帮助他们平滑迁移到 v2</p>
<p>带有版本前缀的 API 示例如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /v1/indexes/</span><br><span class="line">GET /v1/indexes/abc/</span><br><span class="line">POST /v1/indexes/</span><br></pre></td></tr></table></figure>
<h3 id="REST-API-应该返回什么"><a href="#REST-API-应该返回什么" class="headerlink" title="REST API 应该返回什么"></a>REST API 应该返回什么</h3><p>作为一个通则，我们建议 REST API 永远返回 JSON 格式的结果。</p>
<p>原因有几个：</p>
<p>首先，JSON 作为互联网上使用最广泛的格式，在几乎任何语言的任何框架中都有广泛的支持。</p>
<p>同时，由于其高度的可读性，如果需要阅读返回内容，JSON 会让你的调用者阅读起来方便很多。</p>
<p>最后，JSON 的高压缩率可以在需要时方便地帮你提升传输效率和速度。</p>
<h3 id="为什么要给你的-API-编写文档"><a href="#为什么要给你的-API-编写文档" class="headerlink" title="为什么要给你的 API 编写文档"></a>为什么要给你的 API 编写文档</h3><p>写代码时，遇到稍复杂的逻辑，我们会发现如果没有注释，一个月后回来发现自己当时写的代码根本不像自己亲生的。再试图熟悉时，可能几个小时就过去了。</p>
<p>同样，对于 API 来说，如果你不写文档，那么在集成时，你的调用者肯定一边骂，一边尝试各种参数组合。为了让你的调用者有更顺滑的接入体验，每个 API 的设计者都应该把 API 文档作为与 API 的代码一样重要的模块。</p>
<p>好的 API 文档不光可以方便调用者的接入，更可以方便让你把 API 更改等信息传递出去，而不是一个一个单独通知你的用户。同时在编写文档时，你也会尝试着以你描述地方式接入，间接做了一次”dog food”自测。</p>
<p>如果你是面向开发者的 API 的话，优秀的 API 文档还可以作为强大的品牌宣传。在卡拉搜索我们花大力气维护我们的文档，同时我们也参考和致敬其它我们用过或者觉得值得夸奖的 API 文档：</p>
<ul>
<li><a href="https://kalasearch.cn/docs">卡拉搜索 API 文档 - 用 API 实现搜索引擎</a></li>
<li><a href="https://leancloud.cn/docs/rest_api.html">Leancloud API文档</a></li>
<li><a href="https://developer.github.com/v3/">GitHub API 文档</a></li>
</ul>
<h3 id="默认开启-Gzip-和-Pretty-print"><a href="#默认开启-Gzip-和-Pretty-print" class="headerlink" title="默认开启 Gzip 和 Pretty print"></a>默认开启 Gzip 和 Pretty print</h3><p>在返回你的 REST API 结果时，我们建议打开 Gzip 和 Pretty print 两个选项。</p>
<h4 id="打开-Gzip"><a href="#打开-Gzip" class="headerlink" title="打开 Gzip"></a>打开 Gzip</h4><p>Gzip 非常好理解，在目前的普通手机算力已经接近十几年前的顶配计算机的前提下，CPU 不再是运算的瓶颈。而网络带宽的扩宽速度则远没有追上 CPU 变快的速度。因此，如果有可能的话，用 CPU 的时间换取网络的传输时间是非常值得的。这也就是说，打开默认 Gzip 压缩，会让你的 JSON 结果耗费少量的服务器 CPU，但却能大大加快传输速度。</p>
<p>因此我们建议默认将 Gzip 打开。</p>
<h4 id="打开-Pretty-Print"><a href="#打开-Pretty-Print" class="headerlink" title="打开 Pretty Print"></a>打开 Pretty Print</h4><p>什么是 Pretty print 呢？简单说就是在 JSON 中插入空格和换行，让 JSON 变得美观，方便人阅读。比如下面不是Pretty print:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;大话西游&quot;,&quot;actor&quot;:&quot;周星驰”&#125;</span><br></pre></td></tr></table></figure>
<p>而下面是打开 Pretty print 后的同一个 JSON</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;大话西游&quot;,</span><br><span class="line">  &quot;actor&quot;: &quot;周星驰”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 JSON 稍变得复杂之后，如果没有 Pretty print 的 JSON 将会变得完全不可读。虽然打开 Pretty print 会增加一些空白字符，但是由于打开 Gzip 压缩，这些空白字符所占用的空间都会被压缩掉，所以并不用担心网络传输时，JSON 变得更大更慢。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>API是程序员与程序员沟通的语言，一个优秀的API不光可以让你维护起来更轻松，也会让你的调用者在使用时更得心应手。遵循 REST 准则设计出来的优秀的 API，可以减少你与调用者之间的沟通成本，让你可以用更多的时间专注在其它更重要的事情上。</p>
<p>本文中我们从 REST 的设计准则开始讲起，用例子说明如何设计出更出色的 API。</p>
<p><strong>文章转自：<a href="https://kalasearch.cn/blog/what-is-api/">卡拉搜索</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>挖矿程序处理最佳实践</title>
    <url>/safe-wakuang/</url>
    <content><![CDATA[<p>挖矿程序会占用CPU进行超频运算，导致CPU严重损耗，并且影响服务器上的其他应用。挖矿程序还具备蠕虫化特点，当安全边界被突破时，挖矿病毒会向内网渗透，并在被入侵的服务器上持久化驻留以获取最大收益。</p>
<span id="more"></span>
<p>由于挖矿程序具有联动作用，在清理过程中会存在处理不及时或清理不干净导致挖矿病毒反复发生、出现恶意脚本替换系统命令，从而导致执行系统命令时触发恶意脚本执行（例如：xorddos）。因此，需要在挖矿程序的一个执行周期内，尽快将被入侵服务器上的木马程序和持续化后门清理干净，否则容易导致挖矿病毒频繁复发。</p>
<h2 id="处理挖矿程序"><a href="#处理挖矿程序" class="headerlink" title="处理挖矿程序"></a>处理挖矿程序</h2><ol>
<li><p>查看挖矿进程的执行文件链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /proc/xxx/exe           // xxx表示该进程的PID。</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除挖矿进程的执行文件。</p>
</li>
<li><p>在高CPU消耗的进程中定位到挖矿进程，并杀死该进程。</p>
</li>
<li><p>检查您服务器的防火墙中是否存在挖矿程序的矿池地址。</p>
<ol>
<li><p>执行以下命令查看是否存在业务范围之外的可疑通信地址和开放端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>
<p><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/5326048951/p97001.png" alt="查看防火墙开放IP和端口"></p>
</li>
<li><p>执行以下命令清除恶意矿池地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>执行以下命令排查是否存在定时任务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<p><a href="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/5326048951/p97002.png"><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/5326048951/p97002.png" alt="排查定时任务"></a></p>
<p>您可以根据排查的结果，对可疑的定时任务文件进行处理，防止二次入侵。</p>
</li>
<li><p>执行以下命令检查SSH公钥中是否存在挖矿病毒，防止出现持续后门。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p><a href="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/6326048951/p96925.png"><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/6326048951/p96925.png" alt="排查SSH授权"></a></p>
</li>
<li><p>查看其他服务器中是否存在挖矿行为，防止挖矿病毒重复感染内网中的其他服务器。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Shell脚本-定期删除异常Pod</title>
    <url>/shell-delete-faild-pod/</url>
    <content><![CDATA[<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>有的Pod重启次数过多</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-test@ops-jenkins-master ~]$ kubectl get pods |awk &#x27;&#123;if ($4 &gt;= 1) print $0 &#125;&#x27;</span><br><span class="line">NAME                                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">cmsservice-vcg-com-57974bc4cf-vq6mk             1/1     Running   1          6m18s</span><br><span class="line">edgeservice-vcg-com-755b96fb78-v96s5            1/1     Running   1          3d23h</span><br><span class="line">edgeserviceweb-vcg-com-5655fc9899-8lxql         1/1     Running   1          3d23h</span><br><span class="line">node-visualchina-web-8575cf78dc-8jr2k           1/1     Running   1          4h11m</span><br><span class="line">vdam-gateway-service-6b7d864d67-rdzrg           1/1     Running   1          3h36m</span><br><span class="line">vdam-passport-service-7c97d84b58-xhn6k          1/1     Running   6          3d22h</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Version:1.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Date:20190603</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除重启次数超过5次的POD</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">Time=`date +%Y%m%d%H%M%S`</span><br><span class="line"></span><br><span class="line">echo $Time &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line"></span><br><span class="line">if [[ `/usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk &#x27;&#123;if ($4 &gt;= 5)  print $0 &#125;&#x27; |grep -v &#x27;NAME&#x27; |wc -l` -eq 0 ]];then</span><br><span class="line">  echo &#x27;无重启次数超过5次的POD&#x27;</span><br><span class="line">  echo &#x27;无重启次数超过5次的POD&#x27;  &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line">else</span><br><span class="line">  echo &#x27;将要删除如下pod：&#x27;</span><br><span class="line">  echo &#x27;将要删除如下pod：&#x27; &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line">  /usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk &#x27;&#123;if ($4 &gt;= 5)  print $1 &#125;&#x27;| grep -v &#x27;NAME&#x27;</span><br><span class="line">  echo `/usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk &#x27;&#123;if ($4 &gt;= 5)  print $1 &#125;&#x27;| grep -v &#x27;NAME&#x27;` &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line">  for i in `/usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk &#x27;&#123;if ($4 &gt;= 5)  print $1 &#125;&#x27; | grep -v &#x27;NAME&#x27;`;</span><br><span class="line">  do</span><br><span class="line">    echo $i</span><br><span class="line">    /usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config delete pod $i</span><br><span class="line">  done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>神策logagent收集Kubernetes-Pod日志</title>
    <url>/shence-logagent-k8s-log/</url>
    <content><![CDATA[<p>神策logagent收集Kubernetes Pod日志</p>
<hr>
<h4 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h4><p>神策logagent需要收集到java程序输出的日志，用于分析用户行为等</p>
<p>想到两种方案</p>
<ol>
<li>pod指定部署到某台宿主机上，日志目录挂载到宿主机，宿主机上启动logagent程序。</li>
<li>sidecar的形式</li>
</ol>
<p>目前使用第一种方案，比较稳妥，后续技术扎实后会替换成第二种，更稳定高效。</p>
<h4 id="部署logagent"><a href="#部署logagent" class="headerlink" title="部署logagent"></a>部署logagent</h4><p><a href="https://www.sensorsdata.cn/manual/log_agent.html">官方部署文档</a></p>
<h5 id="安装Jdk"><a href="#安装Jdk" class="headerlink" title="安装Jdk"></a>安装Jdk</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>
<h5 id="下载LogAgent部署包和解压"><a href="#下载LogAgent部署包和解压" class="headerlink" title="下载LogAgent部署包和解压"></a>下载LogAgent部署包和解压</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.sensorsdata.cn/release/logagent/logagent_20190605.tgz</span><br><span class="line">tar zxvf logagent_20190605.tgz</span><br></pre></td></tr></table></figure>
<h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim logagent/logagent.conf</span><br><span class="line"></span><br><span class="line">path=/var/log/veercms      #本地路径</span><br><span class="line">logagent_id=veerservice_2_241    #id</span><br><span class="line">pattern=cms.veerservice.log*     #log名称格式</span><br><span class="line">project=production</span><br><span class="line">pid_file=/data/vcg/logagent/logagent.pid</span><br><span class="line">host=172.16.249.136    #server端地址</span><br><span class="line">port=8106</span><br></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup bin/logagent &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f /data/vcg/logagent/log/logagent.log</span><br></pre></td></tr></table></figure>
<h4 id="配置节点标签"><a href="#配置节点标签" class="headerlink" title="配置节点标签"></a>配置节点标签</h4><p>两种方式实现：</p>
<ol>
<li><p>控制台上添加标签</p>
<p><img src="/shence-logagent-k8s-log/./1560925678009.jpg" alt="image-20190619142748161"></p>
</li>
<li><p>命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如给 cn-beijing.i-2ze7nm52ylwxd8j4d0lq 这个node添加标签：</span></span><br><span class="line">kubectl label nodes cn-beijing.i-2ze7nm52ylwxd8j4d0lq test-key=test-value</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看标签：</span></span><br><span class="line">kubectl get node --show-labels </span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="配置k8s-yaml"><a href="#配置k8s-yaml" class="headerlink" title="配置k8s yaml"></a>配置k8s yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">registry-vpc.cn-beijing.aliyuncs.com</span>   <span class="comment">## 保密字典中的仓储认证</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">preference:</span> &#123;&#125;</span><br><span class="line">              <span class="attr">weight:</span> <span class="number">100</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">vcgapp</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">veerlogagent</span>     <span class="comment">## node节点亲和性</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">&#x27;registry-vpc.cn-beijing.aliyuncs.com/vcg/com-veer-veerservice:pro-20190610183629&#x27;</span>   <span class="comment">## 镜像地址</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">aliyun_logs_com-veer-veerservice</span>     <span class="comment">## 日志服务</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">stdout</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/log/veerservice_log</span>   <span class="comment"># 容器内路径</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">volume-veerservice</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">4Gi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1000Mi</span></span><br><span class="line">          <span class="attr">livenessProbe:</span>        <span class="comment">## 存活检测</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line">          <span class="attr">readinessProbe:</span>         <span class="comment">## 就绪检测</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/var/log/veerservice</span>  <span class="comment"># 主机路径</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">volume-veerservice</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9101</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>SonarQube-安装部署</title>
    <url>/sonarqube/</url>
    <content><![CDATA[<h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><h5 id="Docker方式"><a href="#Docker方式" class="headerlink" title="Docker方式"></a>Docker方式</h5><h6 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker pull sonarqube</span><br></pre></td></tr></table></figure>
<h6 id="启动postgresql"><a href="#启动postgresql" class="headerlink" title="启动postgresql"></a>启动postgresql</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name db -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -d postgres</span><br></pre></td></tr></table></figure>
<h6 id="启动sonarqube"><a href="#启动sonarqube" class="headerlink" title="启动sonarqube"></a>启动sonarqube</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name sq --link db -e SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar -p 9000:9000 -d sonarqube</span><br></pre></td></tr></table></figure>
<h6 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h6><p>启动报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>
<p><img src="/sonarqube/./sonarqube1.jpg" alt></p>
<ul>
<li style="list-style: none"><input type="checkbox"> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加：</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">验证：</span></span><br><span class="line">sysctl -p | grep vm.max_map_count</span><br></pre></td></tr></table></figure>
<h4 id="访问SonarQube"><a href="#访问SonarQube" class="headerlink" title="访问SonarQube"></a>访问SonarQube</h4><h5 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h5><p>访问ip:9000</p>
<p><img src="/sonarqube/./sonarqube2.jpg" alt></p>
<p>登录用户名密码：admin，admin</p>
<p><img src="/sonarqube/./sonarqube2-1.jpg" alt></p>
<h5 id="安装中文包"><a href="#安装中文包" class="headerlink" title="安装中文包"></a>安装中文包</h5><p>Administration–Marketplace</p>
<p><img src="/sonarqube/./sonarqube3.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>TCP三次握手🤝和四次挥手👋</title>
    <url>/tcp/</url>
    <content><![CDATA[<p>TCP连接的建立与终止</p>
<p><img src="/tcp/./z.jpg" alt></p>
<span id="more"></span>
<hr>
<p><strong>这个网上转载的例子不错：</strong></p>
<p><strong>三次握手：</strong><br>A:“喂，你听得到吗？”A-&gt;SYN_SEND</p>
<p>B:“我听得到呀，你听得到我吗？”应答与请求同时发出 B-&gt;SYN_RCVD | A-&gt;ESTABLISHED</p>
<p>A:“我能听到你，今天balabala……”B-&gt;ESTABLISHED</p>
<p><strong>四次挥手：</strong><br>A:“喂，我不说了。”A-&gt;FIN_WAIT1</p>
<p>B:“我知道了。等下，上一句还没说完。Balabala…..”B-&gt;CLOSE_WAIT | A-&gt;FIN_WAIT2</p>
<p>B:”好了，说完了，我也不说了。”B-&gt;LAST_ACK</p>
<p>A:”我知道了。”A-&gt;TIME_WAIT | B-&gt;CLOSED</p>
<p>A等待2MSL,保证B收到了消息,否则重说一次”我知道了”,A-&gt;CLOSED</p>
<hr>
<h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。</p>
<p><img src="/tcp/./tcp_3.png" alt="图片"></p>
<ul>
<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li>
<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li>
<li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li>
</ul>
<p><strong>为什么要三次握手？</strong></p>
<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>
<p>具体例子：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。</p>
<p>于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
<h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p>
<p><img src="/tcp/./tcp_4.png" alt="图片"></p>
<ul>
<li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；</li>
<li>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；</li>
<li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li>
<li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</li>
</ul>
<p><strong>为什么要四次分手？</strong></p>
<p>TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p>
<p>为什么要等待2MSL？</p>
<p>MSL：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。原因有二：</p>
<ul>
<li>保证TCP协议的全双工连接能够可靠关闭</li>
<li>保证这次连接的重复数据段从网络中消失</li>
</ul>
<p>第一点：如果主机1直接CLOSED了，那么由于IP协议的不可靠性或者是其它网络原因，导致主机2没有收到主机1最后回复的ACK。那么主机2就会在超时之后继续发送FIN，此时由于主机1已经CLOSED了，就找不到与重发的FIN对应的连接。所以，主机1不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</p>
<p>第二点：如果主机1直接CLOSED，然后又再向主机2发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达主机2，由于新连接和老连接的端口号是一样的，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。</p>
]]></content>
  </entry>
  <entry>
    <title>特殊需求-jenkins-job-demo</title>
    <url>/teshuxuqiu-jenkins-job/</url>
    <content><![CDATA[<p><img src="/teshuxuqiu-jenkins-job/./z.jpg" alt><br><span id="more"></span><br>jenkins 项目中的shell脚本：</p>
<p>实现 自动构建后 访问微服务可以获取 Kubernetes pod镜像地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -e</span><br><span class="line"></span><br><span class="line">Time=`date +%Y%m%d%H%M%S`</span><br><span class="line">WorkDir=`pwd`</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">  Branch=&quot;release&quot;</span><br><span class="line">  ScopeName=&quot;test&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">  Branch=&quot;master&quot;</span><br><span class="line">  ScopeName=&quot;pre&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">  Branch=&quot;master&quot;</span><br><span class="line">  ScopeName=&quot;pro&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &gt; Dockerfile &lt;&lt;EOF</span><br><span class="line">FROM registry-vpc.cn-beijing.aliyuncs.com/vcgcs/flask</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">ADD . .</span><br><span class="line">CMD python manager.py</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; manager.py &lt;&lt;EOF</span><br><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;,methods=[&quot;GET&quot;])</span><br><span class="line">def cicd_test():</span><br><span class="line">    if request.method == &#x27;GET&#x27;:</span><br><span class="line">        test = os.popen(&quot;/usr/src/app/kubectl --kubeconfig /usr/src/app/test-config get deployment cicd-test -o yaml |grep image |grep aliyuncs |awk -F &#x27;- image:&#x27; &#x27;&#123;print \$2&#125;&#x27;&quot;).read()</span><br><span class="line">        pre = os.popen(&quot;/usr/src/app/kubectl --kubeconfig /usr/src/app/pre-config get deployment cicd-test -o yaml |grep image |grep aliyuncs |awk -F &#x27;- image:&#x27; &#x27;&#123;print \$2&#125;&#x27;&quot;).read()</span><br><span class="line">        pro = os.popen(&quot;/usr/src/app/kubectl --kubeconfig /usr/src/app/pro-config get deployment cicd-test -o yaml |grep image |grep aliyuncs |awk -F &#x27;- image:&#x27; &#x27;&#123;print \$2&#125;&#x27;&quot;).read()</span><br><span class="line">        return &quot;test环境的镜像地址: %s ,pre环境的镜像地址: %s , pro环境的镜像地址: %s&quot;  % (test,pre,pro)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,port=&#x27;5001&#x27;,debug=True)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time .</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time</span><br><span class="line">docker rmi -f registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;测试环境&quot; ]]; then</span><br><span class="line">  su - cicd-test -c &quot;kubectl set image deployment cicd-test cicd-test=registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;预发环境&quot; ]]; then</span><br><span class="line">  su - cicd-pre -c &quot;kubectl set image deployment cicd-test cicd-test=registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time&quot;</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == &quot;生产环境&quot; ]]; then</span><br><span class="line">  su - cicd-pro -c &quot;kubectl set image deployment cicd-test cicd-test=registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test环境的镜像地址: registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:test-20190530160557 ,pre环境的镜像地址: registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:pre-20190530162226 , pro环境的镜像地址: registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:pro-20190530162233</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>视觉中国-运维自动化平台实践分享</title>
    <url>/vcg-devops-share/</url>
    <content><![CDATA[<p><img src="/vcg-devops-share/./backgroud.png" alt></p>
<span id="more"></span>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="架构："><a href="#架构：" class="headerlink" title="架构："></a>架构：</h3><ul>
<li>前端：百度开源的 VUE 框架<a href="https://baidu.github.io/NoahV/#/guide/about"><strong>NoahV</strong></a></li>
<li>后端：Django</li>
<li>数据库：MySQL、Redis</li>
</ul>
<p>前端使用<a href="https://element.eleme.cn/#/zh-CN"><strong>Element</strong></a>组件库</p>
<p>Django 主要插件：</p>
<ul>
<li>celery （分布式任务管理）</li>
<li>django rest framework （标准化 API 接口）</li>
<li>python-ldap （接入 LDAP）</li>
</ul>
<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul>
<li>统一认证：接入 LDAP，统一账号管理</li>
<li>资产管理：调用公有云 SDK，获取云资源信息缓存到 Redis 实例;管理 IT 资产信息，方便 IT 支持资产盘点</li>
<li>cdn 管理：热点资源预热、刷新。</li>
<li>域名管理：dns 解析、域名备案信息</li>
<li>容器管理:调用 Kubernetes SDK 实现容器管理、方便研发同学查看日志、排查问题</li>
<li>服务管理：微服务信息、项目维护</li>
<li>统一流水线管理:工单形式对外提供服务，后台调用 Jenkins API 构建 Job，完成微服务的持续集成与交付;使用 Celery 分布式任<br>务队列，实现异步、定时任务处理</li>
<li>用户管理：RBAC</li>
</ul>
<h2 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="/vcg-devops-share/./vcg-ops-login.png" alt></p>
<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="/vcg-devops-share/./vcg-ops-home.png" alt></p>
<h3 id="资产管理"><a href="#资产管理" class="headerlink" title="资产管理"></a>资产管理</h3><h4 id="CMDB"><a href="#CMDB" class="headerlink" title="CMDB"></a>CMDB</h4><p><img src="/vcg-devops-share/./vcg-ops-cmdb.png" alt></p>
<h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p><img src="/vcg-devops-share/./vcg-ops-domain.png" alt></p>
<p><img src="/vcg-devops-share/./vcg-ops-domain-detail.png" alt></p>
<p><img src="/vcg-devops-share/./vcg-ops-dns.png" alt></p>
<h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p><img src="/vcg-devops-share/./vcg-ops-cdn.png" alt></p>
<p><img src="/vcg-devops-share/./vcg-ops-cdn-refresh.png" alt></p>
<h4 id="备案域名"><a href="#备案域名" class="headerlink" title="备案域名"></a>备案域名</h4><p><img src="/vcg-devops-share/./vcg-ops-beian-domain.png" alt></p>
<h4 id="备案主体"><a href="#备案主体" class="headerlink" title="备案主体"></a>备案主体</h4><p><img src="/vcg-devops-share/./vcg-ops-beian-zhuti.png" alt></p>
<p><img src="/vcg-devops-share/./vcg-ops-beian-zhuti-detail.png" alt></p>
<h4 id="配置白名单"><a href="#配置白名单" class="headerlink" title="配置白名单"></a>配置白名单</h4><p>由于 2021 年疫情期间，研发同事远程办公需求，需要连接测试、预览环境，为简便开发同学添加白名单，开发此功能。</p>
<p><img src="/vcg-devops-share/./vcg-ops-whitelist.png" alt></p>
<h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p><img src="/vcg-devops-share/./vcg-ops-k8s-node.png" alt></p>
<h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p><img src="/vcg-devops-share/./vcg-ops-k8s-ns.png" alt></p>
<h4 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h4><p><img src="/vcg-devops-share/./vcg-ops-k8s-deploymen.png" alt><br><img src="/vcg-devops-share/./vcg-ops-k8s-deployment-yaml.png" alt><br><img src="/vcg-devops-share/./vcg-ops-k8s-pods.png" alt><br><img src="/vcg-devops-share/./vcg-ops-k8s-log.png" alt></p>
<h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p><img src="/vcg-devops-share/./vcg-ops-k8s-service.png" alt></p>
<h4 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h4><p><img src="/vcg-devops-share/./vcg-ops-k8s-ingress.png" alt></p>
<h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p><img src="/vcg-devops-share/./vcg-ops-service.png" alt><br><img src="/vcg-devops-share/./vcg-ops-service-create.png" alt></p>
<h4 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h4><p><img src="/vcg-devops-share/./vcg-ops-project.png" alt></p>
<h3 id="部署系统"><a href="#部署系统" class="headerlink" title="部署系统"></a>部署系统</h3><h4 id="部署工单列表"><a href="#部署工单列表" class="headerlink" title="部署工单列表"></a>部署工单列表</h4><p><img src="/vcg-devops-share/./vcg-ops-deploy-list.png" alt></p>
<h4 id="创建发版工单"><a href="#创建发版工单" class="headerlink" title="创建发版工单"></a>创建发版工单</h4><p><img src="/vcg-devops-share/./vcg-ops-deploy-new.png" alt></p>
<h4 id="工单详情"><a href="#工单详情" class="headerlink" title="工单详情"></a>工单详情</h4><p><img src="/vcg-devops-share/./vcg-ops-deploy-detail.png" alt></p>
<h3 id="工单管理"><a href="#工单管理" class="headerlink" title="工单管理"></a>工单管理</h3><h4 id="工单列表"><a href="#工单列表" class="headerlink" title="工单列表"></a>工单列表</h4><p><img src="/vcg-devops-share/./vcg-ops-ticket-list.png" alt></p>
<h4 id="创建工单"><a href="#创建工单" class="headerlink" title="创建工单"></a>创建工单</h4><p><img src="/vcg-devops-share/./vcg-ops-ticket-create.png" alt></p>
<h4 id="工单详情-1"><a href="#工单详情-1" class="headerlink" title="工单详情"></a>工单详情</h4><p><img src="/vcg-devops-share/./vcg-ops-ticket-detail.png" alt></p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="修改信息"><a href="#修改信息" class="headerlink" title="修改信息"></a>修改信息</h4><p><img src="/vcg-devops-share/./vcg-ops-userinfo.png" alt></p>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p><img src="/vcg-devops-share/./vcg-ops-reset-password.png" alt></p>
]]></content>
      <tags>
        <tag>django</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode</title>
    <url>/vscode/</url>
    <content><![CDATA[<p><img src="/vscode/z.jpg" alt><br><span id="more"></span></p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>F1进行命令面板</p>
<p>输入”configure display language“</p>
<p>选择”chinese“简体中文，重启软件即可。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="必备插件安装"><a href="#必备插件安装" class="headerlink" title="必备插件安装"></a>必备插件安装</h3><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=steoates.autoimport">Auto Import</a> import 引入自动补全</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost">Import Cost</a> 查看你引入的依赖模块大小</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a> 自动补全 html 标签</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a> 自动重命名 html 标签</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Prettier - Code formatter</a> 代码自动格式化</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai">One Monokai Theme</a> vscode 主题包</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint">stylelint</a> stylelint</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a> vue 开发必备</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ElemeFE.vscode-element-helper">vscode-element-helper</a> element 开发必备</li>
</ul>
<h2 id="setting-js"><a href="#setting-js" class="headerlink" title="setting.js"></a>setting.js</h2><h3 id="vscode-setting-js配置"><a href="#vscode-setting-js配置" class="headerlink" title=".vscode/setting.js配置"></a><code>.vscode/setting.js</code>配置</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;strings&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;One Monokai&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;editor.detectIndentation&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;git.enableSmartCommit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;git.autofetch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;git.confirmSync&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typescript.updateImportsOnFileMove.enabled&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files.exclude&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;**/.idea&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.stylelint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.htmlWhitespaceSensitivity&quot;</span>: <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.vueIndentScriptAndStyle&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;docthis.authorName&quot;</span>: <span class="string">&quot;chuzhixin 1204505056@qq.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;docthis.includeAuthorTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;docthis.includeDescriptionTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;docthis.enableHungarianNotationEvaluation&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;docthis.inferTypesFromNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="string">&quot;prettier&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;onFocusChange&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path-intellisense.mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/src&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;files.eol&quot;</span>: <span class="string">&quot;\n&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>vue-demo-ssl-manager</title>
    <url>/vue-demo-ssl-manager/</url>
    <content><![CDATA[<p>证书管理vue-demo</p>
<span id="more"></span>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>证书的导入、删除、查看详情</li>
<li>计算证书的剩余天数</li>
<li>证书解析（后端处理）</li>
</ul>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"autoplay":true,"video":{"url":"/vue-demo-ssl-manager/ssl-manager.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a>index.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-row&gt;</span><br><span class="line">            &lt;el-col :span=&quot;18&quot;&gt;</span><br><span class="line">                &lt;el-button @click=&quot;dialogFormVisible = true&quot;&gt;导入证书&lt;/el-button&gt;</span><br><span class="line">                &lt;el-dialog title=&quot;导入证书&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">                    &lt;el-form :model=&quot;form&quot;&gt;</span><br><span class="line">                        &lt;el-form-item label=&quot;名称&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">                            &lt;el-input v-model=&quot;form.name&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">                        &lt;/el-form-item&gt;</span><br><span class="line">                        &lt;el-form-item label=&quot;上传方式&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">                            &lt;el-radio-group v-model=&quot;form.type&quot;&gt;</span><br><span class="line">                                &lt;el-radio label=&quot;证书内容&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">                                &lt;el-radio label=&quot;证书文件&quot;&gt;&lt;/el-radio&gt;</span><br><span class="line">                            &lt;/el-radio-group&gt;</span><br><span class="line">                        &lt;/el-form-item&gt;</span><br><span class="line">                        &lt;el-form-item v-show=&quot;form.type === &#x27;证书内容&#x27;&quot; label=&quot;证书内容&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">                            &lt;el-input type=&quot;textarea&quot; :autosize=&quot;&#123; minRows: 2, maxRows: 4 &#125;&quot; placeholder=&quot;请输入内容&quot; v-model=&quot;form.certificate&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">                        &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;el-form-item v-show=&quot;form.type === &#x27;证书文件&#x27;&quot; label=&quot;证书文件&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;file&quot; @change=&quot;getFile($event)&quot; /&gt;</span><br><span class="line">                        &lt;/el-form-item&gt;</span><br><span class="line">                    &lt;/el-form&gt;</span><br><span class="line">                    &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">                        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">                        &lt;el-button v-show=&quot;form.type === &#x27;证书内容&#x27;&quot; type=&quot;primary&quot; @click=&quot;onSubmit(&#x27;form&#x27;)&quot;&gt;提 交&lt;/el-button&gt;</span><br><span class="line">                        &lt;el-button v-show=&quot;form.type === &#x27;证书文件&#x27;&quot; style=&quot;margin-left: 10px;&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;onSubmit(&#x27;form&#x27;)&quot;&gt;提 交&lt;/el-button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/el-dialog&gt;</span><br><span class="line">            &lt;/el-col&gt;</span><br><span class="line">        &lt;/el-row&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;el-popconfirm confirm-button-text=&quot;好的&quot; cancel-button-text=&quot;不用了&quot; icon=&quot;el-icon-info&quot; icon-color=&quot;red&quot; title=&quot;确定是否删除勾选项&quot; @confirm=&quot;handleDelete()&quot;&gt;</span><br><span class="line">                &lt;el-button size=&quot;mini&quot; slot=&quot;reference&quot; type=&quot;danger&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-popconfirm&gt;</span><br><span class="line"></span><br><span class="line">            &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; max-height=&quot;510&quot; ref=&quot;multipleTable&quot; :cell-style=&quot;changeCellStyle&quot;&gt;</span><br><span class="line">                &gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;selection&quot; type=&quot;selection&quot; width=&quot;55&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;name&quot; label=&quot;name&quot; width=&quot;200&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;unit&quot; label=&quot;通用名称&quot; width=&quot;200&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;issuerName&quot; label=&quot;颁发者&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;beforeTime&quot; label=&quot;证书起始时间&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;afterTime&quot; label=&quot;证书截止时间&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;afterTime&quot; style=&quot;color: red&quot; label=&quot;剩余天数&quot; :formatter=&quot;getTotalDate&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;createTime&quot; label=&quot;创建时间&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column prop=&quot;remark&quot; label=&quot;备注&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                &lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;120&quot;&gt;</span><br><span class="line">                    &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">                        &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;handleMore(scope.$index, scope.row)&quot;&gt;More&lt;/el-button&gt;</span><br><span class="line">                    &lt;/template&gt;</span><br><span class="line">                &lt;/el-table-column&gt;</span><br><span class="line">            &lt;/el-table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">                &lt;el-pagination</span><br><span class="line">                    @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">                    @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">                    :current-page=&quot;currentPage&quot;</span><br><span class="line">                    :page-sizes=&quot;[10, 50, 100]&quot;</span><br><span class="line">                    :page-size=&quot;pagesize&quot;</span><br><span class="line">                    layout=&quot;total, sizes, prev, pager, next&quot;</span><br><span class="line">                    :total=&quot;total&quot;</span><br><span class="line">                &gt;&lt;/el-pagination&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const axios = require(&quot;axios&quot;).default;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                tableData: [],</span><br><span class="line">                currentPage: 1,</span><br><span class="line">                pagesize: 10,</span><br><span class="line">                total: 10,</span><br><span class="line">                dialogFormVisible: false,</span><br><span class="line">                form: &#123;&#125;,</span><br><span class="line">                formLabelWidth: &quot;120px&quot;,</span><br><span class="line">                fileList: [],</span><br><span class="line">                multipleTable: [],</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.requestdata(10, 1);</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeCellStyle(row, column, rowIndex, columnIndex) &#123;</span><br><span class="line">                //列的label的名称</span><br><span class="line">                if (row.column.label === &quot;剩余天数&quot;) &#123;</span><br><span class="line">                    return &quot;color:red&quot;; //修改的样式</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return &quot;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete() &#123;</span><br><span class="line">                var self = this;</span><br><span class="line">                var selection = this.$refs.multipleTable.selection;</span><br><span class="line">                var id_list = [];</span><br><span class="line">                for (let i in selection) &#123;</span><br><span class="line">                    id_list.push(selection[i].id);</span><br><span class="line">                &#125;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;post&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/ssl/_delete&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        id: id_list,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    self.requestdata(10, 1);</span><br><span class="line">                    self.$message(&#123; message: &quot;删除成功,资源id为： &quot; + String(id_list), type: &quot;success&quot; &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            submitUpload() &#123;</span><br><span class="line">                this.$refs.upload.submit();</span><br><span class="line">            &#125;,</span><br><span class="line">            handleRemove(file, fileList) &#123;</span><br><span class="line">                console.log(file, fileList);</span><br><span class="line">            &#125;,</span><br><span class="line">            handlePreview(file) &#123;</span><br><span class="line">                console.log(file);</span><br><span class="line">            &#125;,</span><br><span class="line">            getFile(event) &#123;</span><br><span class="line">                this.form.certificateFile = event.target.files[0];</span><br><span class="line">            &#125;,</span><br><span class="line">            onSubmit(formName) &#123;</span><br><span class="line">                var self = this;</span><br><span class="line"></span><br><span class="line">                if (self.form.type === &quot;证书内容&quot;) &#123;</span><br><span class="line">                    axios(&#123;</span><br><span class="line">                        method: &quot;post&quot;,</span><br><span class="line">                        url: &quot;http://devops.zhaohongye.com/api/v1/ssl/_create&quot;,</span><br><span class="line">                        data: self.form,</span><br><span class="line">                        responseType: &quot;json&quot;,</span><br><span class="line">                    &#125;).then(function(response) &#123;</span><br><span class="line">                        self.$message(&#123; message: &quot;证书导入成功&quot;, type: &quot;success&quot; &#125;);</span><br><span class="line">                        self.dialogFormVisible = false;</span><br><span class="line">                        self.form = &#123;&#125;;</span><br><span class="line">                        self.requestdata(10, 1);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    let formData = new FormData();</span><br><span class="line">                    formData.append(&quot;name&quot;, self.form.name);</span><br><span class="line">                    formData.append(&quot;certificateFile&quot;, self.form.certificateFile);</span><br><span class="line">                    axios.post(&quot;http://devops.zhaohongye.com/api/v1/ssl/_create&quot;, formData).then(function(response) &#123;</span><br><span class="line">                        self.$message(&#123; message: &quot;证书导入成功&quot;, type: &quot;success&quot; &#125;);</span><br><span class="line">                        self.dialogFormVisible = false;</span><br><span class="line">                        self.form = &#123;&#125;;</span><br><span class="line">                        self.requestdata(10, 1);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleMore(index, row) &#123;</span><br><span class="line">                this.$router.push(&#123;</span><br><span class="line">                    path: &quot;/ssl/detail&quot;,</span><br><span class="line">                    query: &#123; id: row.id &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            handleChange(file, fileList) &#123;</span><br><span class="line">                this.fileList = fileList.slice(-3);</span><br><span class="line">            &#125;,</span><br><span class="line">            handleSizeChange(val) &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                if (self.serviceTreeNodeClicked) &#123;</span><br><span class="line">                    self.requestnodedata(self.serviceTreeNodeId, val, self.currentPage);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    self.requestdata(val, self.currentPage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleCurrentChange(val) &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                if (self.serviceTreeNodeClicked) &#123;</span><br><span class="line">                    self.requestnodedata(this.serviceTreeNodeId, self.pagesize, val);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    self.requestdata(self.pagesize, val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            getTotalDate(row, column) &#123;</span><br><span class="line">                var sDate = row.afterTime;</span><br><span class="line">                var date2 = new Date();</span><br><span class="line">                var date1 = new Date(Date.parse(sDate.replace(/-/g, &quot;/&quot;)));</span><br><span class="line">                var totalDate = parseInt(Math.abs(date2.getTime() - date1.getTime()) / 1000 / 60 / 60 / 24);</span><br><span class="line">                // console.log(date1, date2, totalDate);</span><br><span class="line">                return totalDate;</span><br><span class="line">            &#125;,</span><br><span class="line">            requestdata(pageSize, pageNo) &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/ssl/_list&quot;,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        page: pageNo,</span><br><span class="line">                        pageSize: pageSize,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    var res = response.data.data;</span><br><span class="line">                    self.tableData = res.list;</span><br><span class="line">                    self.total = res.total;</span><br><span class="line">                    self.currentPage = res.page;</span><br><span class="line">                    self.pagesize = res.pagesize;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="detail-vue"><a href="#detail-vue" class="headerlink" title="detail.vue"></a>detail.vue</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- &lt;el-container&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;el-card&gt; --&gt;</span><br><span class="line">        &lt;h3 style=&quot;text-align: left;&quot;&gt;证书详情&lt;/h3&gt;</span><br><span class="line">        &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;通用名称：&#123;&#123; data.unit &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;组织：&#123;&#123; data.organization &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;颁发者：&#123;&#123; data.issuerName &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;省份：&#123;&#123; data.city &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;颁发者组织：&#123;&#123; data.issuerOrganization &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;国家：&#123;&#123; data.country &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;颁发者单位：&#123;&#123; data.issuerUnit &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;编号：&#123;&#123; data.serialNumber &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;颁发日期：&#123;&#123; data.beforeTime &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;加密算法：&#123;&#123; data.issuerName &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;截止日期：&#123;&#123; data.afterTime &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;加密强度：&#123;&#123; data.pubkeyBits &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;导入日期：&#123;&#123; data.createTime &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;签名算法：&#123;&#123; data.signatureAlgorithm &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;SHA1指纹：&#123;&#123; data.gitUrl &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;公钥SHA256-PIN：&#123;&#123; data.thirdPartyCompany &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;SHA256指纹：&#123;&#123; data.desc &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;颁发者Hash：&#123;&#123; data.desc &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;el-container&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;el-card&gt; --&gt;</span><br><span class="line">        &lt;h3 style=&quot;text-align: left;&quot;&gt;证书内容&lt;/h3&gt;</span><br><span class="line">        &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;</span><br><span class="line">                    &lt;el-input type=&quot;textarea&quot; autosize :disabled=&quot;true&quot; placeholder=&quot;空空如也&quot; v-model=&quot;textarea&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">                    &lt;!-- &#123;&#123; textarea &#125;&#125; --&gt;</span><br><span class="line">                &lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const axios = require(&quot;axios&quot;).default;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                data: &#123;&#125;,</span><br><span class="line">                textarea: &quot;&quot;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.requestdata();</span><br><span class="line">            // this.handtree();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleChange(val) &#123;</span><br><span class="line">                console.log(val);</span><br><span class="line">            &#125;,</span><br><span class="line">            requestdata() &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/ssl/_detail&quot;,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        id: self.$route.query.id,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    var res = response.data.data;</span><br><span class="line">                    console.log(res);</span><br><span class="line">                    self.data = res;</span><br><span class="line">                    self.textarea = res.certificate;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .el-row &#123;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        &amp;:last-child &#123;</span><br><span class="line">            margin-bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-col &#123;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-purple-dark &#123;</span><br><span class="line">        background: #99a9bf;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-purple &#123;</span><br><span class="line">        background: #d3dce6;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-purple-light &#123;</span><br><span class="line">        background: #e5e9f2;</span><br><span class="line">    &#125;</span><br><span class="line">    .grid-content &#123;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        min-height: 36px;</span><br><span class="line">    &#125;</span><br><span class="line">    .row-bg &#123;</span><br><span class="line">        padding: 10px 0;</span><br><span class="line">        /* background-color: #f9fafc; */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue</title>
    <url>/vue/</url>
    <content><![CDATA[<p><img src="/vue/z.jpg" alt><br><span id="more"></span></p>
<h2 id="vue2-x"><a href="#vue2-x" class="headerlink" title="vue2.x"></a>vue2.x</h2><ul>
<li><a href="https://learning.dcloud.io/#/">入门视频</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/">入门文档</a></li>
</ul>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><ul>
<li><a href="https://vuex.vuejs.org/zh/">入门文档</a></li>
</ul>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><ul>
<li><a href="https://router.vuejs.org/zh/">入门文档</a></li>
</ul>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><ul>
<li><a href="https://www.kancloud.cn/yunye/axios/234845">入门文档</a></li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)API是什么:一篇讲透API</title>
    <url>/what-is-api/</url>
    <content><![CDATA[<p><img src="/what-is-api/./api-header.jpg" alt></p>
<span id="more"></span>
<h2 id="API-Application-Programming-Interface"><a href="#API-Application-Programming-Interface" class="headerlink" title="API = Application Programming Interface"></a>API = Application Programming Interface</h2><p>API的英文即<strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface首字母的缩写，直译过来的意思就是：程序之间的接口。</p>
<p>我更倾向于把API理解为，程序之间的合约。</p>
<p>那么，究竟什么是程序之间的合约呢？</p>
<p>我们可以从现实世界里一个类比例子说起——以家政公司为例。</p>
<p>终于到了周末，本来老婆让你打扫卫生，但你决定要偷个小懒，花点小钱让家政公司派一个阿姨来给你搞定一切。那么在这里，我们说：家政公司是服务的提供商。</p>
<p>对于绝大多数人来讲，在请家政公司的阿姨前，你脑子里肯定已经有了一个预期了。阿姨是来给你打扫卫生的，如果你想让阿姨来家里给你做火锅的话，那就略奇怪了（也许你该找海底捞？）。那么我们可以说，作为一个用户，你理解这个服务包含的内容。</p>
<p>于是，阿姨来到你家里，开始辛苦打扫卫生。打扫的过程中，阿姨会问你：小伙子，你家垃圾桶在哪里呀？作为一个正常人，听到阿姨的要求你自然就会告诉阿姨垃圾桶的位置。那么我们说，作为用户的你，给服务提供商提供了必要的信息。</p>
<p>至此，类比已结束。在上面的例子中，家政公司提供了一个API，这个API的唯一作用就是帮你打扫卫生。而作为用户的你，为了让API完成它的工作，必须提供一些必要的信息，比如垃圾桶的位置。伪代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def do_clean(trash_can): # 打扫卫生的API</span><br><span class="line">  wipe_window()          # 阿姨擦窗</span><br><span class="line">  wipe_floor()           # 阿姨擦地</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>但是要注意，在这里你当然知道阿姨擦窗、擦地这些细节。但很多时候，API的实现细节你是不清楚的，而且作为用户，你可能也没有必要和动机去了解细节——毕竟给你提供好服务就可以了，你管它活儿怎么干的干嘛？</p>
<h3 id="API和函数的关系是什么"><a href="#API和函数的关系是什么" class="headerlink" title="API和函数的关系是什么"></a>API和函数的关系是什么</h3><p>那么你要说了，上面的代码不就是一个函数吗？</p>
<p>的确，很多情况下，如果你在直接使用语言提供的API的话，API的形式可能就是一个函数。</p>
<p>但其实不然，因为还有很多其它的情况，API并不一定是一个函数，有可能是一个类，一个HTTP网络请求（最主要的API，请见下文）等</p>
<h3 id="API的主要形式有哪些"><a href="#API的主要形式有哪些" class="headerlink" title="API的主要形式有哪些"></a>API的主要形式有哪些</h3><p>通常在说到API时，有几个地方经常会出现</p>
<h4 id="出现在程序语言中"><a href="#出现在程序语言中" class="headerlink" title="出现在程序语言中"></a>出现在程序语言中</h4><p>比如在Python语言中，当你需要算一个数的N次方时，你会用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">pow</span>(<span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>来表示4的2次方。而这里的<code>pow</code>函数，就是语言为你提供的API。这样的API的文档，通常在语言官方的文档中可以找到。</p>
<h4 id="出现在安装的依赖中"><a href="#出现在安装的依赖中" class="headerlink" title="出现在安装的依赖中"></a>出现在安装的依赖中</h4><p>上面说的<code>pow</code>函数，是Python自带的函数。但如果要完成更复杂的操作，通常你需要安装一些依赖。比如说，如果需要请求http服务的话，你可能会用到<code>requests</code>这个库（不知道具体这个库是什么没关系，不影响阅读本文）。而这个库它有自己的API，而这样的库的文档，一般在对应的官网或者github页面上可以找到。</p>
<h4 id="用了第三方服务以网络形式请求出现"><a href="#用了第三方服务以网络形式请求出现" class="headerlink" title="用了第三方服务以网络形式请求出现"></a>用了第三方服务以网络形式请求出现</h4><p>这是本文将会介绍的最主要的形式。第三方的服务以网络形式提供API，基本构成了现代互联网的整个基础，下一节我们详细展开说明为什么API这么重要。</p>
<h2 id="为什么需要API"><a href="#为什么需要API" class="headerlink" title="为什么需要API"></a>为什么需要API</h2><p>作为一个程序员，如果你一辈子都自己写代码的话，那真的是很孤独了。同样为人，程序员也有跟别人交流、沟通的冲动，但我们的交流和沟通，很多时候是在代码中。</p>
<p>试想，如果现代社会写的每一个功能，都需要自己把代码从0到1全写了，世界会复杂成什么样？</p>
<p>比如说，你想要搭建一个网站，发现没有Wordpress。这还不算，你必须先从汇编开始，一点点先写一个php语言，再写出来个MySQL数据库，最后在两者基础上，再来写一个网站——这该多低效！</p>
<p>于是，有的程序员自靠奋勇，做起了数据库。有的程序员做起了Wordpress这样的内容管理系统。程序员内的社会分工开始明晰起来。渐渐的，各种更细节的服务也开始有人提供了，比如说</p>
<ul>
<li>有的程序员做起了天气数据的API，这样你的APP内需要天气数据的时候，你就不用自己去测绘了，直接调他们的API</li>
<li>有的程序员做起了搜索功能的API，这样你的APP内需要搜索功能的时候，你就不用自己写个搜索引擎了，直接调他们的API</li>
<li>有的程序员做起了支付功能的API，这样你要实现收钱、付钱功能的时候，就不用自己写个支付系统了，直接调他们的API</li>
</ul>
<p>可以看到，如果福特的流水线在上个世纪极大地促进了汽车工厂的生产效率，那么API至少也起到了同样的作用：它让专人可以专心做专业的事情，而其它人写程序时，可以直接使用别人提供的API服务。</p>
<p>API的好处就在于，它让程序员之间可以轻松分工。而分工之后，你只要管好你的业务就可以，任何复杂的不在你领域内的业务，都可以找到对应的API或服务，直接调用即可。</p>
<h2 id="以网络请求为基础的API"><a href="#以网络请求为基础的API" class="headerlink" title="以网络请求为基础的API"></a>以网络请求为基础的API</h2><p>上文中提到了API常常出现的一些地方，而我提到过，以网络请求形式出现的API，是最重要的API各类之一。</p>
<p>现代互联网让各个公司也出现了分工，而公司之间的服务调用，最常见的形式就是网络请求（通常是HTTP）。比如说，打个比方你要实现以下的功能：</p>
<ol>
<li>当用户安装了你的APP，检测用户是不是正在远离家走向小区大门</li>
<li>如果是的话，自动打一个滴滴专车，判断时间如果是早上8点的话，目的地自动设为公司地址</li>
</ol>
<p>这个功能当然很蠢，但是不妨碍我们当例子来说明。</p>
<p>第一部中，所有的逻辑判断当然都可以直接调用手机的GPS来作检测即可。而在第2步中，你就必须向滴滴提供的API发出一个打车的API请求。</p>
<p>这个请求中，有两个参数，一个是出发地地址，另一个是目的地地址。以下是一个我虚构出来的API请求（因为我实在没找着滴滴的API），在这个请求中，我们向端点<code>http://www.didi.com/taxi</code>发送一个<code>POST</code>请求，参数为JSON中的出发地和目的地。如果你把这个形式记住，照葫芦画瓢，99%的标准REST API的形式都是长这个样子的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://www.didi.com/taxi </span><br><span class="line">&#123;</span><br><span class="line">    &quot;from&quot;: &quot;北京市云南大厦&quot;,</span><br><span class="line">    &quot;to&quot;: &quot;天安门&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="API到底是谁提供的"><a href="#API到底是谁提供的" class="headerlink" title="API到底是谁提供的"></a>API到底是谁提供的</h3><p>以网络请求为基础的API，通常是互联网公司自己编写和提供的。上文举的例子中，滴滴的这个API几乎一定是滴滴自己写并且提供出来的。原因很简单，只有滴滴才能向它的司机端APP发送消息。也就是说，必须要服务的提供商，才有可能向外界提供一个API。</p>
<p>为什么这些公司有动机提供一个API呢？</p>
<p>原因是他们希望自己的服务可以被更广泛的人群使用。作为开发者的你，如果用了他们提供的API，那么某种程序上你可能帮助了他们传播他们的服务（比如更多人在你的APP里可能可以用滴滴的出租车服务）。</p>
<p>另一方面，有时候API会直接向开发者收费，比如说提供了搜索服务的卡拉搜索，帮助开发者快速地搭建一个搜索引擎，省掉一大堆开发和运维搜索引擎的成本。作为回报，开发者或其所在的公司，可能直接向服务的提供商付费，这个更好理解。</p>
<p>因此，为开发者编写易用、文档清楚和方便接入的API，是符合服务提供商（互联网公司）和开发者共同利益的。</p>
<p>不幸的是，国内API的发展还在进行中，经常出现有的公司没有API，文档不全之类的情况。但我们相信，这样的情况会随着时间的往前而改善。</p>
<p>用图例来说，下图很好地说明了API和互联网公司之间的关系</p>
<p><img src="/what-is-api/./api-relationship.png" alt="API调用与API提供者之间的关系"></p>
<p>图中最左边，即API的调用者，通过网络请求，向右边的API服务器（由互联网公司编写和维护）发送请求。这些服务器可能可以操作其后台的数据库之类系统，最后会返回一个结果给调用者。</p>
<p>比方说，滴滴的API可能接收到一个请求后，向最近的司机发送一个消息，让他去你指定的出发地去接你。而完成后，滴滴的服务器可能向后台数据库中添加一条记录，记下来你的行程。这样，你就通过网络请求完成了一次向滴滴API的请求。</p>
<h2 id="API接口如何定义"><a href="#API接口如何定义" class="headerlink" title="API接口如何定义"></a>API接口如何定义</h2><p>目前最通用、使用最广泛的API标准叫作REST API。具体如何设计REST API请参考文章: <a href="https://zhaohongye.com//rest-api-best-practices/">REST API设计指南</a></p>
<h2 id="哪里有API的一些例子"><a href="#哪里有API的一些例子" class="headerlink" title="哪里有API的一些例子"></a>哪里有API的一些例子</h2><p>如上文所说，国内的互联网公司开放API的进程还比较慢，如果你可以阅读英文，我们推荐你参考以下优秀的API</p>
<ul>
<li><a href="https://docs.github.com/en/rest">GitHub API</a></li>
<li><a href="https://stripe.com/docs/api">Stripe API</a></li>
<li><a href="https://developer.twitter.com/en/docs">Twitter API</a></li>
</ul>
<p>国内的一些API例子有</p>
<ul>
<li><a href="https://kalasearch.cn/docs">卡拉搜索API</a></li>
<li><a href="https://leancloud.cn/docs/rest_api.html">Leancloud API</a></li>
<li><a href="https://www.pingxx.com/api/API 文档简介.html">Ping++ API</a></li>
</ul>
<p><strong>文章转自：<a href="https://kalasearch.cn/blog/what-is-api/">卡拉搜索</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>(转载)CI/CD是什么？如何理解持续集成、持续交付和持续部署</title>
    <url>/what-is-cicd/</url>
    <content><![CDATA[<p>CI/CD 可让持续自动化和持续监控贯穿于应用的整个生命周期（从集成和测试阶段，到交付和部署）<br><span id="more"></span></p>
<p>CI/CD 是一种通过在应用开发阶段引入<a href="https://www.redhat.com/zh/topics/automation/whats-it-automation">自动化</a>来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。作为一个面向开发和运营团队的解决方案，CI/CD 主要针对在集成新代码时所引发的问题（亦称：“<a href="https://www.solutionsiq.com/agile-glossary/integration-hell/">集成地狱</a>”）。</p>
<p>具体而言，CI/CD 可让持续自动化和持续监控贯穿于应用的整个生命周期（从集成和测试阶段，到交付和部署）。这些关联的事务通常被统称为“CI/CD 管道”，由<a href="https://www.redhat.com/zh/topics/devops">开发和运维团队</a>以敏捷方式协同支持。</p>
<hr>
<h2 id="CI-是什么？CI-和-CD-有什么区别？"><a href="#CI-是什么？CI-和-CD-有什么区别？" class="headerlink" title="CI 是什么？CI 和 CD 有什么区别？"></a>CI 是什么？CI 和 CD 有什么区别？</h2><p>缩略词 CI / CD 具有几个不同的含义。CI/CD 中的“CI”始终指持续集成，它属于开发人员的自动化流程。成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到共享存储库中。该解决方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。</p>
<p>CI/CD 中的“CD”指的是持续交付和/或持续部署，这些相关概念有时会交叉使用。两者都事关管道后续阶段的自动化，但它们有时也会单独使用，用于说明自动化程度。</p>
<p>持续<em>交付</em>通常是指开发人员对应用的更改会自动进行错误测试并上传到存储库（如 <a href="https://redhatofficial.github.io/#!/main">GitHub</a> 或容器注册表），然后由运维团队将其部署到实时生产环境中。这旨在解决开发和运维团队之间可见性及沟通较差的问题。因此，持续交付的目的就是确保尽可能减少部署新代码时所需的工作量。</p>
<p>持续<em>部署</em>（另一种“CD”）指的是自动将开发人员的更改从存储库发布到生产环境，以供客户使用。它主要为了解决因手动流程降低应用交付速度，从而使运维团队超负荷的问题。持续部署以持续交付的优势为根基，实现了管道后续阶段的自动化。</p>
<p><img src="https://www.redhat.com/cms/managed-files/ci-cd-flow-desktop_1.png" alt="CI/CD 流程"></p>
<p>CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。更为复杂的是，有时“持续交付”也包含了持续部署流程。</p>
<p>归根结底，我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。因案例而异，该术语的具体含义取决于 CI/CD 管道的自动化程度。许多企业最开始先添加 CI，然后逐步实现交付和部署的自动化（例如作为<a href="https://www.redhat.com/zh/topics/cloud-native-apps">云原生应用</a>的一部分）。</p>
<hr>
<h2 id="CI-持续集成（Continuous-Integration）"><a href="#CI-持续集成（Continuous-Integration）" class="headerlink" title="CI 持续集成（Continuous Integration）"></a>CI 持续集成（Continuous Integration）</h2><p><a href="https://www.redhat.com/zh/solutions/cloud-native-development">现代应用开发</a>的目标是让多位开发人员同时处理同一应用的不同功能。但是，如果企业安排在一天内将所有分支源代码合并在一起（称为“<a href="https://thedailywtf.com/articles/Happy_Merge_Day!">合并日</a>”），最终可能造成工作繁琐、耗时，而且需要手动完成。这是因为当一位独立工作的开发人员对应用进行更改时，有可能会与其他开发人员同时进行的更改发生冲突。如果每个开发人员都自定义自己的本地<a href="https://www.redhat.com/zh/topics/middleware/what-is-ide">集成开发环境（IDE）</a>，而不是让团队就一个基于云的 IDE 达成一致，那么就会让问题更加雪上加霜。</p>
<p>持续集成（CI）可以帮助开发人员更加频繁地（有时甚至每天）将代码更改合并到共享分支或“主干”中。一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。</p>
<p><a href="https://developers.redhat.com/blog/2017/09/06/continuous-integration-a-typical-process/">进一步了解技术细节</a></p>
<hr>
<h2 id="CD-持续交付（Continuous-Delivery）"><a href="#CD-持续交付（Continuous-Delivery）" class="headerlink" title="CD 持续交付（Continuous Delivery）"></a>CD 持续交付（Continuous Delivery）</h2><p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p>
<p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p>
<hr>
<h2 id="CD-持续部署（Continuous-Deployment）"><a href="#CD-持续部署（Continuous-Deployment）" class="headerlink" title="CD 持续部署（Continuous Deployment）"></a>CD 持续部署（Continuous Deployment）</h2><p>对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p>
<p>实际上，持续部署意味着开发人员对应用的更改在编写后的几分钟内就能生效（假设它通过了自动化测试）。这更加便于持续接收和整合用户反馈。总而言之，所有这些 CI/CD 的关联步骤都有助于降低应用的部署风险，因此更便于以小件的方式（而非一次性）发布对应用的更改。不过，由于还需要编写自动化测试以适应 CI/CD 管道中的各种测试和发布阶段，因此前期投资还是会很大。</p>
]]></content>
  </entry>
  <entry>
    <title>Jenkins介绍</title>
    <url>/what-is-jenkins/</url>
    <content><![CDATA[<p>Jenkins是一个开源的、提供友好操作界面的持续集成（CI）工具.<br><span id="more"></span></p>
<h4 id="Jenkins是什么"><a href="#Jenkins是什么" class="headerlink" title="Jenkins是什么"></a>Jenkins是什么</h4><p>Jenkins是一个开源的、提供友好操作界面的持续集成（CI）工具，起源于Hudson，主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。</p>
<p>Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。</p>
<p>常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出Kubernetes</title>
    <url>/what-is-k8s/</url>
    <content><![CDATA[<p>do what you loveeee<br><span id="more"></span><br><div class="pdfobject-container" data-target="./深入浅出Kubernetes.pdf" data-height="500px"></div></p>
]]></content>
  </entry>
  <entry>
    <title>(转载)什么是 SRE（站点可靠性工程）？</title>
    <url>/what-is-sre/</url>
    <content><![CDATA[<p>站点可靠性工程（SRE）是 IT 运维的软件工程方案。<br><span id="more"></span></p>
<p>站点可靠性工程（SRE）是 IT 运维的软件工程方案。SRE 团队使用软件作为工具，来管理系统、解决问题并实现运维任务<a href="https://www.zhaohongye.com/automation">自动化</a>。</p>
<p>SRE 执行的任务以前通常由运维团队手动执行，或者交给使用软件和自动化来解决问题和管理生产系统的工程师或运维团队来执行。 </p>
<p>在创建可扩展和高度可靠的软件系统时，SRE 是宝贵的实践。它可帮助您通过代码管理大型系统，对于管理成千上万台机器的系统管理员来说，代码更具可扩展性和可持续性。 </p>
<p>站点可靠性工程的概念由 Google 工程团队的 Ben Treynor Sloss 第一个提出。 </p>
<p>SRE 可以帮助团队在发布新功能和确保用户可靠性之间找到平衡。</p>
<p>标准化和自动化是 SRE 模型的两大重要部分。站点可靠性工程师应始终致力于增强和自动化运维任务。</p>
<p>这样一来，SRE 就能帮助提高现有系统的可靠性，同时优化体量逐渐庞大的系统。 </p>
<p>SRE 支持团队从传统 IT 运维方案迁移至<a href="https://www.redhat.com/zh/topics/cloud-native-apps">云原生</a>方案。</p>
<h2 id="站点可靠性工程师的工作是什么？"><a href="#站点可靠性工程师的工作是什么？" class="headerlink" title="站点可靠性工程师的工作是什么？"></a>站点可靠性工程师的工作是什么？</h2><p>站点可靠性工程师是一个独特的岗位，要么必须是有运维经验的软件开发人员；要么必须是有软件开发技能的系统管理员或的 IT 运维人员。 </p>
<p>SRE 团队负责部署、配置和监控代码，以及生产服务的可用性、延迟、变更管理、应急响应和容量管理。</p>
<p>站点可靠性工程可帮助团队确定可以要启动哪些新功能，以及在何时根据服务水平协议（SLA）并利用服务水平指标（SLI）和服务水平目标（SLO）定义系统所需的可靠性。 </p>
<p>SLI 是针对提供的服务水平的特定方面所定义的测量指标。关键 SLI 包括请求延迟性、可用性、错误率和系统吞吐量。SLO 基于根据 SLI 而指定的服务水平的目标值或范围。</p>
<p>然后，根据认定为可接受的停机时间确定所需系统可靠性的 SLO。这个停机时间称为误差量，即出错和中断的最大允许阈值。 </p>
<p>SRE 并不是要实现 100% 可靠性，而是针对故障做好计划并妥善应对。 </p>
<p>开发团队在发布新功能时允许出现这一定量的误差。利用 SLO 和误差量，开发团队可确定产品或服务是否能够在可用误差量的基础上启动。</p>
<p>如果某个服务在运行时处于误差量以内，则开发团队可在任何时间发布它，但是，如果系统当前有太多错误或停机时间超过误差量的允许范围，则必须使错误数减少至误差量以内后才能发布。  </p>
<p>开发团队可执行自动化运维测试以验证可靠性。 </p>
<p>站点可靠性工程师的时间要均衡分配给运维任务和项目工作。根据 Google 的 SRE 最佳实践，站点可靠性工程师最多只能将一半的时间花在运维上，所以应该监控确保不会超过这个时间。 </p>
<p>剩余的时间应专注于开发任务上，比如创建新功能，扩展系统，以及实施自动化。</p>
<p>额外的运维工作和表现欠佳的服务应重新指定给开发团队，而不是让站点可靠性工程师将太多时间花在应用或服务的运维上。 </p>
<p>自动化是站点可靠性工程师的重要工作部分。如果他们要反复处理一个问题，就会努力实现解决方案自动化。这也有助于控制运维工作在他们工作中所占的比例。 </p>
<p>保持运维和开发工作之间的平衡是 SRE 的重要组成部分。 </p>
<h2 id="DevOps-和SRE"><a href="#DevOps-和SRE" class="headerlink" title="DevOps 和SRE"></a>DevOps 和SRE</h2><p><a href="https://www.zhaohongye.com/devops">DevOps</a> 是指对企业文化、业务自动化和平台设计等方面进行全方位变革，从而实现迅捷、优质的服务交付，提升企业价值和响应能力。SRE 可视为 DevOps 的实施。</p>
<p>和 DevOps 一样，SRE 也与团队文化和关系密切相连。SRE 和 DevOps 都致力于搭建开发团队和运维团队之间的互通桥梁，以便加快交付服务。 </p>
<p>DevOps 和 SRE 实践都可以实现更快的应用开发生命周期、改进的服务质量和可靠性，以及缩短的 IT 应用开发时间等优势。</p>
<p>但 SRE 有所不同的是，它依赖于开发团队中的站点可靠性工程师，这些工程师也要有解决通信和工作流程问题的运维背景。</p>
<p>站点可靠性工程师本身要求职责重叠，兼具开发团队和运维团队的技能。 </p>
<p>DevOps 团队的开发人员常常疲于处理运维任务，需要拥有更专业运维技能，而 SRE 就能派上用场。 </p>
<p>在代码和新功能方面，DevOps 专注于有效通过开发流程，而 SRE 专注于通过创建新功能来平衡站点可靠性。 </p>
<p>基于容器技术、Kubernetes 和<a href="https://www.redhat.com/zh/topics/microservices/what-are-microservices">微服务</a>的现代化应用平台是落实 DevOps 实践的关键所在，可帮助企业交付安全的创新软件服务。</p>
<p><a href="https://go.redhat.com/accelerate-devops-openshift-20180918?intcmp=701f2000001OMH6AAO">了解如何通过 Kubernetes 平台实施 DevOps</a></p>
<h2 id="支持-SRE-的技术"><a href="#支持-SRE-的技术" class="headerlink" title="支持 SRE 的技术"></a>支持 SRE 的技术</h2><p>SRE 在<a href="https://www.redhat.com/zh/topics/devops/what-is-application-lifecycle-management-alm">应用的整个生命周期中</a>，都要确保日常运维任务自动化和标准化。<a href="https://www.redhat.com/zh/topics/containers/whats-a-linux-container">Linux® 容器</a>可为您的团队提供云原生开发所需的底层技术。容器支持集开发、交付、集成和自动化于一体的统一环境。</p>
<p>而 <a href="https://www.redhat.com/zh/topics/containers/what-is-kubernetes">Kubernetes</a> 是实现 Linux 容器操作自动化的现代方法。Kubernetes 可帮助您轻松高效地管理在公共云、私有云或混合云中运行 Linux 容器的集群。</p>
<p>选择好合适的平台后，您就可以充分利用已经实施的文化和流程变革。</p>
]]></content>
  </entry>
  <entry>
    <title>压缩、解压工具-Zip和Tar</title>
    <url>/zip-and-tar/</url>
    <content><![CDATA[<p>压缩、解压工具-Zip和Tar</p>
<h5 id="ZIP"><a href="#ZIP" class="headerlink" title="ZIP"></a>ZIP</h5><p>zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有”.zip”扩展名的压缩文件。</p>
<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zip -y</span><br></pre></td></tr></table></figure>
<h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">zip +参数 +文件名.zip +原文件</span><br></pre></td></tr></table></figure>
<h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A 调整可执行的自动解压缩文件。</span><br><span class="line">-b&lt;工作目录&gt; 指定暂时存放文件的目录。</span><br><span class="line">-c 替每个被压缩的文件加上注释。</span><br><span class="line">-d 从压缩文件内删除指定的文件。</span><br><span class="line">-D 压缩文件内不建立目录名称。</span><br><span class="line">-f 此参数的效果和指定&quot;-u&quot;参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。</span><br><span class="line">-F 尝试修复已损坏的压缩文件。</span><br><span class="line">-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</span><br><span class="line">-h 在线帮助。</span><br><span class="line">-i&lt;范本样式&gt; 只压缩符合条件的文件。</span><br><span class="line">-j 只保存文件名称及其内容，而不存放任何目录名称。</span><br><span class="line">-J 删除压缩文件前面不必要的数据。</span><br><span class="line">-k 使用MS-DOS兼容格式的文件名称。</span><br><span class="line">-l 压缩文件时，把LF字符置换成LF+CR字符。</span><br><span class="line">-ll 压缩文件时，把LF+CR字符置换成LF字符。</span><br><span class="line">-L 显示版权信息。</span><br><span class="line">-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</span><br><span class="line">-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。</span><br><span class="line">-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</span><br><span class="line">-q 不显示指令执行过程。</span><br><span class="line">-r 递归处理，将指定目录下的所有文件和子目录一并处理。</span><br><span class="line">-S 包含系统和隐藏文件。</span><br><span class="line">-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。</span><br><span class="line">-T 检查备份文件内的每个文件是否正确无误。</span><br><span class="line">-u 更换较新的文件到压缩文件内。</span><br><span class="line">-v 显示指令执行过程或显示版本信息。</span><br><span class="line">-V 保存VMS操作系统的文件属性。</span><br><span class="line">-w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。</span><br><span class="line">-x&lt;范本样式&gt; 压缩时排除符合条件的文件。</span><br><span class="line">-X 不保存额外的文件属性。</span><br><span class="line">-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。</span><br><span class="line">-z 替压缩文件加上注释。</span><br><span class="line"><span class="meta">-$</span><span class="bash"> 保存第一个被压缩文件所在磁盘的卷册名称。</span></span><br><span class="line">-&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。</span><br></pre></td></tr></table></figure>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><ul>
<li><p>将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -q -r html.zip /home/html</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在我们在 /home/html 目录下，可以执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -q -r html.zip *</span><br></pre></td></tr></table></figure>
</li>
<li><p>从压缩文件 cp.zip 中删除文件 a.c</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -dv cp.zip a.c</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="UNZIP"><a href="#UNZIP" class="headerlink" title="UNZIP"></a>UNZIP</h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install unzip -y</span><br></pre></td></tr></table></figure>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><ul>
<li><p>解压test.zip 文件到当前目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip test.zip </span><br></pre></td></tr></table></figure>
</li>
<li><p>解压test.zip 文件到/root/目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip test.zip -d /root</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="TAR"><a href="#TAR" class="headerlink" title="TAR"></a>TAR</h5><h6 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 <span class="built_in">test</span> 目录压缩为 test.tar.gz</span> </span><br><span class="line">tar zcvf test.tar.gz test/</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zxvf test.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>k8s-ingress-nginx-demo</title>
    <url>/k8s-ingress-nginx-demo/</url>
    <content><![CDATA[<p><img src="/k8s-ingress-nginx-demo/./z.jpg" alt></p>
<span id="more"></span>
<h3 id="阿里ingress生成的Nginx配置Demo"><a href="#阿里ingress生成的Nginx配置Demo" class="headerlink" title="阿里ingress生成的Nginx配置Demo"></a>阿里ingress生成的Nginx配置Demo</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Configuration checksum: 5430300241693625361</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup custom paths that do not require root access</span></span><br><span class="line"><span class="attribute">pid</span> /tmp/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="attribute">daemon</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">1048576</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_shutdown_timeout</span> <span class="number">240s</span> ;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="attribute">multi_accept</span>        <span class="literal">on</span>;</span><br><span class="line">	<span class="attribute">worker_connections</span>  <span class="number">65536</span>;</span><br><span class="line">	<span class="attribute">use</span>                 <span class="literal">epoll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="attribute">lua_package_path</span> <span class="string">&quot;/etc/nginx/lua/?.lua;;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> balancer_ewma <span class="number">10M</span>;</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> balancer_ewma_last_touched_at <span class="number">10M</span>;</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> balancer_ewma_locks <span class="number">1M</span>;</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> certificate_data <span class="number">20M</span>;</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> certificate_servers <span class="number">5M</span>;</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> configuration_data <span class="number">20M</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="section">init_by_lua_block</span> &#123;</span><br><span class="line">		collectgarbage(&quot;collect&quot;)</span><br><span class="line">		</span><br><span class="line">		-- <span class="attribute">init</span> modules</span><br><span class="line">		local ok, res</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;lua_ingress&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			lua_ingress = res</span><br><span class="line">			lua_ingress.set_config(&#123;</span><br><span class="line">				<span class="attribute">use_forwarded_headers</span> = <span class="literal">true</span>,</span><br><span class="line">				use_proxy_protocol = <span class="literal">false</span>,</span><br><span class="line">				is_ssl_passthrough_enabled = <span class="literal">false</span>,</span><br><span class="line">				http_redirect_code = <span class="number">308</span>,</span><br><span class="line">				listen_ports = &#123; <span class="attribute">ssl_proxy</span> = <span class="string">&quot;442&quot;</span>, https = <span class="string">&quot;443&quot;</span> &#125;,</span><br><span class="line">				</span><br><span class="line">				hsts = <span class="literal">true</span>,</span><br><span class="line">				hsts_max_age = <span class="number">15724800</span>,</span><br><span class="line">				hsts_include_subdomains = <span class="literal">true</span>,</span><br><span class="line">				hsts_preload = <span class="literal">false</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;configuration&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			configuration = res</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;balancer&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			balancer = res</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;monitor&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			monitor = res</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;certificate&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			certificate = res</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;plugins&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			plugins = res</span><br><span class="line">		end</span><br><span class="line">		-- load all plugins that<span class="string">&#x27;ll be used here</span></span><br><span class="line"><span class="string">		plugins.init(&#123;&#125;)</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	init_worker_by_lua_block &#123;</span></span><br><span class="line"><span class="string">		lua_ingress.init_worker()</span></span><br><span class="line"><span class="string">		balancer.init_worker()</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		monitor.init_worker()</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		plugins.run()</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	real_ip_header      X-Forwarded-For;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	real_ip_recursive   on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	set_real_ip_from    0.0.0.0/0;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	geoip_country       /etc/nginx/geoip/GeoIP.dat;</span></span><br><span class="line"><span class="string">	geoip_city          /etc/nginx/geoip/GeoLiteCity.dat;</span></span><br><span class="line"><span class="string">	geoip_org           /etc/nginx/geoip/GeoIPASNum.dat;</span></span><br><span class="line"><span class="string">	geoip_proxy_recursive on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	aio                 threads;</span></span><br><span class="line"><span class="string">	aio_write           on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	tcp_nopush          on;</span></span><br><span class="line"><span class="string">	tcp_nodelay         on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	log_subrequest      on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	reset_timedout_connection on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	keepalive_timeout  75s;</span></span><br><span class="line"><span class="string">	keepalive_requests 100;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	client_body_temp_path           /tmp/client-body;</span></span><br><span class="line"><span class="string">	fastcgi_temp_path               /tmp/fastcgi-temp;</span></span><br><span class="line"><span class="string">	proxy_temp_path                 /tmp/proxy-temp;</span></span><br><span class="line"><span class="string">	ajp_temp_path                   /tmp/ajp-temp;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	client_header_buffer_size       1k;</span></span><br><span class="line"><span class="string">	client_header_timeout           60s;</span></span><br><span class="line"><span class="string">	large_client_header_buffers     4 8k;</span></span><br><span class="line"><span class="string">	client_body_buffer_size         8k;</span></span><br><span class="line"><span class="string">	client_body_timeout             60s;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	http2_max_field_size            4k;</span></span><br><span class="line"><span class="string">	http2_max_header_size           16k;</span></span><br><span class="line"><span class="string">	http2_max_requests              1000;</span></span><br><span class="line"><span class="string">	http2_max_concurrent_streams    128;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	types_hash_max_size             2048;</span></span><br><span class="line"><span class="string">	server_names_hash_max_size      16384;</span></span><br><span class="line"><span class="string">	server_names_hash_bucket_size   128;</span></span><br><span class="line"><span class="string">	map_hash_bucket_size            64;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	proxy_headers_hash_max_size     512;</span></span><br><span class="line"><span class="string">	proxy_headers_hash_bucket_size  64;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	variables_hash_bucket_size      256;</span></span><br><span class="line"><span class="string">	variables_hash_max_size         2048;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	underscores_in_headers          on;</span></span><br><span class="line"><span class="string">	ignore_invalid_headers          on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	limit_req_status                503;</span></span><br><span class="line"><span class="string">	limit_conn_status               503;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	include /etc/nginx/mime.types;</span></span><br><span class="line"><span class="string">	default_type text/html;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	gzip on;</span></span><br><span class="line"><span class="string">	gzip_comp_level 5;</span></span><br><span class="line"><span class="string">	gzip_http_version 1.1;</span></span><br><span class="line"><span class="string">	gzip_min_length 256;</span></span><br><span class="line"><span class="string">	gzip_types application/atom+xml application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/javascript text/plain text/x-component;</span></span><br><span class="line"><span class="string">	gzip_proxied any;</span></span><br><span class="line"><span class="string">	gzip_vary on;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	# Custom headers for response</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	server_tokens off;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	more_clear_headers Server;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	# disable warnings</span></span><br><span class="line"><span class="string">	uninitialized_variable_warn off;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	# Additional available variables:</span></span><br><span class="line"><span class="string">	# $namespace</span></span><br><span class="line"><span class="string">	# $ingress_name</span></span><br><span class="line"><span class="string">	# $service_name</span></span><br><span class="line"><span class="string">	# $service_port</span></span><br><span class="line"><span class="string">	log_format upstreaminfo &#x27;</span>$remote_addr - [$remote_addr] - $remote_user [$time_local] <span class="string">&quot;$request&quot;</span> $status $body_bytes_sent <span class="string">&quot;$http_referer&quot;</span> <span class="string">&quot;$http_user_agent&quot;</span> $request_length $request_time [$proxy_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id $host [$proxy_alternative_upstream_name]<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	map $request_uri $loggable &#123;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		default 1;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	access_log /var/log/nginx/access.log upstreaminfo  if=$loggable;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	error_log  /var/log/nginx/error.log notice;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	resolver 192.168.152.10 valid=30s ipv6=off;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	# See https://www.nginx.com/blog/websocket-nginx</span></span><br><span class="line"><span class="string">	map $http_upgrade $connection_upgrade &#123;</span></span><br><span class="line"><span class="string">		default          upgrade;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		# See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive</span></span><br><span class="line"><span class="string">		&#x27;</span><span class="string">&#x27;               &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	map &#x27;</span><span class="string">&#x27; $the_real_ip &#123;</span></span><br><span class="line"><span class="string">		default   $remote_addr;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	# Reverse proxies can detect if a client provides a X-Request-ID header, and pass it on to the backend server.</span></span><br><span class="line"><span class="string">	# If no such header is provided, it can provide a random value.</span></span><br><span class="line"><span class="string">	map $http_x_request_id $req_id &#123;</span></span><br><span class="line"><span class="string">		default   $http_x_request_id;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		&quot;&quot;        $request_id;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	# We can&#x27;</span>t use $proxy_add_x_forwarded_for because the realip module</span><br><span class="line">	<span class="comment"># replaces the remote_addr too soon</span></span><br><span class="line">	map $http_x_forwarded_for $full_x_forwarded_for &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">default</span>          <span class="string">&quot;$http_x_forwarded_for, $realip_remote_addr&quot;</span>;</span><br><span class="line">		&#x27;&#x27;               &quot;$realip_remote_addr&quot;;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># Create a variable that contains the literal $ character.</span></span><br><span class="line">	<span class="comment"># This works because the geo module will not resolve variables.</span></span><br><span class="line">	<span class="attribute">geo</span> $literal_dollar &#123;</span><br><span class="line">		<span class="attribute">default</span> <span class="string">&quot;$&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">server_name_in_redirect</span> <span class="literal">off</span>;</span><br><span class="line">	<span class="attribute">port_in_redirect</span>        <span class="literal">off</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">ssl_early_data</span> <span class="literal">off</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># turn on session caching to drastically improve performance</span></span><br><span class="line">	</span><br><span class="line">	<span class="attribute">ssl_session_cache</span> builtin:<span class="number">1000</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">	<span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># allow configuring ssl session tickets</span></span><br><span class="line">	<span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># slightly reduce the time-to-first-byte</span></span><br><span class="line">	<span class="attribute">ssl_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># allow configuring custom ssl ciphers</span></span><br><span class="line">	<span class="attribute">ssl_ciphers</span> <span class="string">&#x27;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#x27;</span>;</span><br><span class="line">	<span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">ssl_ecdh_curve</span> auto;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># PEM sha: 9ffed1f14827f673aec06694b765f0facbae20cc</span></span><br><span class="line">	<span class="attribute">ssl_certificate</span>     /etc/ingress-controller/ssl/default-fake-certificate.pem;</span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> /etc/ingress-controller/ssl/default-fake-certificate.pem;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">proxy_ssl_session_reuse</span> <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">upstream</span> upstream_balancer &#123;</span><br><span class="line">		<span class="comment">### Attention!!!</span></span><br><span class="line">		<span class="comment">#</span></span><br><span class="line">		<span class="comment"># We no longer create &quot;upstream&quot; section for every backend.</span></span><br><span class="line">		<span class="comment"># Backends are handled dynamically using Lua. If you would like to debug</span></span><br><span class="line">		<span class="comment"># and see what backends ingress-nginx has in its memory you can</span></span><br><span class="line">		<span class="comment"># install our kubectl plugin https://kubernetes.github.io/ingress-nginx/kubectl-plugin.</span></span><br><span class="line">		<span class="comment"># Once you have the plugin you can use &quot;kubectl ingress-nginx backends&quot; command to</span></span><br><span class="line">		<span class="comment"># inspect current backends.</span></span><br><span class="line">		<span class="comment">#</span></span><br><span class="line">		<span class="comment">###</span></span><br><span class="line">		</span><br><span class="line">		<span class="attribute">server</span> <span class="number">0.0.0.1</span>; <span class="comment"># placeholder</span></span><br><span class="line">		</span><br><span class="line">		<span class="section">balancer_by_lua_block</span> &#123;</span><br><span class="line">			balancer.balance()</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">keepalive_timeout</span>  <span class="number">60s</span>;</span><br><span class="line">		<span class="attribute">keepalive_requests</span> <span class="number">100</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># Cache for internal auth checks</span></span><br><span class="line">	<span class="attribute">proxy_cache_path</span> /tmp/nginx-cache-auth levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=auth_cache:<span class="number">10m</span> max_size=<span class="number">128m</span> inactive=<span class="number">30m</span> use_temp_path=<span class="literal">off</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># Global filters</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">## start server *.activity-admin.vcgvip.com</span></span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">server_name</span> <span class="regexp">*.activity-admin.vcgvip.com</span> ;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">80</span>  ;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">443</span>  ssl http2 ;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">set</span> $proxy_upstream_name <span class="string">&quot;-&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="section">ssl_certificate_by_lua_block</span> &#123;</span><br><span class="line">			certificate.call()</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $namespace      <span class="string">&quot;default&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $ingress_name   <span class="string">&quot;node-vdam2-contest-config&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $service_name   <span class="string">&quot;node-vdam2-contest-config&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $service_port   <span class="string">&quot;80&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $location_path  <span class="string">&quot;/&quot;</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line">				lua_ingress.rewrite(&#123;</span><br><span class="line">					<span class="attribute">force_ssl_redirect</span> = <span class="literal">false</span>,</span><br><span class="line">					ssl_redirect = <span class="literal">false</span>,</span><br><span class="line">					force_no_ssl_redirect = <span class="literal">false</span>,</span><br><span class="line">					use_port_in_redirects = <span class="literal">false</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">				balancer.rewrite()</span><br><span class="line">				plugins.run()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># be careful with `access_by_lua_block` and `satisfy any` directives as satisfy any</span></span><br><span class="line">			<span class="comment"># will always succeed when there&#x27;s `access_by_lua_block` that does not have any lua code doing `ngx.exit(ngx.DECLINED)`</span></span><br><span class="line">			<span class="comment"># other authentication method such as basic auth or external auth useless - all requests will be allowed.</span></span><br><span class="line">			<span class="comment">#access_by_lua_block &#123;</span></span><br><span class="line">			<span class="comment">#&#125;</span></span><br><span class="line">			</span><br><span class="line">			header_filter_by_lua_block &#123;</span><br><span class="line">				lua_ingress.header()</span><br><span class="line">				plugins.run()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="section">body_filter_by_lua_block</span> &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="section">log_by_lua_block</span> &#123;</span><br><span class="line">				balancer.log()</span><br><span class="line">				</span><br><span class="line">				monitor.call()</span><br><span class="line">				</span><br><span class="line">				plugins.run()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">port_in_redirect</span> <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $balancer_ewma_score -<span class="number">1</span>;</span><br><span class="line">			<span class="attribute">set</span> $proxy_upstream_name <span class="string">&quot;default-node-vdam2-contest-config-80&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $proxy_host          $proxy_upstream_name;</span><br><span class="line">			<span class="attribute">set</span> $pass_access_scheme  $scheme;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $pass_server_port    $server_port;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $best_http_host      $http_host;</span><br><span class="line">			<span class="attribute">set</span> $pass_port           $pass_server_port;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $proxy_alternative_upstream_name <span class="string">&quot;&quot;</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">client_max_body_size</span>                    <span class="number">200m</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> Host                   $best_http_host;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Pass the extracted client certificate to the backend</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Allow websocket connections</span></span><br><span class="line">			<span class="attribute">proxy_set_header</span>                        Upgrade           $http_upgrade;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span>                        Connection        $connection_upgrade;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Request-ID           $req_id;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Real-IP              $remote_addr;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-For        $full_x_forwarded_for;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-Host       $best_http_host;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-Port       $pass_port;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-Proto      $pass_access_scheme;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Scheme               $pass_access_scheme;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Pass the original X-Forwarded-For</span></span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Original-Forwarded-For $http_x_forwarded_for;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># mitigate HTTPoxy Vulnerability</span></span><br><span class="line">			<span class="comment"># https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/</span></span><br><span class="line">			<span class="attribute">proxy_set_header</span> Proxy                  <span class="string">&quot;&quot;</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Custom headers to proxied server</span></span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span>                   <span class="number">10s</span>;</span><br><span class="line">			<span class="attribute">proxy_send_timeout</span>                      <span class="number">60s</span>;</span><br><span class="line">			<span class="attribute">proxy_read_timeout</span>                      <span class="number">60s</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_buffering</span>                         <span class="literal">off</span>;</span><br><span class="line">			<span class="attribute">proxy_buffer_size</span>                       <span class="number">4k</span>;</span><br><span class="line">			<span class="attribute">proxy_buffers</span>                           <span class="number">4</span> <span class="number">4k</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_max_temp_file_size</span>                <span class="number">1024m</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_request_buffering</span>                 <span class="literal">on</span>;</span><br><span class="line">			<span class="attribute">proxy_http_version</span>                      <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_cookie_domain</span>                     <span class="literal">off</span>;</span><br><span class="line">			<span class="attribute">proxy_cookie_path</span>                       <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># In case of errors try the next upstream server before returning an error</span></span><br><span class="line">			<span class="attribute">proxy_next_upstream</span>                     <span class="literal">error</span> timeout;</span><br><span class="line">			<span class="attribute">proxy_next_upstream_timeout</span>             <span class="number">0</span>;</span><br><span class="line">			<span class="attribute">proxy_next_upstream_tries</span>               <span class="number">3</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://upstream_balancer;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_redirect</span>                          <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">## start server ops.visualchina.com</span></span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">server_name</span> ops.visualchina.com ;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">80</span>  ;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">443</span>  ssl http2 ;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">set</span> $proxy_upstream_name <span class="string">&quot;-&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="section">ssl_certificate_by_lua_block</span> &#123;</span><br><span class="line">			certificate.call()</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $namespace      <span class="string">&quot;default&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $ingress_name   <span class="string">&quot;virgo&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $service_name   <span class="string">&quot;virgo-noahv-vcg-com&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $service_port   <span class="string">&quot;80&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $location_path  <span class="string">&quot;/&quot;</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line">				lua_ingress.rewrite(&#123;</span><br><span class="line">					<span class="attribute">force_ssl_redirect</span> = <span class="literal">true</span>,</span><br><span class="line">					ssl_redirect = <span class="literal">false</span>,</span><br><span class="line">					force_no_ssl_redirect = <span class="literal">false</span>,</span><br><span class="line">					use_port_in_redirects = <span class="literal">false</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">				balancer.rewrite()</span><br><span class="line">				plugins.run()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># be careful with `access_by_lua_block` and `satisfy any` directives as satisfy any</span></span><br><span class="line">			<span class="comment"># will always succeed when there&#x27;s `access_by_lua_block` that does not have any lua code doing `ngx.exit(ngx.DECLINED)`</span></span><br><span class="line">			<span class="comment"># other authentication method such as basic auth or external auth useless - all requests will be allowed.</span></span><br><span class="line">			<span class="comment">#access_by_lua_block &#123;</span></span><br><span class="line">			<span class="comment">#&#125;</span></span><br><span class="line">			</span><br><span class="line">			header_filter_by_lua_block &#123;</span><br><span class="line">				lua_ingress.header()</span><br><span class="line">				plugins.run()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="section">body_filter_by_lua_block</span> &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="section">log_by_lua_block</span> &#123;</span><br><span class="line">				balancer.log()</span><br><span class="line">				</span><br><span class="line">				monitor.call()</span><br><span class="line">				</span><br><span class="line">				plugins.run()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">port_in_redirect</span> <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $balancer_ewma_score -<span class="number">1</span>;</span><br><span class="line">			<span class="attribute">set</span> $proxy_upstream_name <span class="string">&quot;default-virgo-noahv-vcg-com-80&quot;</span>;</span><br><span class="line">			<span class="attribute">set</span> $proxy_host          $proxy_upstream_name;</span><br><span class="line">			<span class="attribute">set</span> $pass_access_scheme  $scheme;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $pass_server_port    $server_port;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $best_http_host      $http_host;</span><br><span class="line">			<span class="attribute">set</span> $pass_port           $pass_server_port;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">set</span> $proxy_alternative_upstream_name <span class="string">&quot;&quot;</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">client_max_body_size</span>                    <span class="number">200m</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> Host                   $best_http_host;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Pass the extracted client certificate to the backend</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Allow websocket connections</span></span><br><span class="line">			<span class="attribute">proxy_set_header</span>                        Upgrade           $http_upgrade;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span>                        Connection        $connection_upgrade;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Request-ID           $req_id;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Real-IP              $remote_addr;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-For        $full_x_forwarded_for;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-Host       $best_http_host;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-Port       $pass_port;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-Proto      $pass_access_scheme;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Scheme               $pass_access_scheme;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Pass the original X-Forwarded-For</span></span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Original-Forwarded-For $http_x_forwarded_for;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># mitigate HTTPoxy Vulnerability</span></span><br><span class="line">			<span class="comment"># https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/</span></span><br><span class="line">			<span class="attribute">proxy_set_header</span> Proxy                  <span class="string">&quot;&quot;</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Custom headers to proxied server</span></span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span>                   <span class="number">10s</span>;</span><br><span class="line">			<span class="attribute">proxy_send_timeout</span>                      <span class="number">60s</span>;</span><br><span class="line">			<span class="attribute">proxy_read_timeout</span>                      <span class="number">60s</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_buffering</span>                         <span class="literal">off</span>;</span><br><span class="line">			<span class="attribute">proxy_buffer_size</span>                       <span class="number">4k</span>;</span><br><span class="line">			<span class="attribute">proxy_buffers</span>                           <span class="number">4</span> <span class="number">4k</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_max_temp_file_size</span>                <span class="number">1024m</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_request_buffering</span>                 <span class="literal">on</span>;</span><br><span class="line">			<span class="attribute">proxy_http_version</span>                      <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_cookie_domain</span>                     <span class="literal">off</span>;</span><br><span class="line">			<span class="attribute">proxy_cookie_path</span>                       <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># In case of errors try the next upstream server before returning an error</span></span><br><span class="line">			<span class="attribute">proxy_next_upstream</span>                     <span class="literal">error</span> timeout;</span><br><span class="line">			<span class="attribute">proxy_next_upstream_timeout</span>             <span class="number">0</span>;</span><br><span class="line">			<span class="attribute">proxy_next_upstream_tries</span>               <span class="number">3</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://upstream_balancer;</span><br><span class="line">			</span><br><span class="line">			<span class="attribute">proxy_redirect</span>                          <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">## end server ops.visualchina.com</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">## end server xuexi.vcg.com</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># backend for when default-backend-service is not configured or it does not have endpoints</span></span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">8181</span> default_server reuseport backlog=<span class="number">65535</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">set</span> $proxy_upstream_name <span class="string">&quot;internal&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># default server, used for NGINX healthcheck and access to nginx stats</span></span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">127.0.0.1:10246</span>;</span><br><span class="line">		<span class="attribute">set</span> $proxy_upstream_name <span class="string">&quot;internal&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">keepalive_timeout</span> <span class="number">0</span>;</span><br><span class="line">		<span class="attribute">gzip</span> <span class="literal">off</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> /healthz &#123;</span><br><span class="line">			<span class="attribute">return</span> <span class="number">200</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> /is-dynamic-lb-initialized &#123;</span><br><span class="line">			<span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">				<span class="attribute">local</span> configuration = require(<span class="string">&quot;configuration&quot;</span>)</span><br><span class="line">				local backend_data = configuration.get_backends_data()</span><br><span class="line">				if not backend_data then</span><br><span class="line">					ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</span><br><span class="line">					return</span><br><span class="line">				end</span><br><span class="line">				</span><br><span class="line">				ngx.say(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">				ngx.exit(ngx.HTTP_OK)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		location /nginx_status &#123;</span><br><span class="line">			<span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> /configuration &#123;</span><br><span class="line">			<span class="attribute">client_max_body_size</span>                    <span class="number">21m</span>;</span><br><span class="line">			<span class="attribute">client_body_buffer_size</span>                 <span class="number">21m</span>;</span><br><span class="line">			<span class="attribute">proxy_buffering</span>                         <span class="literal">off</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">				configuration.call()</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">				ngx.exit(ngx.HTTP_NOT_FOUND)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">	<span class="attribute">lua_package_path</span> <span class="string">&quot;/etc/nginx/lua/?.lua;/etc/nginx/lua/vendor/?.lua;;&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">lua_shared_dict</span> tcp_udp_configuration_data <span class="number">5M</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="section">init_by_lua_block</span> &#123;</span><br><span class="line">		collectgarbage(&quot;collect&quot;)</span><br><span class="line">		</span><br><span class="line">		-- <span class="attribute">init</span> modules</span><br><span class="line">		local ok, res</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;configuration&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			configuration = res</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;tcp_udp_configuration&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			tcp_udp_configuration = res</span><br><span class="line">		end</span><br><span class="line">		</span><br><span class="line">		ok, res = pcall(require, <span class="string">&quot;tcp_udp_balancer&quot;</span>)</span><br><span class="line">		if not ok then</span><br><span class="line">			<span class="literal">error</span>(<span class="string">&quot;require failed: &quot;</span> .. tostring(res))</span><br><span class="line">		else</span><br><span class="line">			tcp_udp_balancer = res</span><br><span class="line">		end</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	init_worker_by_lua_block &#123;</span><br><span class="line">		tcp_udp_balancer.init_worker()</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">lua_add_variable</span> $proxy_upstream_name;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">log_format</span> log_stream <span class="string">&#x27;[$remote_addr] [$time_local] $protocol $status $bytes_sent $bytes_received $session_time&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">access_log</span> /var/log/nginx/access.log log_stream ;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">error_log</span>  /var/log/nginx/error.log;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">upstream</span> upstream_balancer &#123;</span><br><span class="line">		<span class="attribute">server</span> <span class="number">0.0.0.1:1234</span>; <span class="comment"># placeholder</span></span><br><span class="line">		</span><br><span class="line">		<span class="section">balancer_by_lua_block</span> &#123;</span><br><span class="line">			tcp_udp_balancer.balance()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">127.0.0.1:10247</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">			tcp_udp_configuration.call()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># TCP services</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># UDP services</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Terraform-基础架构管理工具</title>
    <url>/terraform/</url>
    <content><![CDATA[<p><img src="/terraform/./VCG41N888243686.jpg" alt></p>
<p>Terraform是一种开源工具，用于安全高效地预览，配置和管理云基础架构和资源。</p>
<span id="more"></span>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><a href="https://www.terraform.io/?spm=a2c4g.11186623.2.11.55e267a38YzsUB">HashiCorp Terraform</a> 是一个IT基础架构自动化编排工具，可以用代码来管理维护 IT 资源。Terraform的命令行接口（CLI）提供一种简单机制，用于将配置文件部署到阿里云或其他任意支持的云上，并对其进行版本控制。它编写了描述云资源拓扑的配置文件中的基础结构，例如虚拟机、存储帐户和网络接口。</p>
<p>Terraform是一个高度可扩展的工具，通过 Provider 来支持新的基础架构。Terraform能够让您在阿里云上轻松使用 <a href="https://www.terraform.io/docs/configuration/syntax.html">简单模板语言</a> 来定义、预览和部署云基础结构。您可以使用Terraform来创建、修改、删除ECS、VPC、RDS、SLB等多种资源。</p>
<p>阿里云作为国内第一家与 Terraform 集成的云厂商，<a href="https://www.terraform.io/docs/providers/alicloud/index.html">terraform-provider-alicloud</a>目前已经提供了超过 163 个 Resource 和 113 个 Data Source，覆盖计算，存储，网络，负载均衡，CDN，容器服务，中间件，访问控制，数据库等超过35款产品，已经满足了大量大客户的自动化上云需求。</p>
<p>从 Terraform 0.12.2 版本开始，阿里云支持将对象存储服务 OSS 作为标准的<a href="https://www.terraform.io/docs/backends/types/oss.html">Remote State Backend</a>，开始提供远端存储 State 的能力，在提高 state 安全性的同时，提升多人协作效率。</p>
<p>为了给开发者提供“开箱即用”的使用体验，阿里云提供了丰富多样的<a href="https://registry.terraform.io/browse/modules?provider=alicloud">Modules</a> 和<a href="https://github.com/terraform-providers/terraform-provider-alicloud/tree/master/examples">Examples</a>，覆盖计算，存储，网络，中间件，数据库等多个产品和使用场景，欢迎大家使用和贡献自己的Module。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li><p>将基础结构部署到多个云</p>
<p>Terraform适用于多云方案，将类似的基础结构部署到阿里云、其他云提供商或者本地数据中心。开发人员能够使用相同的工具和相似的配置文件同时管理不同云提供商的资源。</p>
</li>
<li><p>自动化管理基础结构</p>
<p>Terraform能够创建配置文件的模板，以可重复、可预测的方式定义、预配和配置ECS资源，减少因人为因素导致的部署和管理错误。能够多次部署同一模板，创建相同的开发、测试和生产环境。</p>
</li>
<li><p>基础架构即代码（Infrastructure as Code）</p>
<p>可以用代码来管理维护资源。允许保存基础设施状态，从而使您能够跟踪对系统（基础设施即代码）中不同组件所做的更改，并与其他人共享这些配置 。</p>
</li>
<li><p>降低开发成本</p>
<p>您通过按需创建开发和部署环境来降低成本。并且，您可以在系统更改之前进行评估。</p>
</li>
</ul>
<p>Terraform可以对基础设施进行编码，利用代码来进行资源的增删查改。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="创建基础设施"><a href="#创建基础设施" class="headerlink" title="创建基础设施"></a>创建基础设施</h3><p>您可以使用Terraform创建和管理ECS、VPC和SLB等基础资源。</p>
<p>创建多台ECS并挂载数据盘，请参见示例模板<a href="https://registry.terraform.io/modules/alibaba/ecs-instance/alicloud">ecs-instance</a>。</p>
<h3 id="均衡负载业务流量"><a href="#均衡负载业务流量" class="headerlink" title="均衡负载业务流量"></a>均衡负载业务流量</h3><p>您可以将访问流量按照定义的转发规则分发到指定的后端服务器（ECS实例），提高应用系统对外的服务能力，消除单点故障。</p>
<p>部署负载均衡服务，请参见示例模板<a href="https://github.com/terraform-providers/terraform-provider-alicloud/tree/master/examples/ecs-slb">ecs-slb</a>。</p>
<h3 id="自动伸缩"><a href="#自动伸缩" class="headerlink" title="自动伸缩"></a>自动伸缩</h3><p>根据您的业务需求和策略自动调整弹性计算资源，在业务需求增长时无缝增加ECS实例满足计算需要，在业务需求下降时自动减少ECS实例节约成本。</p>
<p>一键创建伸缩组，伸缩配置和伸缩规则相关操作，请参见示例模板<a href="https://registry.terraform.io/modules/terraform-alicloud-modules/autoscaling/alicloud">autoscaling</a>和<a href="https://registry.terraform.io/modules/terraform-alicloud-modules/autoscaling-rule/alicloud">autoscaling-rule</a>。</p>
<h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>您可以使用Terraform快速创建专有网络的集群。</p>
<p>在阿里云中启动kubernetes集群，并且在集群中创建VPC、交换机和NAT网关等资源，请参见示例模板<a href="https://registry.terraform.io/modules/aliyun/kubernetes/alicloud">kubernetes module</a>。</p>
<h3 id="配置函数计算服务"><a href="#配置函数计算服务" class="headerlink" title="配置函数计算服务"></a>配置函数计算服务</h3><p>阿里云函数计算是事件驱动的全托管计算服务。通过函数计算，您无需管理服务器等基础设施，只需编写代码并上传。借助于函数计算，您可以快速构建任何类型的应用和服务，无需管理和运维。</p>
<p>一键搭建函数服务运行环境，快速配置对象存储、内容分发网络、消息队列、HTTP服务、日志服务等多种触发器，请参见示例模板：<a href="https://registry.terraform.io/modules/terraform-alicloud-modules/fc/alicloud">fc module</a>。</p>
<h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>在使用Terraform的简单模板语言定义、预览和部署云基础结构前，您需要安装预配置Terraform。</p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>登录 <a href="https://www.terraform.io/downloads.html">Terraform官网</a> 下载适用于您的操作系统的程序包。</p>
</li>
<li><p>将程序包解压到/usr/local/bin。</p>
<p>如果将可执行文件解压到其他目录，按照以下方法为其定义全局路径：</p>
<ul>
<li>Linux：参见 <a href="https://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux-unix">在Linux系统定义全局路径</a>。</li>
<li>Windows：参见 <a href="https://stackoverflow.com/questions/1618280/where-can-i-set-path-to-make-exe-on-windows">在Windows系统定义全局路径</a>。</li>
<li>Mac：参见 <a href="https://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux-unix">在Mac系统定义全局路径</a>。</li>
</ul>
</li>
<li><p>运行<code>terraform</code>验证路径配置。</p>
<p>命令运行后将显示可用的Terraform选项的列表，如下所示，表示安装完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username:~$ terraform</span><br><span class="line">Usage: terraform [-version] [-help] &lt;command&gt; [args]</span><br></pre></td></tr></table></figure>
</li>
<li><p>为提高权限管理的灵活性和安全性，建议您创建RAM用户，并为其授权。</p>
<ol>
<li>登录 <a href="https://ram.console.aliyun.com/#/overview">RAM控制台</a>。</li>
<li>创建名为Terraform的RAM用户，并为该用户创建AccessKey。具体步骤请参见<a href="https://help.aliyun.com/document_detail/28637.html">创建RAM用户</a>。</li>
<li>为RAM用户授权。具体步骤请参见<a href="https://help.aliyun.com/document_detail/116146.html">为RAM用户授权</a>。</li>
</ol>
</li>
<li><p>创建环境变量，用于存放身份认证信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ALICLOUD_ACCESS_KEY=&quot;LTAIUrZCw3********&quot;</span><br><span class="line">export ALICLOUD_SECRET_KEY=&quot;zfwwWAMWIAiooj14GQ2*************&quot;</span><br><span class="line">export ALICLOUD_REGION=&quot;cn-beijing&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul>
<li><a href="https://www.terraform.io/docs/configuration/syntax.html?spm=a2c4g.11186623.2.11.405b16f2QF7QP5">简单模板语言</a></li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Terraform是一个管理IT资源的客户端工具，您可以使用Terraform提供的命令来实现对所有资源的管理。本文将主要围绕资源管理和状态管理两个方面为您介绍涉及到的常用命令。</p>
<h3 id="资源管理常用命令"><a href="#资源管理常用命令" class="headerlink" title="资源管理常用命令"></a>资源管理常用命令</h3><p>Terraform对资源的管理主要是对资源生命周期的管理，即通过命令实现对Terraform模板中所定义资源的创建，修改，查看和删除。</p>
<ul>
<li><p>terraform plan</p>
<p>：资源的预览</p>
<p>plan命令用于对模板中所定义资源的预览，主要用于以下几个场景：</p>
<ul>
<li>预览当前模板中定义的资源是否符合管理预期，和Markdown的预览功能类似。</li>
<li>如果当前模板已经存在对应的state文件，那么plan命令将会展示模板定义与state文件内容的diff结果，如果有变更，会将结果在下方显示出来。</li>
<li>对DataSource而言，执行plan命令，即可直接获取并输出所要查询的资源及其属性。</li>
</ul>
</li>
<li><p>terraform apply</p>
<p>：资源的新建和变更</p>
<p>apply命令用于实际资源的新建和变更操作，为了安全起见，在命令运行过程中增加了人工交互的过程，即需要手动确认是否继续，当然也可以通过<strong>–auto-approve</strong>参数来跳过人工确认的过程。</p>
<p>apply命令适用于以下几种场景：</p>
<ul>
<li>创建新的资源。</li>
<li>通过修改模板参数来修改资源的属性。</li>
<li>如果从当前模板中删除某个资源的定义，apply命令会将该资源彻底删除。可以理解为“资源的移除也是一种变更”。</li>
</ul>
</li>
<li><p>terraform show</p>
<p>：资源的展示</p>
<p>show命令用于展示当前state中所有被管理的资源及其所有属性值。</p>
</li>
<li><p>terraform destroy</p>
<p>：资源的释放</p>
<p>destroy命令用于对资源的释放操作，为了安全起见，在命令执行过程中，也增加了人工交互的过程，如果想要跳过手动确认操作，可以通过<strong>–force</strong>参数来跳过。</p>
<p>terraform destroy默认会释放当前模板中定义的所有资源，如果只想释放其中某个特定的资源，可以通过参数<code>-target=&lt;资源类型&gt;.&lt;资源名称&gt;</code>来指定。</p>
</li>
<li><p>terraform import</p>
<p>：资源的导入</p>
<p>import命令用于将存量的云资源导入到terraform state中，进而加入到Terraform的管理体系中，适用的场景包含但不限于以下几种：</p>
<ul>
<li>从来没有使用Terraform管控过任何资源，当前所有的存量云资源都是通过控制台，阿里云CLI，ROS或者直接调用API创建和管理的，现在想要切换为Terraform管理。</li>
<li>在不影响资源正常使用的前提下，重构资源模板中的资源定义。</li>
<li>阿里云的Provider进行了兼容性升级，新版Provider对原有模板中所定义的资源支持了更多的参数，需要把最新的参数同步进来。</li>
</ul>
<p><strong>说明</strong> 有关import如何实现存量资源的管理，请参见<a href="https://help.aliyun.com/document_detail/146144.html">如何解决存量云资源的管理难题</a>。</p>
</li>
<li><p>terraform taint</p>
<p>：标记资源为</p>
<p>被污染</p>
<p>taint命令用于把某个资源标记为被污染状态，当再次执行apply命令时，这个被污染的资源将会被先释放，然后再创建一个新的，相当于对这个特定资源做了先删除后新建的操作。</p>
<p>命令的详细格式为： <code>terraform taint &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform taint alicloud_vswitch.this</span><br><span class="line">Resource instance alicloud_vswitch.this has been marked as tainted.</span><br></pre></td></tr></table></figure>
</li>
<li><p>terraform untaint</p>
<p>：取消</p>
<p>被污染</p>
<p>标记</p>
<p>untaint命令是taint的逆向操作，用于取消被污染标记，使其恢复到正常的状态。命令的详细格式和taint类似为：<code>terraform untaint &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform untaint alicloud_vswitch.this</span><br><span class="line">Resource instance alicloud_vswitch.this has been successfully untainted.</span><br></pre></td></tr></table></figure>
</li>
<li><p>terraform output</p>
<p>：打印出参及其值</p>
<p>如果在模板中显示定义了output参数，那么这个output的值将在apply命令之后展示，但plan命令并不会展示，如果想随时随地快速查看output的值，可以直接运行命令 terraform output :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform output</span><br><span class="line">vswitchId = vsw-gw8gl31wz********</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="状态管理常用命令"><a href="#状态管理常用命令" class="headerlink" title="状态管理常用命令"></a>状态管理常用命令</h3><p>Terraform对资源状态的管理，实际上是对State文件中数据的管理。State文件保存了当前Terraform管理的所有资源及其属性，内容都是由Terraform自动存储的，为了保证数据的完整性，不建议手动修改State内容。对State数据的操作可以通过<strong>terraform state</strong>命令来完成。</p>
<ul>
<li><p>terraform state list：列出当前state中的所有资源</p>
<p><strong>state list</strong>命令会按照 <code>&lt;资源类型&gt;.&lt;资源名称&gt;</code> 的格式列出当前state中存在的所有资源（包括datasource），例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state list</span><br><span class="line">data.alicloud_slbs.default</span><br><span class="line">alicloud_vpc.default</span><br><span class="line">alicloud_vswitch.this</span><br></pre></td></tr></table></figure>
</li>
<li><p>terraform state show：展示某一个资源的属性</p>
<p><strong>state show</strong>命令按照Key-Value的格式展示出特定资源的所有属性及其值，命令的完整格式为 <code>terraformstate show &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state show alicloud_vswitch.this</span><br><span class="line"># alicloud_vswitch.this:</span><br><span class="line">resource &quot;alicloud_vswitch&quot; &quot;this&quot; &#123;  </span><br><span class="line">    availability_zone = &quot;eu-central-1a&quot;</span><br><span class="line">    cidr_block        = &quot;172.16.0.0/24&quot;</span><br><span class="line">    id                = &quot;vsw-gw8gl31wz******&quot;</span><br><span class="line">    vpc_id            = &quot;vpc-gw8calnzt*******&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>terraform state pull：获取当前state内容并展示</p>
<p><strong>state pull</strong>命令用于原样展示当前state文件数据，类似与Shell下的cat命令，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state pull</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: 4,</span><br><span class="line">    &quot;terraform_version&quot;: &quot;0.12.8&quot;,</span><br><span class="line">    &quot;serial&quot;: 615, </span><br><span class="line">    &quot;lineage&quot;: &quot;39aeeee2-b3bd-8130-c897-2cb8595cf8ec&quot;, </span><br><span class="line">    &quot;outputs&quot;: &#123;</span><br><span class="line">        ***</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">&quot;resources&quot;: [</span><br><span class="line">    &#123;     </span><br><span class="line">        &quot;mode&quot;: &quot;data&quot;,    </span><br><span class="line">        &quot;type&quot;: &quot;alicloud_slbs&quot;,     </span><br><span class="line">        &quot;name&quot;: &quot;default&quot;,     </span><br><span class="line">        &quot;provider&quot;: &quot;provider.alicloud&quot;,</span><br><span class="line">          ***</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;     </span><br><span class="line">        &quot;mode&quot;: &quot;managed&quot;,    </span><br><span class="line">        &quot;type&quot;: &quot;alicloud_vpc&quot;,     </span><br><span class="line">        &quot;name&quot;: &quot;default&quot;,    </span><br><span class="line">        &quot;provider&quot;: &quot;provider.alicloud&quot;,</span><br><span class="line">          ***</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>terraform state rm：移除特定的资源</p>
<p><strong>state rm</strong>命令用于将state中的某个资源移除，但是实际上并不会真正删除这个资源，命令格式为：<code>terraformstate rm &lt;资源类型&gt;.&lt;资源名称&gt;</code> ，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state rm alicloud_vswitch.this</span><br><span class="line">Removed alicloud_vswitch.this</span><br><span class="line">Successfully removed 1 resource instance(s).</span><br></pre></td></tr></table></figure>
<p>移除后，如果模板内容不变并且再次执行<strong>apply</strong>命令，将会新增一个同样的资源。移除后的资源可以再次通过<strong>import</strong>命令再次加入。</p>
</li>
<li><p>terraform state mv：变更特定资源的存放地址</p>
<p>如果想调整某个资源所在的state文件，可以通过<strong>state mv</strong>命令来完成，类似于Shell下的<strong>mv</strong>命令，这个命令的使用有多种选项，可以通过命令 <strong>terraform state mv –help</strong> 来详细了解。本文只介绍最常用的一种：<code>terraform state mv --state=./terraform.tfstate --state-out=&lt;target path&gt;/terraform-target.tfstate &lt;资源类型&gt;.&lt;资源名称A&gt; &lt;资源类型&gt;.&lt;资源名称B&gt;</code> ，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform state mv --state-out=../tf.tfstate alicloud_vswitch.this alicloud_vswitch.default</span><br><span class="line">Move &quot;alicloud_vswitch.this&quot; to &quot;alicloud_vswitch.default&quot;</span><br><span class="line">Successfully moved 1 object(s)</span><br></pre></td></tr></table></figure>
<p>如上命令省略了默认的<code>--state=./terraform.tfstate</code>选项，命令最终的结果是将当前State中的VSwitch资源移动到了上层目录下名为 <code>tf.tfstate</code> 的State中，并且将VSwitch的资源名称由“this”改为了“default”。</p>
</li>
<li><p>terraform refresh：刷新当前state</p>
<p><strong>refresh</strong>命令可以用来刷新当前State的内容，即再次调用API并拉取最新的数据写入到state文件中。</p>
</li>
</ul>
<h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><p>除了资源和状态的管理命令外，还有一些常用的应用在模板，Provider等多种场景下的命令。</p>
<ul>
<li><p>terraform init：初始化加载模块</p>
<p><strong>init</strong>用来初始化加载所需的模块，包括Provider，Provisioner，Module等。</p>
</li>
<li><p>terraform graph：输出当前模板定义的资源关系图</p>
<p>每个模板定义的资源之间都存在不同程度的关系，如果想看资源关系图，可以使用命令<strong>terraform graph</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ terraform graph</span><br><span class="line">digraph &#123;</span><br><span class="line">        compound = &quot;true&quot;</span><br><span class="line">        newrank = &quot;true&quot;</span><br><span class="line">        subgraph &quot;root&quot; &#123;</span><br><span class="line">                &quot;[root] alicloud_vpc.default&quot; [label = &quot;alicloud_vpc.default&quot;, shape = &quot;box&quot;]</span><br><span class="line">                &quot;[root] alicloud_vswitch.this&quot; [label = &quot;alicloud_vswitch.this&quot;, shape = &quot;box&quot;]             </span><br><span class="line">                ******</span><br><span class="line">                &quot;[root] output.vswitchId&quot; -&gt; &quot;[root] alicloud_vswitch.this&quot;</span><br><span class="line">                &quot;[root] provider.alicloud (close)&quot; -&gt; &quot;[root] alicloud_vswitch.this&quot;</span><br><span class="line">                ******</span><br><span class="line">                &quot;[root] root&quot; -&gt; &quot;[root] provider.alicloud (close)&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;                 </span><br></pre></td></tr></table></figure>
<p>该命令的结果还可以通过命令<code>terraform graph | dot -Tsvg &gt; graph.svg</code>直接导出为一张图片（需要提前安装graphviz： <code>brew install graphviz</code>）：<a href="https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/9727393851/p69425.png"><img src="https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/zh-CN/9727393851/p69425.png" alt="graph_img"></a></p>
</li>
<li><p>terraform validate：验证模板语法是否正确</p>
<p>Terraform模板的编写需要遵循其自身定义的一套简单的语法规范，编写完成后，如果想要检查模板是否存在语法错误或者在运行<strong>plan</strong>和<strong>apply</strong>命令的时候报语法错误，可以通过执行命令<strong>terraform validate</strong>来检查和定位错误出现的详细位置和原因。</p>
</li>
</ul>
<h2 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a>Providers</h2><p><a href="https://registry.terraform.io/browse/providers">https://registry.terraform.io/browse/providers</a></p>
<p><img src="/terraform/./terraform.png" alt></p>
<h4 id="Terraform-provider-alicloud"><a href="#Terraform-provider-alicloud" class="headerlink" title="Terraform-provider-alicloud"></a>Terraform-provider-alicloud</h4><p><a href="https://github.com/aliyun/terraform-provider-alicloud">github地址</a></p>
]]></content>
  </entry>
  <entry>
    <title>django-models-serializer-view-demo</title>
    <url>/django-models-serializer-view-demo/</url>
    <content><![CDATA[<p><img src="/django-models-serializer-view-demo/./drf.png" alt></p>
<span id="more"></span>
<h2 id="序列化Demo"><a href="#序列化Demo" class="headerlink" title="序列化Demo"></a>序列化Demo</h2><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><h4 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    CHOICE_SERVICE_LEVEL = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&quot;核心&quot;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&quot;重要&quot;</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">&quot;一般&quot;</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">&quot;边缘&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    name = models.CharField(</span><br><span class="line">        max_length=<span class="number">50</span>, unique=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;应用名称&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    businessLine = models.ForeignKey(</span><br><span class="line">        BusinessLine, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;业务线&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line">    webVersion = models.CharField(</span><br><span class="line">        max_length=<span class="number">20</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, choices=CHOICE_WEB_VERSION, verbose_name=<span class="string">&quot;JDK版本&quot;</span>)</span><br><span class="line">    developer = models.ForeignKey(</span><br><span class="line">        UserProfile, related_name=<span class="string">&quot;service_developer&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;开发负责人&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line">    tester = models.ForeignKey(</span><br><span class="line">        UserProfile, related_name=<span class="string">&quot;service_tester&quot;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;测试负责人&quot;</span>, on_delete=models.CASCADE)</span><br><span class="line">    serviceLevel = models.IntegerField(</span><br><span class="line">        choices=CHOICE_SERVICE_LEVEL, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;服务等级&quot;</span>)</span><br><span class="line">    isIndependentRD = models.BooleanField(default=<span class="literal">False</span>, verbose_name=<span class="string">&#x27;是否自主研发&#x27;</span>)</span><br><span class="line">    domainPro = models.CharField(</span><br><span class="line">        max_length=<span class="number">100</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;域名-生产&quot;</span>)</span><br><span class="line">    ecsPro = models.ManyToManyField(</span><br><span class="line">        CMDBBase, related_name=<span class="string">&quot;service_ecspro&quot;</span>, blank=<span class="literal">True</span>, through=<span class="string">&#x27;ServiceEcsPro&#x27;</span>, through_fields=(<span class="string">&#x27;service&#x27;</span>, <span class="string">&#x27;ecs&#x27;</span>, <span class="string">&#x27;port&#x27;</span>), verbose_name=<span class="string">&quot;主机-生产&quot;</span>)</span><br><span class="line">    dbPro = models.ManyToManyField(</span><br><span class="line">        Database, related_name=<span class="string">&quot;service_dbpro&quot;</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;数据库-生产&quot;</span>)</span><br><span class="line">    componentPro = models.ManyToManyField(</span><br><span class="line">        Component, related_name=<span class="string">&quot;service_componentpro&quot;</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&quot;组件-生产&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&quot;服务管理&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>
<h4 id="serializers-py"><a href="#serializers-py" class="headerlink" title="serializers.py"></a>serializers.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    developer = serializers.StringRelatedField(many=<span class="literal">False</span>)</span><br><span class="line">    tester = serializers.StringRelatedField(many=<span class="literal">False</span>)</span><br><span class="line">    businessLine = serializers.StringRelatedField(many=<span class="literal">False</span>)</span><br><span class="line">    serviceLevel = serializers.CharField(source=<span class="string">&#x27;get_serviceLevel_display&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Service</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceViewset</span>(<span class="params">BaseModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    应用管理</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        name = self.request.query_params.get(<span class="string">&quot;name&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        platform = self.request.query_params.get(<span class="string">&quot;platform&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">or</span> platform:</span><br><span class="line">            q_search = Q()</span><br><span class="line">            <span class="comment"># q_search.connector = &quot;OR&quot;</span></span><br><span class="line">            q_search.connector = <span class="string">&quot;AND&quot;</span></span><br><span class="line">            <span class="keyword">if</span> name:</span><br><span class="line">                q_search.children.append((<span class="string">&quot;name__icontains&quot;</span>, name))</span><br><span class="line">            <span class="keyword">if</span> platform:</span><br><span class="line">                q_search.children.append((<span class="string">&quot;platform&quot;</span>, platform))</span><br><span class="line">            <span class="keyword">return</span> models.Service.objects.<span class="built_in">filter</span>(q_search).order_by(<span class="string">&#x27;-id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> models.Service.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.action <span class="keyword">in</span> (<span class="string">&#x27;_list&#x27;</span>, <span class="string">&#x27;list&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> serializers.ServiceListSerializer</span><br><span class="line">        <span class="keyword">if</span> self.action <span class="keyword">in</span> (<span class="string">&#x27;_detail&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> serializers.ServiceDetailSerializer</span><br><span class="line">        <span class="keyword">return</span> serializers.ServiceSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;post&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        create</span></span><br><span class="line"><span class="string">        由于应用绑定的主机需要记录端口信息，所以需要额外处理。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ecsPro = [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &#x27;id&#x27;: 1,</span></span><br><span class="line"><span class="string">                &#x27;port&#x27;: 8080</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &#x27;id&#x27;: 2,</span></span><br><span class="line"><span class="string">                &#x27;port&#x27;: 8080</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = <span class="built_in">super</span>(BaseModelViewSet, self).create(</span><br><span class="line">            request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        ecsPro = request.data.get(<span class="string">&#x27;ecsPro&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        ecsPre = request.data.get(<span class="string">&#x27;ecsPre&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        ecsTest = request.data.get(<span class="string">&#x27;ecsTest&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        ecsDev = request.data.get(<span class="string">&#x27;ecsDev&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="built_in">id</span> = response.data.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        service = models.Service.objects.get(pk=<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> ecsPro:</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsPro:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsDev.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsPro&#x27;</span>] = ecsPro</span><br><span class="line">            <span class="keyword">if</span> ecsPre:</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsPre:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsDev.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsPre&#x27;</span>] = ecsPre</span><br><span class="line">            <span class="keyword">if</span> ecsTest:</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsTest:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsDev.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsTest&#x27;</span>] = ecsTest</span><br><span class="line">            <span class="keyword">if</span> ecsDev:</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsDev:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsDev.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsDev&#x27;</span>] = ecsDev</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            service.delete()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>, e.args)</span><br><span class="line">            <span class="keyword">return</span> json_error_response(errMsg=<span class="string">&quot;error, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e.args))</span><br><span class="line">        <span class="keyword">return</span> json_ok_response(response.data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;post&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        update</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        response = <span class="built_in">super</span>(BaseModelViewSet, self).update(</span><br><span class="line">            request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        ecsPro = request.data.get(<span class="string">&#x27;ecsPro&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        ecsPre = request.data.get(<span class="string">&#x27;ecsPre&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        ecsTest = request.data.get(<span class="string">&#x27;ecsTest&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        ecsDev = request.data.get(<span class="string">&#x27;ecsDev&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="built_in">id</span> = response.data.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        service = models.Service.objects.get(pk=<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> ecsPro:</span><br><span class="line">                <span class="comment"># 如果更新的话，先将之前全部关联ecs移除</span></span><br><span class="line">                service.ecsPro.clear()</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsPro:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsPro.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsPro&#x27;</span>] = ecsPro</span><br><span class="line">            <span class="keyword">if</span> ecsPre:</span><br><span class="line">                service.ecsPre.clear()</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsPre:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsPre.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsPre&#x27;</span>] = ecsPre</span><br><span class="line">            <span class="keyword">if</span> ecsTest:</span><br><span class="line">                service.ecsTest.clear()</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsTest:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsTest.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsTest&#x27;</span>] = ecsTest</span><br><span class="line">            <span class="keyword">if</span> ecsDev:</span><br><span class="line">                service.ecsDev.clear()</span><br><span class="line">                <span class="keyword">for</span> sub_ecs <span class="keyword">in</span> ecsDev:</span><br><span class="line">                    sub_ecs_id = sub_ecs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">                    sub_port = sub_ecs.get(<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line">                    ecs = models.CMDBBase.objects.get(pk=sub_ecs_id)</span><br><span class="line">                    models.ServiceEcsDev.objects.create(</span><br><span class="line">                        service=service, ecs=ecs, port=sub_port)</span><br><span class="line">                response.data[<span class="string">&#x27;ecsDev&#x27;</span>] = ecsDev</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>, e.args)</span><br><span class="line">            <span class="keyword">return</span> json_error_response(errMsg=<span class="string">&quot;error, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e.args))</span><br><span class="line">        <span class="keyword">return</span> json_ok_response(response.data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_enumerate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        枚举值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;CHOICE_LANGUAGE&quot;</span>: models.Service.CHOICE_LANGUAGE,</span><br><span class="line">            <span class="string">&quot;CHOICE_JDK_VERSION&quot;</span>: models.Service.CHOICE_JDK_VERSION,</span><br><span class="line">            <span class="string">&quot;CHOICE_WEB_VERSION&quot;</span>: models.Service.CHOICE_WEB_VERSION,</span><br><span class="line">            <span class="string">&quot;CHOICE_SERVICE_LEVEL&quot;</span>: models.Service.CHOICE_SERVICE_LEVEL,</span><br><span class="line">            <span class="string">&quot;CHOICE_PLATFORM&quot;</span>: models.Service.CHOICE_PLATFORM,</span><br><span class="line">            <span class="string">&quot;CHOICE_STATUS&quot;</span>: models.Service.CHOICE_STATUS,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json_ok_response(data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_detail</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        detail</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        queryset = self.get_object()</span><br><span class="line">        data = self.get_serializer(queryset, many=<span class="literal">False</span>).data</span><br><span class="line"></span><br><span class="line">        ecsPro = data.get(<span class="string">&#x27;ecsPro&#x27;</span>)</span><br><span class="line">        ecsPre = data.get(<span class="string">&#x27;ecsPre&#x27;</span>)</span><br><span class="line">        ecsTest = data.get(<span class="string">&#x27;ecsTest&#x27;</span>)</span><br><span class="line">        ecsDev = data.get(<span class="string">&#x27;ecsDev&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        componentPro = data.get(<span class="string">&#x27;componentPro&#x27;</span>)</span><br><span class="line">        componentPre = data.get(<span class="string">&#x27;componentPre&#x27;</span>)</span><br><span class="line">        componentTest = data.get(<span class="string">&#x27;componentTest&#x27;</span>)</span><br><span class="line">        componentDev = data.get(<span class="string">&#x27;componentDev&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        dbPro = data.get(<span class="string">&#x27;dbPro&#x27;</span>)</span><br><span class="line">        dbPre = data.get(<span class="string">&#x27;dbPre&#x27;</span>)</span><br><span class="line">        dbTest = data.get(<span class="string">&#x27;dbTest&#x27;</span>)</span><br><span class="line">        dbDev = data.get(<span class="string">&#x27;dbDev&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ecsPro:</span><br><span class="line">            ecsPro_value = []</span><br><span class="line">            <span class="keyword">for</span> ecs_id <span class="keyword">in</span> ecsPro:</span><br><span class="line">                ecs = models.CMDBBase.objects.get(pk=ecs_id)</span><br><span class="line">                tmp_data = ServiceCmdbDetailSerializer(</span><br><span class="line">                    instance=ecs, many=<span class="literal">False</span>).data</span><br><span class="line">                ecs_port = models.ServiceEcsPro.objects.get(</span><br><span class="line">                    service=queryset, ecs=ecs).port</span><br><span class="line">                tmp_data[<span class="string">&#x27;port&#x27;</span>] = ecs_port</span><br><span class="line">                ecsPro_value.append(tmp_data)</span><br><span class="line">            data[<span class="string">&#x27;ecsPro&#x27;</span>] = ecsPro_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ecsPre:</span><br><span class="line">            ecsPre_value = []</span><br><span class="line">            <span class="keyword">for</span> ecs_id <span class="keyword">in</span> ecsPre:</span><br><span class="line">                ecs = models.CMDBBase.objects.get(pk=ecs_id)</span><br><span class="line">                tmp_data = ServiceCmdbDetailSerializer(</span><br><span class="line">                    instance=ecs, many=<span class="literal">False</span>).data</span><br><span class="line">                ecs_port = models.ServiceEcsPre.objects.get(</span><br><span class="line">                    service=queryset, ecs=ecs).port</span><br><span class="line">                tmp_data[<span class="string">&#x27;port&#x27;</span>] = ecs_port</span><br><span class="line">                ecsPre_value.append(tmp_data)</span><br><span class="line">            data[<span class="string">&#x27;ecsPre&#x27;</span>] = ecsPre_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ecsTest:</span><br><span class="line">            ecsTest_value = []</span><br><span class="line">            <span class="keyword">for</span> ecs_id <span class="keyword">in</span> ecsTest:</span><br><span class="line">                ecs = models.CMDBBase.objects.get(pk=ecs_id)</span><br><span class="line">                tmp_data = ServiceCmdbDetailSerializer(</span><br><span class="line">                    instance=ecs, many=<span class="literal">False</span>).data</span><br><span class="line">                ecs_port = models.ServiceEcsTest.objects.get(</span><br><span class="line">                    service=queryset, ecs=ecs).port</span><br><span class="line">                tmp_data[<span class="string">&#x27;port&#x27;</span>] = ecs_port</span><br><span class="line">                ecsTest_value.append(tmp_data)</span><br><span class="line">            data[<span class="string">&#x27;ecsTest&#x27;</span>] = ecsTest_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ecsDev:</span><br><span class="line">            ecsDev_value = []</span><br><span class="line">            <span class="keyword">for</span> ecs_id <span class="keyword">in</span> ecsDev:</span><br><span class="line">                ecs = models.CMDBBase.objects.get(pk=ecs_id)</span><br><span class="line">                tmp_data = ServiceCmdbDetailSerializer(</span><br><span class="line">                    instance=ecs, many=<span class="literal">False</span>).data</span><br><span class="line">                ecs_port = models.ServiceEcsDev.objects.get(</span><br><span class="line">                    service=queryset, ecs=ecs).port</span><br><span class="line">                tmp_data[<span class="string">&#x27;port&#x27;</span>] = ecs_port</span><br><span class="line">                ecsDev_value.append(tmp_data)</span><br><span class="line">            data[<span class="string">&#x27;ecsDev&#x27;</span>] = ecsDev_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> componentPro:</span><br><span class="line">            componentPro_value = []</span><br><span class="line">            <span class="keyword">for</span> component_id <span class="keyword">in</span> componentPro:</span><br><span class="line">                component = models.Component.objects.get(pk=component_id)</span><br><span class="line">                componentPro_value.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: component_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: component.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;componentPro&#x27;</span>] = componentPro_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> componentPre:</span><br><span class="line">            componentPre_value = []</span><br><span class="line">            <span class="keyword">for</span> component_id <span class="keyword">in</span> componentPre:</span><br><span class="line">                component = models.Component.objects.get(pk=component_id)</span><br><span class="line">                componentPre_value.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: component_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: component.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;componentPre&#x27;</span>] = componentPre_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> componentTest:</span><br><span class="line">            componentTest_value = []</span><br><span class="line">            <span class="keyword">for</span> component_id <span class="keyword">in</span> componentTest:</span><br><span class="line">                component = models.Component.objects.get(pk=component_id)</span><br><span class="line">                componentTest_value.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: component_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: component.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;componentTest&#x27;</span>] = componentTest_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> componentDev:</span><br><span class="line">            componentDev_value = []</span><br><span class="line">            <span class="keyword">for</span> component_id <span class="keyword">in</span> componentDev:</span><br><span class="line">                component = models.Component.objects.get(pk=component_id)</span><br><span class="line">                componentDev_value.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: component_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: component.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;componentDev&#x27;</span>] = componentDev_value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dbPro:</span><br><span class="line">            tmp_data = []</span><br><span class="line">            <span class="keyword">for</span> db_id <span class="keyword">in</span> dbPro:</span><br><span class="line">                db = models.CMDBBase.objects.get(pk=component_id)</span><br><span class="line">                tmp_data.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: db_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: db.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;dbPro&#x27;</span>] = tmp_data</span><br><span class="line">        <span class="keyword">if</span> dbPre:</span><br><span class="line">            tmp_data = []</span><br><span class="line">            <span class="keyword">for</span> db_id <span class="keyword">in</span> dbPre:</span><br><span class="line">                db = models.CMDBBase.objects.get(pk=component_id)</span><br><span class="line">                tmp_data.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: db_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: db.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;dbPre&#x27;</span>] = tmp_data</span><br><span class="line">        <span class="keyword">if</span> dbTest:</span><br><span class="line">            tmp_data = []</span><br><span class="line">            <span class="keyword">for</span> db_id <span class="keyword">in</span> dbTest:</span><br><span class="line">                db = models.CMDBBase.objects.get(pk=component_id)</span><br><span class="line">                tmp_data.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: db_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: db.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;dbTest&#x27;</span>] = tmp_data</span><br><span class="line">        <span class="keyword">if</span> dbDev:</span><br><span class="line">            tmp_data = []</span><br><span class="line">            <span class="keyword">for</span> db_id <span class="keyword">in</span> dbDev:</span><br><span class="line">                db = models.CMDBBase.objects.get(pk=component_id)</span><br><span class="line">                tmp_data.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span>: db_id,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: db.name</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            data[<span class="string">&#x27;dbDev&#x27;</span>] = tmp_data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json_ok_response(data)</span><br></pre></td></tr></table></figure>
<h3 id="接口信息"><a href="#接口信息" class="headerlink" title="接口信息"></a>接口信息</h3><p><code>http://127.0.0.1:8080/api/v1/business/service/_detail?id=58</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;000000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;showMsg&quot;</span>: <span class="string">&quot;Success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;errMsg&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">58</span>,</span><br><span class="line">        <span class="attr">&quot;developer&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;tester&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;businessLine&quot;</span>: <span class="string">&quot;业务线A&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;serviceLevel&quot;</span>: <span class="string">&quot;核心&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span>: <span class="string">&quot;2021-06-21T17:10:06.984243&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span>: <span class="string">&quot;2021-06-21T17:10:06.984358&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;remark&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;car-hailing-core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;jdkVersion&quot;</span>: <span class="string">&quot;jdk-1.8.0_181&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webVersion&quot;</span>: <span class="string">&quot;tomcat-8.5.39&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;webDir&quot;</span>: <span class="string">&quot;/data/servers/car-haling-core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;codeDir&quot;</span>: <span class="string">&quot;/data/app/car-haling-core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;isIndependentRD&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;gitUrl&quot;</span>: <span class="string">&quot;ssh://git@gitlab.izuche.com:10022/sqzl_back_platform/car-hailing-core.git&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;OnLine&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;thirdPartyCompany&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;sdasd功能描述&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;platform&quot;</span>: <span class="string">&quot;sjhl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domainPro&quot;</span>: <span class="string">&quot;https://prd-inside-car-hailing-core.izuche.com/car-hailing-core&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;buildCommandPro&quot;</span>: <span class="string">&quot;clean package -Dmaven.test.skip=true -U -POnline&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;startCommandPro&quot;</span>: <span class="string">&quot;cataling.sh start&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;stopCommandPro&quot;</span>: <span class="string">&quot;cataling.sh stop&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;healthURLPro&quot;</span>: <span class="string">&quot;https://prd-inside-car-hailing-core.izuche.com/car-hailing-core/asd&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;slbPro&quot;</span>: <span class="string">&quot;1.1.1.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domainPre&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;buildCommandPre&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;startCommandPre&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;stopCommandPre&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;healthURLPre&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;slbPre&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;domainTest&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;buildCommandTest&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;startCommandTest&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;stopCommandTest&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;healthURLTest&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;slbTest&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;domainDev&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;buildCommandDev&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;startCommandDev&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;stopCommandDev&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;healthURLDev&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;slbDev&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;ecsPro&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;privateIp&quot;</span>: <span class="string">&quot;172.22.0.41&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;outIp&quot;</span>: <span class="string">&quot;211.151.0.4&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;compute&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;platform&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;cpu&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;mem&quot;</span>: <span class="string">&quot;64.261 G&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;capacity&quot;</span>: <span class="string">&quot;1.2 T&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;computeStatus&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;computeType&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;port&quot;</span>: <span class="number">8080</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">&quot;privateIp&quot;</span>: <span class="string">&quot;172.20.1.94&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;outIp&quot;</span>: <span class="string">&quot;211.151.0.4&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;compute&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;platform&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;cpu&quot;</span>: <span class="number">32</span>,</span><br><span class="line">                <span class="attr">&quot;mem&quot;</span>: <span class="string">&quot;64.261 G&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;capacity&quot;</span>: <span class="string">&quot;600.0 G&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;computeStatus&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;computeType&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;port&quot;</span>: <span class="number">8081</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;dbPro&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;componentPro&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ALI-Diamond4&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ALI-Diamond5&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;ecsPre&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;dbPre&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;componentPre&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;ecsTest&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;dbTest&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;componentTest&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;ecsDev&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;dbDev&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;componentDev&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端展示"><a href="#前端展示" class="headerlink" title="前端展示"></a>前端展示</h3><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><h5 id="列表页"><a href="#列表页" class="headerlink" title="列表页"></a>列表页</h5><p><img src="/django-models-serializer-view-demo/./serializer01.png" alt></p>
<h5 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h5><p><img src="/django-models-serializer-view-demo/./serializer02.png" alt></p>
<h4 id="vue代码"><a href="#vue代码" class="headerlink" title="vue代码"></a>vue代码</h4><h5 id="列表页index-vue"><a href="#列表页index-vue" class="headerlink" title="列表页index.vue"></a>列表页index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">                &lt;el-tree :data=&quot;data&quot; :props=&quot;defaultProps&quot; default-expand-all ref=&quot;tree&quot; @node-click=&quot;handleNodeClick&quot;&gt;&lt;/el-tree&gt;</span><br><span class="line">            &lt;/el-aside&gt;</span><br><span class="line">            &lt;el-main&gt;</span><br><span class="line">                &lt;el-row&gt;</span><br><span class="line">                    &lt;el-col :span=&quot;4&quot;&gt;</span><br><span class="line">                        &lt;el-tooltip class=&quot;item&quot; effect=&quot;dark&quot; content=&quot;可根据 服务名称 模糊搜索&quot; placement=&quot;bottom&quot;&gt;</span><br><span class="line">                            &lt;el-input v-model=&quot;search_info&quot; placeholder=&quot;请输入内容&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">                        &lt;/el-tooltip&gt;</span><br><span class="line">                    &lt;/el-col&gt;</span><br><span class="line">                    &lt;el-col :span=&quot;2&quot;&gt;</span><br><span class="line">                        &lt;el-button plain @click=&quot;handleSearch&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class="line">                    &lt;/el-col&gt;</span><br><span class="line">                &lt;/el-row&gt;</span><br><span class="line">                &lt;br /&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;!-- (&#x27;id&#x27;, &#x27;name&#x27;, &#x27;language&#x27;, &#x27;webVersion&#x27;,</span><br><span class="line">                  &#x27;platform&#x27;, &#x27;serviceLevel&#x27;, &#x27;developer&#x27;) --&gt;</span><br><span class="line">                    &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; max-height=&quot;510&quot;&gt;</span><br><span class="line">                        &lt;el-table-column fixed prop=&quot;name&quot; label=&quot;应用名称&quot; width=&quot;200&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                        &lt;el-table-column prop=&quot;language&quot; label=&quot;开发语言&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                        &lt;el-table-column prop=&quot;webVersion&quot; label=&quot;容器版本&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                        &lt;el-table-column prop=&quot;platform&quot; label=&quot;应用来源&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                        &lt;el-table-column prop=&quot;serviceLevel&quot; label=&quot;服务等级&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                        &lt;el-table-column prop=&quot;developer&quot; label=&quot;开发负责人&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                        &lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;120&quot;&gt;</span><br><span class="line">                            &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">                                &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;handleMore(scope.$index, scope.row)&quot;&gt;More&lt;/el-button&gt;</span><br><span class="line">                            &lt;/template&gt;</span><br><span class="line">                        &lt;/el-table-column&gt;</span><br><span class="line">                    &lt;/el-table&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;br /&gt;</span><br><span class="line">                &lt;br /&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">                        &lt;el-pagination</span><br><span class="line">                            @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">                            @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">                            :current-page=&quot;currentPage&quot;</span><br><span class="line">                            :page-sizes=&quot;[10, 50, 100]&quot;</span><br><span class="line">                            :page-size=&quot;pagesize&quot;</span><br><span class="line">                            layout=&quot;total, sizes, prev, pager, next&quot;</span><br><span class="line">                            :total=&quot;total&quot;</span><br><span class="line">                        &gt;&lt;/el-pagination&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/el-main&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const axios = require(&quot;axios&quot;).default;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;asstes-index&quot;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                data: [],</span><br><span class="line">                defaultProps: &#123;</span><br><span class="line">                    children: &quot;children&quot;,</span><br><span class="line">                    label: &quot;name_cn&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                tableData: [],</span><br><span class="line">                currentPage: 1,</span><br><span class="line">                pagesize: 10,</span><br><span class="line">                total: 10,</span><br><span class="line">                search_info: &quot;&quot;,</span><br><span class="line">                serviceTreeNodeClicked: false,</span><br><span class="line">                serviceTreeNodeId: &quot;&quot;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.requestdata(10, 1);</span><br><span class="line">            this.handtree();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleNodeClick(data) &#123;</span><br><span class="line">                var id = data.id;</span><br><span class="line">                console.log(id);</span><br><span class="line">                this.serviceTreeNodeClicked = true;</span><br><span class="line">                this.serviceTreeNodeId = id;</span><br><span class="line">                this.requestnodedata(id, 10, 1);</span><br><span class="line">            &#125;,</span><br><span class="line">            handleMore(index, row) &#123;</span><br><span class="line">                console.log(index, row);</span><br><span class="line">                this.$router.push(&#123;</span><br><span class="line">                    path: &quot;/service/detail&quot;,</span><br><span class="line">                    query: &#123; id: row.id &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            handtree() &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/service_tree/nodes&quot;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    var res = response.data.data;</span><br><span class="line">                    console.log(res);</span><br><span class="line">                    self.data = res;</span><br><span class="line">                    console.log(self.data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            handleSearch() &#123;</span><br><span class="line">                console.log(this.search_info, typeof this.search_info);</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://polaris.vcg.cn/api/service/&quot;,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        service_name: self.search_info,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    console.log(response);</span><br><span class="line">                    self.tableData = response.data.data;</span><br><span class="line">                    self.total = response.data.page.totalCount;</span><br><span class="line">                    self.currentPage = response.data.page.pageNo;</span><br><span class="line">                    self.pagesize = response.data.page.pageSize;</span><br><span class="line">                    self.$message(&#123;</span><br><span class="line">                        showClose: true,</span><br><span class="line">                        message: &quot;共搜索到&quot; + self.total + &quot;条结果&quot;,</span><br><span class="line">                        type: &quot;success&quot;,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            handleSizeChange(val) &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                console.log(val, self.currentPage);</span><br><span class="line">                if (self.serviceTreeNodeClicked) &#123;</span><br><span class="line">                    self.requestnodedata(self.serviceTreeNodeId, val, self.currentPage);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    self.requestdata(val, self.currentPage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleCurrentChange(val) &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                console.log(self.pagesize, val);</span><br><span class="line">                if (self.serviceTreeNodeClicked) &#123;</span><br><span class="line">                    self.requestnodedata(this.serviceTreeNodeId, self.pagesize, val);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    self.requestdata(self.pagesize, val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            requestnodedata(id, pageSize, pageNo) &#123;</span><br><span class="line">                //  点击节点后，请求 节点相关的服务</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/service_tree/node_link_service&quot;,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        id: id,</span><br><span class="line">                        page: pageNo,</span><br><span class="line">                        pageSize: pageSize,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    var res = response.data.data;</span><br><span class="line">                    console.log(res);</span><br><span class="line">                    self.tableData = res.list;</span><br><span class="line">                    self.total = res.total;</span><br><span class="line">                    self.currentPage = res.page;</span><br><span class="line">                    self.pagesize = res.pagesize;</span><br><span class="line">                    // self.$message(&#123;</span><br><span class="line">                    //     showClose: true,</span><br><span class="line">                    //     message: &quot;共搜索到&quot; + self.total + &quot;条结果&quot;,</span><br><span class="line">                    //     type: &quot;success&quot;,</span><br><span class="line">                    // &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            requestdata(pageSize, pageNo) &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/business/service/_list&quot;,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        page: pageNo,</span><br><span class="line">                        pageSize: pageSize,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    var res = response.data.data;</span><br><span class="line">                    console.log(res);</span><br><span class="line">                    self.tableData = res.list;</span><br><span class="line">                    self.total = res.total;</span><br><span class="line">                    self.currentPage = res.page;</span><br><span class="line">                    self.pagesize = res.pagesize;</span><br><span class="line">                    // self.$message(&#123;</span><br><span class="line">                    //     showClose: true,</span><br><span class="line">                    //     message: &quot;共搜索到&quot; + self.total + &quot;条结果&quot;,</span><br><span class="line">                    //     type: &quot;success&quot;,</span><br><span class="line">                    // &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;style&gt;</span><br><span class="line">	.el-dropdown-link &#123;</span><br><span class="line">		cursor: pointer;</span><br><span class="line">		color: #409EFF;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	.el-icon-arrow-down &#123;</span><br><span class="line">		font-size: 12px;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"> --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="详情页detail-vue"><a href="#详情页detail-vue" class="headerlink" title="详情页detail.vue"></a>详情页detail.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- &lt;el-container&gt; --&gt;</span><br><span class="line">        &lt;!-- &lt;el-card&gt; --&gt;</span><br><span class="line">        &lt;h3 style=&quot;text-align: left;&quot;&gt;基础信息&lt;/h3&gt;</span><br><span class="line">        &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;应用名称：&#123;&#123; data.name &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;开发语言：&#123;&#123; data.language &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;业务线：&#123;&#123; data.businessLine &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;数据来源：&#123;&#123; data.platform &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;JDK版本：&#123;&#123; data.jdkVersion &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;容器版本：&#123;&#123; data.webVersion &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;开发负责人：&#123;&#123; data.developer &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;测试负责人：&#123;&#123; data.tester &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;容器目录：&#123;&#123; data.webDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;部署目录：&#123;&#123; data.codeDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;服务等级：&#123;&#123; data.serviceLevel &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;是否自研：&#123;&#123; data.isIndependentRD &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;Git地址：&#123;&#123; data.gitUrl &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;第三方公司：&#123;&#123; data.thirdPartyCompany &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">            &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;功能描述：&#123;&#123; data.desc &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">            &lt;/el-row&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- &lt;/el-card&gt;</span><br><span class="line">        &lt;el-card&gt; --&gt;</span><br><span class="line">        &lt;el-collapse v-model=&quot;activeNames&quot; @change=&quot;handleChange&quot;&gt;</span><br><span class="line">            &lt;el-collapse-item title=&quot;生产环境&quot; name=&quot;1&quot;&gt;</span><br><span class="line">                &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;域名：&#123;&#123; data.domainPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;编译参数：&#123;&#123; data.buildCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;启动参数：&#123;&#123; data.startCommandProtform &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;停止参数&#123;&#123; data.stopCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;检测URL：&#123;&#123; data.healthURLPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;负载均衡：&#123;&#123; data.slbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;当前版本：&#123;&#123; data.webDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;发布时间：&#123;&#123; data.codeDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;公共组件：&#123;&#123; data.componentPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;数据库集群：&#123;&#123; data.dbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;</span><br><span class="line">                            &lt;h4&gt;实例信息&lt;/h4&gt;</span><br><span class="line">                            &lt;el-table :data=&quot;ecsPro&quot; border style=&quot;width: 60%&quot;&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;privateIp&quot; label=&quot;主机&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;port&quot; label=&quot;端口&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;cpu&quot; label=&quot;CPU&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;mem&quot; label=&quot;内存&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;capacity&quot; label=&quot;存储&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;platform&quot; label=&quot;数据来源&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;computeType&quot; label=&quot;类型&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;outIp&quot; label=&quot;出口地址&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                            &lt;/el-table&gt;</span><br><span class="line">                        &lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/el-collapse-item&gt;</span><br><span class="line">            &lt;el-collapse-item title=&quot;预览环境&quot; name=&quot;2&quot;&gt;</span><br><span class="line">                &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;域名：&#123;&#123; data.domainPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;编译参数：&#123;&#123; data.buildCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;启动参数：&#123;&#123; data.startCommandProtform &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;停止参数&#123;&#123; data.stopCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;检测URL：&#123;&#123; data.healthURLPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;负载均衡：&#123;&#123; data.slbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;当前版本：&#123;&#123; data.webDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;发布时间：&#123;&#123; data.codeDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;公共组件：&#123;&#123; data.componentPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;数据库集群：&#123;&#123; data.dbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;</span><br><span class="line">                            &lt;h4&gt;实例信息&lt;/h4&gt;</span><br><span class="line">                            &lt;el-table :data=&quot;ecsPro&quot; border style=&quot;width: 60%&quot;&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;privateIp&quot; label=&quot;主机&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;port&quot; label=&quot;端口&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;cpu&quot; label=&quot;CPU&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;mem&quot; label=&quot;内存&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;capacity&quot; label=&quot;存储&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;platform&quot; label=&quot;数据来源&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;computeType&quot; label=&quot;类型&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;outIp&quot; label=&quot;出口地址&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                            &lt;/el-table&gt;</span><br><span class="line">                        &lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/el-collapse-item&gt;</span><br><span class="line">            &lt;el-collapse-item title=&quot;测试环境&quot; name=&quot;3&quot;&gt;</span><br><span class="line">                &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;域名：&#123;&#123; data.domainPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;编译参数：&#123;&#123; data.buildCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;启动参数：&#123;&#123; data.startCommandProtform &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;停止参数&#123;&#123; data.stopCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;检测URL：&#123;&#123; data.healthURLPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;负载均衡：&#123;&#123; data.slbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;当前版本：&#123;&#123; data.webDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;发布时间：&#123;&#123; data.codeDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;公共组件：&#123;&#123; data.componentPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;数据库集群：&#123;&#123; data.dbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;</span><br><span class="line">                            &lt;h4&gt;实例信息&lt;/h4&gt;</span><br><span class="line">                            &lt;el-table :data=&quot;ecsPro&quot; border style=&quot;width: 60%&quot;&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;privateIp&quot; label=&quot;主机&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;port&quot; label=&quot;端口&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;cpu&quot; label=&quot;CPU&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;mem&quot; label=&quot;内存&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;capacity&quot; label=&quot;存储&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;platform&quot; label=&quot;数据来源&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;computeType&quot; label=&quot;类型&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;outIp&quot; label=&quot;出口地址&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                            &lt;/el-table&gt;</span><br><span class="line">                        &lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/el-collapse-item&gt;</span><br><span class="line">            &lt;el-collapse-item title=&quot;开发环境&quot; name=&quot;4&quot;&gt;</span><br><span class="line">                &lt;div style=&quot;margin-left: 50px&quot;&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;域名：&#123;&#123; data.domainPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;编译参数：&#123;&#123; data.buildCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;启动参数：&#123;&#123; data.startCommandProtform &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;停止参数&#123;&#123; data.stopCommandPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;检测URL：&#123;&#123; data.healthURLPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;负载均衡：&#123;&#123; data.slbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;当前版本：&#123;&#123; data.webDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;12&quot; style=&quot;text-align: left;&quot;&gt;发布时间：&#123;&#123; data.codeDir &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;公共组件：&#123;&#123; data.componentPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;数据库集群：&#123;&#123; data.dbPro &#125;&#125;&lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                    &lt;el-row type=&quot;flex&quot; class=&quot;row-bg&quot; justify=&quot;center&quot;&gt;</span><br><span class="line">                        &lt;el-col :span=&quot;24&quot; style=&quot;text-align: left;&quot;&gt;</span><br><span class="line">                            &lt;h4&gt;实例信息&lt;/h4&gt;</span><br><span class="line">                            &lt;el-table :data=&quot;ecsPro&quot; border style=&quot;width: 60%&quot;&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;privateIp&quot; label=&quot;主机&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;port&quot; label=&quot;端口&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;cpu&quot; label=&quot;CPU&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;mem&quot; label=&quot;内存&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;capacity&quot; label=&quot;存储&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;platform&quot; label=&quot;数据来源&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;computeType&quot; label=&quot;类型&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                                &lt;el-table-column prop=&quot;outIp&quot; label=&quot;出口地址&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">                            &lt;/el-table&gt;</span><br><span class="line">                        &lt;/el-col&gt;</span><br><span class="line">                    &lt;/el-row&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/el-collapse-item&gt;</span><br><span class="line">        &lt;/el-collapse&gt;</span><br><span class="line">        &lt;!-- &lt;/el-card&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;/el-container&gt; --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const axios = require(&quot;axios&quot;).default;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                data: &#123;&#125;,</span><br><span class="line">                activeNames: [&quot;1&quot;],</span><br><span class="line">                ecsPro: [],</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            this.requestdata();</span><br><span class="line">            // this.handtree();</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleChange(val) &#123;</span><br><span class="line">                console.log(val);</span><br><span class="line">            &#125;,</span><br><span class="line">            requestdata() &#123;</span><br><span class="line">                const self = this;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                    method: &quot;get&quot;,</span><br><span class="line">                    url: &quot;http://devops.zhaohongye.com/api/v1/business/service/_detail&quot;,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        id: self.$route.query.id,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    responseType: &quot;json&quot;,</span><br><span class="line">                &#125;).then(function(response) &#123;</span><br><span class="line">                    var res = response.data.data;</span><br><span class="line">                    console.log(res);</span><br><span class="line">                    self.data = res;</span><br><span class="line">                    self.ecsPro = res.ecsPro;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .el-row &#123;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        &amp;:last-child &#123;</span><br><span class="line">            margin-bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .el-col &#123;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-purple-dark &#123;</span><br><span class="line">        background: #99a9bf;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-purple &#123;</span><br><span class="line">        background: #d3dce6;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-purple-light &#123;</span><br><span class="line">        background: #e5e9f2;</span><br><span class="line">    &#125;</span><br><span class="line">    .grid-content &#123;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        min-height: 36px;</span><br><span class="line">    &#125;</span><br><span class="line">    .row-bg &#123;</span><br><span class="line">        padding: 10px 0;</span><br><span class="line">        /* background-color: #f9fafc; */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
        <tag>Django Rest Framework</tag>
      </tags>
  </entry>
</search>
