<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020新版云效-流水线体验</title>
    <url>/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>2020新版云效-流水线体验<br><a id="more"></a></p>
<h4 id="云效介绍"><a href="#云效介绍" class="headerlink" title="云效介绍"></a>云效介绍</h4><p>「云效」，企业级一站式DevOps解决方案，源于阿里巴巴先进的管理理念和工程实践，致力于成为数字企业的研发效能引擎!云效提供从“需求 -&gt;开发-&gt;测试-&gt;发布-&gt;运维-&gt;运营”端到端的协同服务和研发工具，支持公共云、专有云和混合云多种部署形态，通过人工智能、自动化 技术的应用助力开发者提升研发效能，持续快速交付有效价值。</p>
<p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao.png" alt></p>
<h4 id="新版流水线体验"><a href="#新版流水线体验" class="headerlink" title="新版流水线体验"></a>新版流水线体验</h4><h5 id="登录云效平台"><a href="#登录云效平台" class="headerlink" title="登录云效平台"></a>登录云效平台</h5><p>新地址：<a href="https://devops.aliyun.com/">https://devops.aliyun.com/</a></p>
<h5 id="切换至流水线模块"><a href="#切换至流水线模块" class="headerlink" title="切换至流水线模块"></a>切换至<strong>流水线</strong>模块</h5><p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao1.png" alt></p>
<p>可以看到，流水线创建共分四个步骤：</p>
<ol>
<li>选择模版</li>
<li>选择源</li>
<li>配置任务</li>
<li>运行成功</li>
</ol>
<h5 id><a href="#" class="headerlink" title></a><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao2.png" alt></h5><h5 id="选择模版"><a href="#选择模版" class="headerlink" title="选择模版"></a>选择模版</h5><p>本次演示 服务语言类型为Python，构建Docker镜像后发布到镜像仓库</p>
<p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao3.png" alt></p>
<h5 id="配置代码源"><a href="#配置代码源" class="headerlink" title="配置代码源"></a>配置代码源</h5><p>镜像源选择公司自建Gitlab，配置个人证书，用于拉取代码</p>
<p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao4.png" alt></p>
<h5 id="配置镜像仓库信息"><a href="#配置镜像仓库信息" class="headerlink" title="配置镜像仓库信息"></a>配置镜像仓库信息</h5><p>需新建服务授权，拿到镜像服务的授权后，配置仓库地址，镜像Tag信息。</p>
<p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao5.png" alt></p>
<h5 id="运行流水线"><a href="#运行流水线" class="headerlink" title="运行流水线"></a>运行流水线</h5><p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao6.png" alt></p>
<h5 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h5><p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao8.png" alt></p>
<p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao9.png" alt></p>
<p><img src="/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/./yunxiao10.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Ansible-快速添加免密码认证</title>
    <url>/Ansible-%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E5%85%8D%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h4 id="生成管理机的私钥和公钥"><a href="#生成管理机的私钥和公钥" class="headerlink" title="生成管理机的私钥和公钥"></a>生成管理机的私钥和公钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -P &#x27;&#x27; -f /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h4 id="添加主机信息到主机清单中"><a href="#添加主机信息到主机清单中" class="headerlink" title="添加主机信息到主机清单中"></a>添加主机信息到主机清单中</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加分组</span></span><br><span class="line">[test-k8s]</span><br><span class="line">172.20.21.249</span><br><span class="line">172.20.21.250</span><br><span class="line">172.20.21.251</span><br><span class="line">172.20.21.252</span><br><span class="line">172.20.21.253</span><br><span class="line">172.20.21.254</span><br><span class="line">172.20.21.255</span><br><span class="line">172.20.22.0</span><br><span class="line">172.20.22.1</span><br><span class="line">172.20.22.2</span><br></pre></td></tr></table></figure>
<h4 id="配置playbook"><a href="#配置playbook" class="headerlink" title="配置playbook"></a>配置playbook</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/ssh-addkey.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: pro-k8s</span><br><span class="line">  gather_facts: no</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: install ssh key</span><br><span class="line">    authorized_key: user=root</span><br><span class="line">                    key=&quot;&#123;&#123; lookup(&#x27;file&#x27;, &#x27;/root/.ssh/id_rsa.pub&#x27;) &#125;&#125;&quot;</span><br><span class="line">                    state=present</span><br></pre></td></tr></table></figure>
<h4 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i /etc/ansible/hosts -k /etc/ansible/ssh-addkey.yml</span><br></pre></td></tr></table></figure>
<p>输入服务器密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SSH password:</span><br><span class="line"></span><br><span class="line">PLAY [pro-k8s] ***************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [install ssh key] *******************************************************************************************************************</span><br><span class="line">changed: [172.21.5.197]</span><br><span class="line">changed: [172.21.5.196]</span><br><span class="line">changed: [172.21.5.199]</span><br><span class="line">changed: [172.21.5.192]</span><br><span class="line">changed: [172.21.5.195]</span><br><span class="line">changed: [172.21.5.193]</span><br><span class="line">changed: [172.21.2.240]</span><br><span class="line">changed: [172.21.5.198]</span><br><span class="line">changed: [172.21.2.238]</span><br><span class="line">changed: [172.21.5.194]</span><br><span class="line">changed: [172.21.2.236]</span><br><span class="line">changed: [172.21.2.235]</span><br><span class="line">changed: [172.21.2.237]</span><br><span class="line">changed: [172.21.2.239]</span><br><span class="line">changed: [172.21.2.234]</span><br><span class="line">changed: [172.21.0.159]</span><br><span class="line">changed: [172.21.0.155]</span><br><span class="line">changed: [172.21.2.241]</span><br><span class="line">changed: [172.21.0.154]</span><br><span class="line">changed: [172.21.0.153]</span><br><span class="line">changed: [172.21.0.158]</span><br><span class="line">changed: [172.21.0.152]</span><br><span class="line">changed: [172.21.0.160]</span><br><span class="line">changed: [172.21.0.156]</span><br><span class="line">changed: [172.21.0.157]</span><br><span class="line">changed: [172.21.2.232]</span><br><span class="line">changed: [172.21.2.233]</span><br><span class="line">changed: [172.21.0.151]</span><br><span class="line">changed: [172.21.5.191]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************</span><br><span class="line">172.21.0.151               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.152               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.153               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.154               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.155               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.156               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.157               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.158               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.159               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.160               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.232               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.233               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.234               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.235               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.236               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.237               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.238               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.239               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.240               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.241               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.191               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.192               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.193               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.194               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.195               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.196               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.197               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.198               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.199               : ok=1    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible-批量修改密码</title>
    <url>/Ansible-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>介绍使用ansible批量修改用户密码的方法，因为在使用ansible修改用户密码的时候不能使用明文的方式，需要先加密，所以就需要使用一个方法对输入的明文的密码进行加密，下面就直接上干货。</p>
<h5 id="更改多个固定域名"><a href="#更改多个固定域名" class="headerlink" title="更改多个固定域名"></a>更改多个固定域名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat changePasswd.yaml</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">change</span> <span class="string">user</span> <span class="string">passwd</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">password=&#123;&#123;</span> <span class="string">item.chpass</span> <span class="string">|</span> <span class="string">password_hash(&#x27;sha512&#x27;)</span> <span class="string">&#125;&#125;</span>  <span class="string">update_password=always</span></span><br><span class="line">    <span class="attr">with_items:</span></span><br><span class="line">         <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&#x27;root&#x27;</span>, <span class="attr">chpass:</span> <span class="string">&#x27;***********&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook changePasswd.yaml</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Archer</title>
    <url>/Archer-SQL%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="ARCHER-—-自动化SQL操作平台"><a href="#ARCHER-—-自动化SQL操作平台" class="headerlink" title="ARCHER — 自动化SQL操作平台"></a>ARCHER — 自动化SQL操作平台</h1><p>基于inception的自动化SQL操作平台，支持SQL执行、LDAP认证、发邮件、OSC、SQL查询、SQL优化建议、权限管理等功能，支持docker镜像。</p>
<p>GitHub项目地址：<a href="https://github.com/jly8866/archer">https://github.com/jly8866/archer</a></p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li>自动审核<br>发起SQL上线，工单提交，由inception自动审核，审核通过后需要由审核人进行人工审核</li>
<li>人工审核<br>inception自动审核通过的工单，由其他研发工程师或研发经理来审核，DBA操作执行SQL<br>为什么要有人工审核？<br>这是遵循运维领域线上操作的流程意识，一个工程师要进行线上数据库SQL更新，最好由另外一个工程师来把关<br>很多时候DBA并不知道SQL的业务含义，所以人工审核最好由其他研发工程师或研发经理来审核. 这是archer的设计理念</li>
<li>回滚数据展示<br>工单内可展示回滚语句，支持一键提交回滚工单</li>
<li>定时执行SQL<br>审核通过的工单可由DBA选择定时执行，执行前可修改执行时间，可随时终止</li>
<li>pt-osc执行<br>支持pt-osc执行进度展示，并且可以点击中止pt-osc进程</li>
<li>MySQL查询<br>库、表、关键字自动补全<br>查询结果集限制、查询结果导出、表结构展示、多结果集展示</li>
<li>MySQL查询权限管理<br>基于inception解析查询语句，查询权限支持限制到表级<br>查询权限申请、审核和管理，支持审核流程配置，多级审核</li>
<li>MySQL查询动态脱敏<br>基于inception解析查询语句，配合脱敏字段配置、脱敏规则(正则表达式)实现敏感数据动态脱敏</li>
<li>慢日志管理<br>基于percona-toolkit的pt_query_digest分析和存储慢日志，并在web端展现</li>
<li>邮件通知<br>可配置邮件提醒，对上线申请、权限申请、审核结果等进行通知<br>对异常登录进行通知</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装docker-、git"><a href="#安装docker-、git" class="headerlink" title="安装docker 、git"></a>安装docker 、git</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y docker git</span><br></pre></td></tr></table></figure>
<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull hhyo&#x2F;inception</span><br><span class="line">docker pull hhyo&#x2F;archer</span><br><span class="line">docker pull mysql:5.6.35</span><br></pre></td></tr></table></figure>
<h4 id="创建archer配置文件"><a href="#创建archer配置文件" class="headerlink" title="创建archer配置文件"></a>创建archer配置文件</h4><p>服务目录定为 /vcg/archer/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;vcg&#x2F;archer&#x2F;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;vcg&#x2F;archer&#x2F;inc.cnf</span><br><span class="line"></span><br><span class="line">[inception]</span><br><span class="line">general_log&#x3D;1</span><br><span class="line">general_log_file&#x3D;inception.log</span><br><span class="line">port&#x3D;6669</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;inc.socket</span><br><span class="line">character-set-client-handshake&#x3D;0</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">inception_remote_system_password&#x3D;root</span><br><span class="line">inception_remote_system_user&#x3D;wzf1</span><br><span class="line">inception_remote_backup_port&#x3D;3306</span><br><span class="line">inception_remote_backup_host&#x3D;127.0.0.1</span><br><span class="line">inception_support_charset&#x3D;utf8,utf8mb4</span><br><span class="line">inception_enable_nullable&#x3D;0</span><br><span class="line">inception_check_primary_key&#x3D;1</span><br><span class="line">inception_check_column_comment&#x3D;1</span><br><span class="line">inception_check_table_comment&#x3D;1</span><br><span class="line">inception_osc_on&#x3D;OFF</span><br><span class="line">inception_osc_bin_dir&#x3D;&#x2F;usr&#x2F;bin</span><br><span class="line">inception_osc_min_table_size&#x3D;1</span><br><span class="line">inception_osc_chunk_time&#x3D;0.1</span><br><span class="line">inception_enable_blob_type&#x3D;1</span><br><span class="line">inception_check_column_default_value&#x3D;1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;jly8866&#x2F;archer&#x2F;blob&#x2F;master&#x2F;archer&#x2F;settings.py</span><br><span class="line">修改其中的数据库地址、用户名、密码</span><br></pre></td></tr></table></figure>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name inception -v &#x2F;vcg&#x2F;archer&#x2F;inc.cnf:&#x2F;etc&#x2F;inc.cnf -p 6669:6669 -dti hhyo&#x2F;inception</span><br><span class="line"></span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.6.35</span><br><span class="line"></span><br><span class="line">docker run --name archer -v &#x2F;vcg&#x2F;archer&#x2F;settings.py:&#x2F;opt&#x2F;archer&#x2F;archer&#x2F;settings.py  -e NGINX_PORT&#x3D;9123 -p 9123:9123 -dti hhyo&#x2F;archer</span><br></pre></td></tr></table></figure>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS archer_github DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -ti archer &#x2F;bin&#x2F;bash</span><br><span class="line">  cd &#x2F;opt&#x2F;archer</span><br><span class="line">  source &#x2F;opt&#x2F;venv4archer&#x2F;bin&#x2F;activate</span><br><span class="line">  # 初始化数据库</span><br><span class="line">  python3 manage.py makemigrations sql</span><br><span class="line">  python3 manage.py migrate</span><br><span class="line">  # 创建管理员账号</span><br><span class="line">  python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>地址： <a href="http://xxxx::9123/">http://xxxx::9123/</a></p>
]]></content>
      <categories>
        <category>Archer</category>
      </categories>
      <tags>
        <tag>Archer</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装MariaDB</title>
    <url>/CentOS7%E5%AE%89%E8%A3%85MariaDB/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>CentOS7安装MariaDB</p>
<p><a href="https://mariadb.com/kb/en/library/yum/">https://mariadb.com/kb/en/library/yum/</a></p>
<h5 id="配置YUM源"><a href="#配置YUM源" class="headerlink" title="配置YUM源"></a>配置YUM源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/MariaDB.repo</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&#39;ll need the current</span><br><span class="line">password for the root user.  If you&#39;ve just installed MariaDB, and</span><br><span class="line">you haven&#39;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y&#x2F;n] y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y&#x2F;n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &#39;localhost&#39;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y&#x2F;n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &#39;test&#39; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y&#x2F;n] y</span><br><span class="line"> - Dropping test database...</span><br><span class="line"> ... Success!</span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y&#x2F;n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&#39;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br></pre></td></tr></table></figure>
<h6 id="配置远程登录"><a href="#配置远程登录" class="headerlink" title="配置远程登录"></a>配置远程登录</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&#x27;virgo&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>CentOS配置yum源</title>
    <url>/CentOS%E9%85%8D%E7%BD%AEyum%E6%BA%90/</url>
    <content><![CDATA[<p>推荐使用<a href="https://opsx.alibaba.com/?lang=zh-CN">阿里源</a></p>
<h5 id="基础源"><a href="#基础源" class="headerlink" title="基础源"></a>基础源</h5><h6 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS 6</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS 7</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="生成缓存"><a href="#生成缓存" class="headerlink" title="生成缓存"></a>生成缓存</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h5 id="EPEL源"><a href="#EPEL源" class="headerlink" title="EPEL源"></a>EPEL源</h5><h6 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</span><br><span class="line">mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</span><br></pre></td></tr></table></figure>
<h6 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> epel(RHEL 7)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> epel(RHEL 6)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> epel(RHEL 5)</span></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-5.repo</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence安装-维护-迁移实践</title>
    <url>/Confluence%E5%AE%89%E8%A3%85-%E7%BB%B4%E6%8A%A4-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><strong>Confluence</strong>介绍</p>
<p><strong>Confluence</strong>是由澳大利亚软件公司<a href="https://en.wikipedia.org/wiki/Atlassian">Atlassian</a>开发和发布的<a href="https://en.wikipedia.org/wiki/Collaboration_software">协作软件</a>程序</p>
<p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。</p>
<p>Confluence为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><hr>
<blockquote>
<p><a href="https://confluence.atlassian.com/conf612/installing-confluence-on-linux-from-archive-file-958778538.html">https://confluence.atlassian.com/conf612/installing-confluence-on-linux-from-archive-file-958778538.html</a></p>
</blockquote>
<h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>Download the <code>tar.gz</code> file for your operating system - <a href="https://www.atlassian.com/software/confluence/download?_ga=2.242479878.561576652.1556502870-546260764.1556502870">https://www.atlassian.com/software/confluence/download</a>. </p>
<p>本次演示我下载的文件包为：atlassian-confluence-6.12.0.zip</p>
<h5 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br><span class="line">java -version   # 验证</span><br></pre></td></tr></table></figure>
<h5 id="创建Confluence用户"><a href="#创建Confluence用户" class="headerlink" title="创建Confluence用户"></a>创建Confluence用户</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -create-home --comment &quot;Account for running Confluence&quot; --shell /bin/bash confluence</span><br></pre></td></tr></table></figure>
<h5 id="解压安装包、创建配置、配置权限"><a href="#解压安装包、创建配置、配置权限" class="headerlink" title="解压安装包、创建配置、配置权限"></a>解压安装包、创建配置、配置权限</h5><p>目录规划：</p>
<p>​        安装目录：/data/vcg/confluence</p>
<p>​        数据目录：/data/vcg/confluence-home</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;root&#x2F;atlassian-confluence-6.12.0.zip &#x2F;data&#x2F;vcg&#x2F;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install unzip -y</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;vcg&#x2F;</span><br><span class="line">unzip atlassian-confluence-6.12.0.zip</span><br><span class="line">mv atlassian-confluence-6.12.0 confluence</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/vcg/confluence-home</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R confluence /data/vcg/confluence/</span><br><span class="line">chmod -R u=rwx,go-rwx /data/vcg/confluence/</span><br><span class="line">chown -R confluence /data/vcg/confluence-home/</span><br><span class="line">chmod -R u=rwx,go-rwx /data/vcg/confluence-home/</span><br></pre></td></tr></table></figure>
<h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p>vcg这边使用的阿里云RDS数据库，未手动安装MySQL</p>
<p>数据库使用MySQL，需安装驱动软件。<br>获取mysql-connector-java的安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.45-bin.jar &#x2F;data&#x2F;vcg&#x2F;confluence&#x2F;confluence&#x2F;WEB-INF&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;confluence.home=/data/vcg/confluence-home/&quot; &gt; confluence/confluence/WEB-INF/classes/confluence-init.properties</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问ip:8090 继续配置Confluence</span><br></pre></td></tr></table></figure>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><h5 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h5><p>登录老Confluence界面，进入”站点管理”—“备份已还原”，点击”备份”，如图</p>
<p>数据备份路径为：/data/vcg/confluence-home/backups/</p>
<p><img src="/Confluence%E5%AE%89%E8%A3%85-%E7%BB%B4%E6%8A%A4-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5/confluence1.png" alt="image-20190429104530362"></p>
<h5 id="拷贝备份数据包到新服务器"><a href="#拷贝备份数据包到新服务器" class="headerlink" title="拷贝备份数据包到新服务器"></a>拷贝备份数据包到新服务器</h5><p>备份必须复制至<code>/data/vcg/confluence-home/restore</code>目录中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /data/vcg/confluence-home/backups/xmlexport-20190225-205713-119.zip  root@&#x27;xxxx&#x27;:/data/vcg/confluence-home/restore/</span><br></pre></td></tr></table></figure>
<h5 id="部署新的Confluence"><a href="#部署新的Confluence" class="headerlink" title="部署新的Confluence"></a>部署新的Confluence</h5><h5 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h5><p>登录新的Confluence的”站点管理”—“备份已还原”。</p>
<p><img src="/Confluence%E5%AE%89%E8%A3%85-%E7%BB%B4%E6%8A%A4-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5/confluence2.png" alt="2"></p>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><h5 id="备份数据定期删除"><a href="#备份数据定期删除" class="headerlink" title="备份数据定期删除"></a>备份数据定期删除</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 15 * * * find /data/vcg/confluence-home/backups/* -type f -mtime +5 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h5 id="漏洞补丁-被植入挖矿程序"><a href="#漏洞补丁-被植入挖矿程序" class="headerlink" title="漏洞补丁(被植入挖矿程序)"></a>漏洞补丁(被植入挖矿程序)</h5><blockquote>
<p><a href="https://help.aliyun.com/noticelist/articleid/1000128459.html?spm=a2c4g.789213612.n2.10.2a716141mqqJjY">https://help.aliyun.com/noticelist/articleid/1000128459.html?spm=a2c4g.789213612.n2.10.2a716141mqqJjY</a></p>
</blockquote>
<p>解决办法：<br>升级Widget Connector 组件</p>
<h4 id="培训文档"><a href="#培训文档" class="headerlink" title="培训文档"></a>培训文档</h4><div class="pdfobject-container" data-target="Confluence基础培训_中文版.pdf" data-height="500px"></div>
<div class="pdfobject-container" data-target="Confluence高级培训_中文版.pdf" data-height="500px"></div>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence数据库SSL警告</title>
    <url>/Confluence%E6%95%B0%E6%8D%AE%E5%BA%93SSL%E8%AD%A6%E5%91%8A/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a></p>
<h3 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>
<p><img src="/Confluence%E6%95%B0%E6%8D%AE%E5%BA%93SSL%E8%AD%A6%E5%91%8A/image-20191126092908807.png" alt="image-20191126092908807"><br>可以看到有很多报警信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tue Nov 26 09:13:39 CST 2019 WARN: Establishing SSL connection without server&#39;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#39;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#39;false&#39;. You need either to explicitly disable SSL by setting useSSL&#x3D;false, or set useSSL&#x3D;true and provide truststore for server certificate verification.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">警告:在没有SSL连接的情况下建立SSL连接不建议使用服务器的身份验证。根据MySQL5.5.45+、5.6.26+和5.7.6+要求必须建立SSL连接默认情况下，如果没有设置显式选项不使用SSL的应用程序将verifyServerCertificate属性设置为“false”。您需要通过设置useSSL&#x3D;false显式禁用SSL，或设置useSSL&#x3D;true，并为服务器证书提供信任存储验证</span><br></pre></td></tr></table></figure>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、进入confluence的data-home目录；</span></span><br><span class="line">cd /data/vcg/confluence-home</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、备份配置文件</span></span><br><span class="line">cp confluence.cfg.xml confluence.cfg.xml-bak191126</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、修改内容</span></span><br><span class="line"></span><br><span class="line">vim confluence.cfg.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库连接后增加 ?useSSL=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如下：</span></span><br><span class="line">    &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://rm-2zey0d751uapi749y35890.mysql.rds.aliyuncs.com:3306/confluence?useSSL=false&lt;/property&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、重启confluence    </span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>Container and Docker</title>
    <url>/Container_and_Docker/</url>
    <content><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br><a id="more"></a></p>
<h4 id="容器与Docker"><a href="#容器与Docker" class="headerlink" title="容器与Docker"></a>容器与Docker</h4><p>容器技术起源于Linux，是一种内核虚拟化技术，提供轻量级的虚拟化，以便隔离进程和资源。尽管容器技术已经出现很久，却是随着Docker的出现而变得广为人知。Docker是第一个使容器能在不同机器之间移植的系统。它不仅简化了打包应用的流程，也简化了打包应用的库和依赖，甚至整个操作系统的文件系统能被打包成一个简单的可移植的包，这个包可以被用来在任何其他运行Docker的机器上使用。</p>
<p>容器和虚拟机具有相似的资源隔离和分配方式，容器虚拟化了操作系统而不是硬件，更加便携和高效。</p>
<p><img src="/Container_and_Docker/./zh-cn_image_0257565965.png" alt="img"></p>
<p>相比于使用虚拟机，容器有如下优点：</p>
<ul>
<li><p>更高效的利用系统资源</p>
<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，容器对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>
</li>
<li><p>更快速的启动时间</p>
<p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间，大大节约了开发、测试、部署的时间。</p>
</li>
<li><p>一致的运行环境</p>
<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些问题并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性。</p>
</li>
<li><p>更轻松的迁移</p>
<p>由于Docker确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机，其运行结果是一致的。因此可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>
</li>
<li><p>更轻松的维护和扩展</p>
<p>Docker使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>
</li>
</ul>
<h4 id="Docker容器典型使用流程"><a href="#Docker容器典型使用流程" class="headerlink" title="Docker容器典型使用流程"></a>Docker容器典型使用流程</h4><p>Docker容器有如下三个主要概念。</p>
<ul>
<li><strong>镜像</strong>：Docker镜像里包含了已打包的应用程序及其所依赖的环境。它包含应用程序可用的文件系统和其他元数据，如镜像运行时的可执行文件路径。</li>
<li><strong>镜像仓库</strong>：Docker镜像仓库用于存放Docker镜像，以及促进不同人和不同电脑之间共享这些镜像。当编译镜像时，要么可以在编译它的电脑上运行，要么可以先上传镜像到一个镜像仓库，然后下载到另外一台电脑上并运行它。某些仓库是公开的，允许所有人从中拉取镜像，同时也有一些是私有的，仅部分人和机器可接入。</li>
<li><strong>容器</strong>：Docker容器通常是一个Linux容器，它基于Docker镜像被创建。一个运行中的容器是一个运行在Docker主机上的进程，但它和主机，以及所有运行在主机上的其他进程都是隔离的。这个进程也是资源受限的，意味着它只能访问和使用分配给它的资源（CPU、内存等）。</li>
</ul>
<p>典型的使用流程如下图所示。</p>
<p>图2 Docker容器典型使用流程</p>
<p><img src="/Container_and_Docker/./zh-cn_image_0258868444.png" alt="img"></p>
<ol>
<li><p>首先开发者在开发环境机器上开发应用并制作镜像。</p>
<p>Docker执行命令，构建镜像并存储在机器上。</p>
</li>
<li><p>开发者发送上传镜像命令。</p>
<p>Docker收到命令后，将本地镜像上传到镜像仓库。</p>
</li>
<li><p>开发者向生产环境机器发送运行镜像命令。</p>
<p>生产环境机器收到命令后，Docker会从镜像仓库拉取镜像到机器上，然后基于镜像运行容器。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie &amp; Session</title>
    <url>/Cookie-Session/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.cnblogs.com/liwenzhou/p/8343243.html">https://www.cnblogs.com/liwenzhou/p/8343243.html</a></p>
</blockquote>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h4 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h4><p>保存在浏览器端的键值对</p>
<h4 id="为什么要有Cookie"><a href="#为什么要有Cookie" class="headerlink" title="为什么要有Cookie"></a>为什么要有Cookie</h4><p>因为HTTP请求是无状态的</p>
<h4 id="Cookie的原理"><a href="#Cookie的原理" class="headerlink" title="Cookie的原理"></a>Cookie的原理</h4><p>服务端可以在返回响应的时候 做手脚<br>在浏览器上写入键值对，就是Cookie，浏览器发送请求的时候会自动携带该网站保存在浏览器中的键值对</p>
<h4 id="Cookie的使用场景"><a href="#Cookie的使用场景" class="headerlink" title="Cookie的使用场景"></a>Cookie的使用场景</h4><ol>
<li>保存登录信息</li>
<li>保存用户的搜索关键词</li>
</ol>
<h4 id="Django中操作Cookie"><a href="#Django中操作Cookie" class="headerlink" title="Django中操作Cookie"></a>Django中操作Cookie</h4><h5 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.COOKIES[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">request.get_signed_cookie(key, default=RAISE_ERROR, salt=<span class="string">&#x27;&#x27;</span>, max_age=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">    default: 默认值</span><br><span class="line">    salt: 加密盐</span><br><span class="line">    max_age: 后台控制过期时间</span><br></pre></td></tr></table></figure>
<h5 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep = HttpResponse(...)</span><br><span class="line">rep ＝ render(request, ...)</span><br><span class="line"></span><br><span class="line">rep.set_cookie(key,value,...)</span><br><span class="line">rep.set_signed_cookie(key,value,salt=<span class="string">&#x27;加密盐&#x27;</span>, max_age=<span class="literal">None</span>, ...)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">     key, 键</span><br><span class="line">     value=<span class="string">&#x27;&#x27;</span>, 值</span><br><span class="line">     max_age=<span class="literal">None</span>, 超时时间</span><br><span class="line">     expires=<span class="literal">None</span>, 超时时间(IE requires expires, so set it <span class="keyword">if</span> hasn<span class="string">&#x27;t been already.)</span></span><br><span class="line"><span class="string">     path=&#x27;</span>/<span class="string">&#x27;, Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问</span></span><br><span class="line"><span class="string">     domain=None, Cookie生效的域名</span></span><br><span class="line"><span class="string">     secure=False, https传输</span></span><br><span class="line"><span class="string">     httponly=False 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure>
<h5 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    rep = redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">&quot;user&quot;</span>)  <span class="comment"># 删除用户浏览器上之前设置的usercookie值</span></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure>
<h5 id="完整views-py示例："><a href="#完整views-py示例：" class="headerlink" title="完整views.py示例："></a>完整views.py示例：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">request,*args,**kwargs</span>):</span></span><br><span class="line">        Cookies = request.COOKIES.get(<span class="string">&quot;is_login&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;yes&#x27;</span> != Cookies:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index界面&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;test01/login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    rep = redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">&#x27;is_login&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> rep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_username</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;z&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            rep = render(request,<span class="string">&#x27;test01/home.html&#x27;</span>,&#123;<span class="string">&#x27;username&#x27;</span>:username&#125;)</span><br><span class="line">            <span class="comment">#rep.set_cookie(&#x27;is_login&#x27;,&#x27;yes&#x27;)</span></span><br><span class="line">            rep.set_signed_cookie(<span class="string">&#x27;is_login&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, expires=<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rep = redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rep =  redirect(<span class="string">&#x27;/test01/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Cookie虽然在一定程度上解决了“保持状态”的需求，但是由于Cookie本身最大支持4096字节，以及Cookie本身保存在客户端，可能被拦截或窃取，因此就需要有一种新的东西，它能支持更多的字节，并且他保存在服务器，有较高的安全性。这就是Session。</p>
<p>问题来了，基于HTTP协议的无状态特征，服务器根本就不知道访问者是“谁”。那么上述的Cookie就起到桥接的作用。</p>
<p>我们可以给每个客户端的Cookie分配一个唯一的id，这样用户在访问时，通过Cookie，服务器就知道来的人是“谁”。然后我们再根据不同的Cookie的id，在服务器上保存一段时间的私密资料，如“账号密码”等等。</p>
<p>总结而言：Cookie弥补了HTTP无状态的不足，让服务器知道来的人是“谁”；但是Cookie以文本的形式保存在本地，自身安全性较差；所以我们就通过Cookie识别不同的用户，对应的在Session里保存私密的信息以及超过4096字节的文本。<br>另外，上述所说的Cookie和Session其实是共通性的东西，不限于语言和框架。</p>
<h4 id="Django中操作Session"><a href="#Django中操作Session" class="headerlink" title="Django中操作Session"></a>Django中操作Session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取、设置、删除Session中数据</span></span><br><span class="line">request.session[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line">request.session.get(<span class="string">&#x27;k1&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">request.session[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">123</span></span><br><span class="line">request.session.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">123</span>) <span class="comment"># 存在则不设置</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">&#x27;k1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有 键、值、键值对</span></span><br><span class="line">request.session.keys()</span><br><span class="line">request.session.values()</span><br><span class="line">request.session.items()</span><br><span class="line">request.session.iterkeys()</span><br><span class="line">request.session.itervalues()</span><br><span class="line">request.session.iteritems()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话session的key</span></span><br><span class="line">request.session.session_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有Session失效日期小于当前日期的数据删除</span></span><br><span class="line">request.session.clear_expired()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话session的key在数据库中是否存在</span></span><br><span class="line">request.session.exists(<span class="string">&quot;session_key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前会话的所有Session数据</span></span><br><span class="line">request.session.delete()</span><br><span class="line">　　</span><br><span class="line"><span class="comment"># 删除当前的会话数据并删除会话的Cookie。</span></span><br><span class="line">request.session.flush() </span><br><span class="line">    这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br><span class="line">    例如，django.contrib.auth.logout() 函数中就会调用它。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置会话Session和Cookie的超时时间</span></span><br><span class="line">request.session.set_expiry(value)</span><br><span class="line">    * 如果value是个整数，session会在些秒数后失效。</span><br><span class="line">    * 如果value是个datatime或timedelta，session就会在这个时间后失效。</span><br><span class="line">    * 如果value是<span class="number">0</span>,用户关闭浏览器session就会失效。</span><br><span class="line">    * 如果value是<span class="literal">None</span>,session会依赖全局session失效策略。</span><br></pre></td></tr></table></figure>
<h4 id="Seesion版验证登录"><a href="#Seesion版验证登录" class="headerlink" title="Seesion版验证登录"></a>Seesion版验证登录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">        next_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">&quot;user&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&quot;/login/?next=&#123;&#125;&quot;</span>.format(next_url))</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;alex&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;alex1234&quot;</span>:</span><br><span class="line">            <span class="comment"># 设置session</span></span><br><span class="line">            request.session[<span class="string">&quot;user&quot;</span>] = user</span><br><span class="line">            <span class="comment"># 获取跳到登陆页面之前的URL</span></span><br><span class="line">            next_url = request.GET.get(<span class="string">&quot;next&quot;</span>)</span><br><span class="line">            <span class="comment"># 如果有，就跳转回登陆之前的URL</span></span><br><span class="line">            <span class="keyword">if</span> next_url:</span><br><span class="line">                <span class="keyword">return</span> redirect(next_url)</span><br><span class="line">            <span class="comment"># 否则默认跳转到index页面</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">&quot;/index/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 删除所有当前请求相关的session</span></span><br><span class="line">    request.session.delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    current_user = request.session.get(<span class="string">&quot;user&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;index.html&quot;</span>, &#123;<span class="string">&quot;user&quot;</span>: current_user&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Django中的Session配置"><a href="#Django中的Session配置" class="headerlink" title="Django中的Session配置"></a>Django中的Session配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.db&#x27;</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&#x27;default&#x27;</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.file&#x27;</span>    <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cached_db&#x27;</span>        <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.signed_cookies&#x27;</span>   <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ <span class="string">&quot;sessionid&quot;</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">SESSION_COOKIE_PATH ＝ <span class="string">&quot;/&quot;</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-Celery异步任务调度工具</title>
    <url>/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Celery是一个异步任务的调度工具。<br><a id="more"></a><br>Django中使用Celery实现异步或定时任务</p>
<p><strong>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></strong></p>
<p><strong>Celery 官方文档英文版</strong>：<a href="http://docs.celeryproject.org/en/latest/index.html"><strong>http://docs.celeryproject.org/en/latest/index.html</strong></a></p>
<p><strong>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></strong></p>
<h3 id="Celery简介"><a href="#Celery简介" class="headerlink" title="Celery简介"></a>Celery简介</h3><p>Celery是一个异步任务的调度工具。</p>
<p>Celery 是 Distributed Task Queue，分布式任务队列，分布式决定了可以有多个 worker 的存在，队列表示其是异步操作，即存在一个产生任务提出需求的工头，和一群等着被分配工作的码农。</p>
<p>在 Python 中定义 Celery 的时候，我们要引入 Broker，中文翻译过来就是“中间人”的意思，在这里 Broker 起到一个中间人的角色。在工头提出任务的时候，把所有的任务放到 Broker 里面，在 Broker 的另外一头，一群码农等着取出一个个任务准备着手做。</p>
<p>这种模式注定了整个系统会是个开环系统，工头对于码农们把任务做的怎样是不知情的。所以我们要引入 Backend 来保存每次任务的结果。这个 Backend 有点像我们的 Broker，也是存储任务的信息用的，只不过这里存的是那些任务的返回结果。我们可以选择只让错误执行的任务返回结果到 Backend，这样我们取回结果，便可以知道有多少任务执行失败了。</p>
<p>Celery(芹菜)是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，但对调度支持也很好。Celery用于生产系统每天处理数以百万计的任务。Celery是用Python编写的，但该协议可以在任何语言实现。它也可以与其他语言通过webhooks实现。Celery建议的消息队列是RabbitMQ，但提供有限支持Redis, Beanstalk, MongoDB, CouchDB, 和数据库（使用SQLAlchemy的或Django的 ORM） 。Celery是易于集成Django, Pylons and Flask，使用 django-celery, celery-pylons and Flask-Celery 附加包即可。</p>
<h3 id="架构组成"><a href="#架构组成" class="headerlink" title="架构组成"></a>架构组成</h3><p><img src="/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/./celery00.png" alt="celery00"></p>
<p>Celery的架构由三部分组成，<strong><em>消息中间件</em></strong>（message broker），<strong><em>任务执行单元\</em></strong>（worker）和<strong><em>任务执行结果存储</em></strong>（task result store）组成。</p>
<p><img src="/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/./celery01.png" alt="celery01"></p>
<p>可以看到，Celery 主要包含以下几个模块：</p>
<ul>
<li><p>任务模块 Task</p>
<p>包含异步任务和定时任务。其中，<strong>异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列</strong>。</p>
</li>
<li><p>消息中间件 Broker</p>
<p>Broker，即为任务调度队列，<strong>接收任务生产者发来的消息（即任务），将任务存入队列</strong>。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 <a href="http://lib.csdn.net/base/redis">Redis</a> 等。</p>
</li>
<li><p>任务执行单元 Worker</p>
<p>Worker 是执行任务的处理单元，<strong>它实时监控消息队列，获取队列中调度的任务，并执行它</strong>。</p>
</li>
<li><p>任务结果存储 Backend</p>
<p>Backend 用于<strong>存储任务的执行结果</strong>，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, <a href="http://lib.csdn.net/base/redis">redis</a> 和 <a href="http://lib.csdn.net/base/mongodb">MongoDB</a> 等。</p>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install django-celery-beta  #任务发送</span><br><span class="line">pip install django-celery-results  #结果存储</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>确保目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- proj&#x2F;</span><br><span class="line">  - manage.py</span><br><span class="line">  - proj&#x2F;</span><br><span class="line">    - __init__.py</span><br><span class="line">    - settings.py</span><br><span class="line">    - urls.py</span><br></pre></td></tr></table></figure>
<p>新建<strong>proj/proj/celery.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab, timedelta</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;proj.settings&#x27;</span>)</span><br><span class="line">app = Celery(<span class="string">&#x27;proj&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>, namespace=<span class="string">&#x27;CELERY&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks() <span class="comment"># 自动发现任务文件每个app下的task.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Request: &#123;0!r&#125;&#x27;</span>.format(self.request))</span><br></pre></td></tr></table></figure>
<p>编辑<strong>proj/proj/<strong>init</strong>.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">&#x27;celery_app&#x27;</span>,)</span><br></pre></td></tr></table></figure>
<p>编辑<strong>proj/proj/settings.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">&#x27;django_celery_beat&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_celery_results&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery</span></span><br><span class="line">CELERY_URL = <span class="string">&#x27;redis://:&#x27;</span> + configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisPassword&#x27;</span>] + <span class="string">&#x27;@&#x27;</span> + configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisHost&#x27;</span>] + <span class="string">&#x27;:&#x27;</span> + str(</span><br><span class="line">    configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisPort&#x27;</span>]) + <span class="string">&#x27;/&#x27;</span> + str(configs[<span class="string">&#x27;redis&#x27;</span>][<span class="string">&#x27;RedisDb&#x27;</span>])</span><br><span class="line"><span class="comment"># CELERY_URL = &quot;redis://:&#123; 密码 &#125;@&#123; redis地址 &#125;:6379/4&quot;</span></span><br><span class="line">BROKER_URL = CELERY_URL</span><br><span class="line">CELERY_BROKER_URL = CELERY_URL</span><br><span class="line"><span class="comment"># CELERY_BEAT_SCHEDULER = &#x27;django_celery_beat.schedulers:DatabaseScheduler&#x27;</span></span><br><span class="line"><span class="comment"># CELERY_RESULT_BACKEND = CELERY_URL</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;django-db&#x27;</span>  <span class="comment"># 使用django orm 作为结果存储</span></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">&#x27;application/json&#x27;</span>]</span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">CELERY_ENABLE_UTC = <span class="literal">True</span></span><br><span class="line">CELERYD_CONCURRENCY = <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 创建更改的文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 将生成的py文件应用到数据库</span></span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h4 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 用户密码可以用：</span></span><br><span class="line">python manage.py changepassword username</span><br></pre></td></tr></table></figure>
<h4 id="增加定时任务"><a href="#增加定时任务" class="headerlink" title="增加定时任务"></a>增加定时任务</h4><p>编辑<strong>proj/proj/celery.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.conf.update(</span><br><span class="line">    CELERYBEAT_SCHEDULE=&#123;</span><br><span class="line">        <span class="string">&#x27;task_update_ali_ecs&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_ali_ecs&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;task_update_ali_rds&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_ali_rds&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;task_update_ali_slb&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_ali_slb&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;task_update_tx_cns&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;assets.tasks.task_update_tx_cns&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;add-every-monday-morning&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;tasks.add&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;schedule&#x27;</span>: crontab(hour=<span class="number">7</span>, minute=<span class="number">30</span>, day_of_week=<span class="number">1</span>),</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>),</span><br><span class="line">    		&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#crontab-schedules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># schedule 可以填写timedelta表示循环时间，隔多久执行一次</span></span><br><span class="line"><span class="comment">#          也可以填写 crontab  表示某个时间去执行，例如示例中，表示 Executes every Monday morning at 7:30 a.m.</span></span><br></pre></td></tr></table></figure>
<h4 id="新增任务的代码"><a href="#新增任务的代码" class="headerlink" title="新增任务的代码"></a>新增任务的代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django_celery_beat.models import PeriodicTask, ClockedSchedule</span><br><span class="line"></span><br><span class="line">#比如创建一个发版任务</span><br><span class="line"># 1.新创建时间clockschedule</span><br><span class="line">clock, create &#x3D; ClockedSchedule.objects.get_or_create(clocked_time&#x3D;db_deploy_time)</span><br><span class="line"></span><br><span class="line"># 2.创建任务</span><br><span class="line">PeriodicTask.objects.create(</span><br><span class="line">                                clocked&#x3D;clock,</span><br><span class="line">                                name&#x3D;&#39;vrigo-deploy_&#39; + db_data[&#39;service_list&#39;] + &#39;-&#39; + str(db_deploy_time),</span><br><span class="line">                                task&#x3D;&#39;services.tasks.task_build_job&#39;,</span><br><span class="line">                                args&#x3D;json.dumps([services, int(id)]),</span><br><span class="line">                                start_time&#x3D;datetime.datetime.now(),</span><br><span class="line">                                one_off&#x3D;True,</span><br><span class="line">                            )</span><br></pre></td></tr></table></figure>
<p><strong>services/tasks.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> services.api.jenkins <span class="keyword">import</span> JenkinsApi</span><br><span class="line"><span class="keyword">from</span> services.views <span class="keyword">import</span> task_result_to_db</span><br><span class="line"><span class="keyword">from</span> users.api.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_build_job</span>(<span class="params">service,id</span>):</span></span><br><span class="line">    obj = JenkinsApi()</span><br><span class="line">    data = obj.build_job(service)   <span class="comment">#触发jenkins job</span></span><br><span class="line">    <span class="comment"># id = kwargs.get(&quot;id&quot;, 10)</span></span><br><span class="line">    to_db = task_result_to_db(id, data)  <span class="comment">#将结果存入db中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">celery -A proj beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span><br><span class="line"></span><br><span class="line">celery worker -A virgo -l info</span><br><span class="line"></span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<p><img src="/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/./celery02.png" alt></p>
<h3 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery flower -A virgo -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span><br></pre></td></tr></table></figure>
<p><img src="/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/./celery03.png" alt></p>
<p><img src="/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/./celery04.png" alt></p>
<p><img src="/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/./celery05.png" alt></p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-LDAP统一认证</title>
    <url>/Django-LDAP%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<ul>
<li><p>LDAP统一认证</p>
<a id="more"></a>
</li>
<li><p>Documentation: <a href="https://django-auth-ldap.readthedocs.io/">https://django-auth-ldap.readthedocs.io/</a></p>
</li>
<li>PyPI: <a href="https://pypi.org/project/django-auth-ldap/">https://pypi.org/project/django-auth-ldap/</a></li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-auth-ldap</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>setting.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Django-auth-ldap 配置部分</span></span><br><span class="line"><span class="keyword">import</span> ldap</span><br><span class="line"><span class="keyword">from</span> django_auth_ldap.config <span class="keyword">import</span> LDAPSearch, GroupOfNamesType, PosixGroupType</span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">&#x27;django_auth_ldap.backend.LDAPBackend&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_SERVER_URI = configs[<span class="string">&#x27;ldap&#x27;</span>][<span class="string">&#x27;ldhost&#x27;</span>]</span><br><span class="line">AUTH_LDAP_BIND_DN = <span class="string">&quot;cn=root,dc=vcg,dc=com&quot;</span></span><br><span class="line">AUTH_LDAP_BIND_PASSWORD = <span class="string">&#x27;*****&#x27;</span></span><br><span class="line"></span><br><span class="line">AUTH_LDAP_USER_DN_TEMPLATE = <span class="string">&quot;cn=%(user)s,ou=People,dc=vcg,dc=com&quot;</span></span><br><span class="line"></span><br><span class="line">AUTH_LDAP_USER_ATTR_MAP = &#123;</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span>: <span class="string">&quot;givenName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span>: <span class="string">&quot;sn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;mail&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_GROUP_SEARCH = LDAPSearch(</span><br><span class="line">    <span class="string">&quot;ou=Group,dc=vcg,dc=com&quot;</span>, ldap.SCOPE_SUBTREE, <span class="string">&quot;(objectClass=posixGroup)&quot;</span></span><br><span class="line">)</span><br><span class="line">AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr=<span class="string">&quot;cn&quot;</span>)</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_REQUIRE_GROUP = <span class="string">&quot;cn=vcg-tech,ou=Group,dc=vcg,dc=com&quot;</span></span><br><span class="line"><span class="comment"># AUTH_LDAP_DENY_GROUP = &quot;cn=disabled,ou=groups,dc=example,dc=com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组权限分配：可登录、可登录后台、超级管理员</span></span><br><span class="line">AUTH_LDAP_USER_FLAGS_BY_GROUP = &#123;</span><br><span class="line">    <span class="string">&quot;is_active&quot;</span>: <span class="string">&quot;cn=vcg-tech,ou=Group,dc=vcg,dc=com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_staff&quot;</span>: <span class="string">&quot;cn=virgo-admin,ou=Group,dc=vcg,dc=com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_superuser&quot;</span>: <span class="string">&quot;cn=virgo-admin,ou=Group,dc=vcg,dc=com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_MIRROR_GROUPS = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_ALWAYS_UPDATE_USER = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_FIND_GROUP_PERMS = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_CACHE_TIMEOUT = <span class="number">3600</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-镜像image</title>
    <url>/Docker-%E9%95%9C%E5%83%8Fimage/</url>
    <content><![CDATA[<p>Docker镜像是启动容器的基石。</p>
<h4 id="什么是Docker镜像"><a href="#什么是Docker镜像" class="headerlink" title="什么是Docker镜像"></a>什么是Docker镜像</h4><hr>
<p>Docker镜像是由文件系统叠加而成。最底端是一个文件引导系统，即bootfs。Docker用户不会与引导文件系统有直接的交互。Docker镜像的第二层是root文件系统rootfs，通常是一种或多种操作系统，例如ubuntu等。在Docker中，文件系统永远都是只读的，在每次修改时，都是进行拷贝叠加从而形成最终的文件系统。Docker称这样的文件为镜像。一个镜像可以迭代在另一个镜像的顶部。位于下方的镜像称之为父镜像，最底层的镜像称之为<strong>基础镜像</strong>。最后，当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器。</p>
<p><img src="/Docker-%E9%95%9C%E5%83%8Fimage/Docker镜像.JPEG" alt="Docker镜像"></p>
<p>Docker的这种机制我们称之为<strong>写时复制</strong>。</p>
<h4 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<p>该命令可以用于查找当前系统中所有存在的镜像列表。</p>
<p>Ps：本地镜像默认保存在Docker宿主机的/var/lib/docker目录下。所有的镜像都是保存在仓库中，而仓库位于Registry中。默认的Registry是Docker公司运营的Docker Hub。每个镜像仓库都可以存放很多的镜像。</p>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p>上述命令会拉取镜像到本地。</p>
<p>为了区分同一个仓库中不同的镜像，Docker提供了一种tag的功能。我们可以给每个版本的镜像添加一个唯一的tag来标识该镜像。此时，镜像的名称如下：仓库名称:tag。我们在运行镜像或拉取镜像时，可以直接指定对应的标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull registry-vpc.cn-beijing.aliyuncs.com&#x2F;vcgcs&#x2F;jdk8:util</span><br></pre></td></tr></table></figure>
<h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><hr>
<p>从Docker Hub查找有哪些公共的可用镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search keywords</span><br></pre></td></tr></table></figure>
<h4 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h4><hr>
<p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t runoob/ubuntu:v1 . </span><br></pre></td></tr></table></figure>
<p>使用URL <strong>github.com/creack/docker-firefox</strong> 的 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure>
<p>也可以通过 -f Dockerfile 文件的位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure>
<h4 id="登录镜像仓库"><a href="#登录镜像仓库" class="headerlink" title="登录镜像仓库"></a>登录镜像仓库</h4><p>使用阿里云容器镜像服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login --username=&quot;ops@vcg.com&quot; --password=&quot;******&quot; registry-vpc.cn-beijing.aliyuncs.com</span><br></pre></td></tr></table></figure>
<h4 id="推送镜像到仓库"><a href="#推送镜像到仓库" class="headerlink" title="推送镜像到仓库"></a>推送镜像到仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com&#x2F;vcgcs&#x2F;jdk8:util</span><br></pre></td></tr></table></figure>
<h4 id="修改镜像Tag"><a href="#修改镜像Tag" class="headerlink" title="修改镜像Tag"></a>修改镜像Tag</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images  # 获取ImageId</span><br><span class="line">docker tag [ImageId] registry.cn-beijing.aliyuncs.com/vcg/500px-vcg-com:[镜像版本号]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器网络抓包案例</title>
    <url>/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>Docker容器网络抓包案例</p>
<p>使用宿主机上的tcpdump工具对容器进程抓包</p>
<h5 id="获取容器PID"><a href="#获取容器PID" class="headerlink" title="获取容器PID"></a>获取容器PID</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取容器ID</span></span><br><span class="line">docker ps |grep xxx </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取PID</span></span><br><span class="line">docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot;  container_id/name</span><br></pre></td></tr></table></figure>
<h5 id="使用nsenter切换网络命令空间"><a href="#使用nsenter切换网络命令空间" class="headerlink" title="使用nsenter切换网络命令空间"></a>使用nsenter切换网络命令空间</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nsenter -n -t container_id&#x2F;name</span><br></pre></td></tr></table></figure>
<h5 id="使用tcpdump抓包"><a href="#使用tcpdump抓包" class="headerlink" title="使用tcpdump抓包"></a>使用tcpdump抓包</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -vvv -s0 -w tcpdump-contract.pcap</span><br><span class="line">tcpdump -vvv -s0 host 10.10.4.63 -w tcpdump-edge2.pcap</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="完整操作记录："><a href="#完整操作记录：" class="headerlink" title="完整操作记录："></a>完整操作记录：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# docker ps |grep contract</span><br><span class="line">55b1fdb7a079        registry-vpc.cn-beijing.aliyuncs.com/vcg/vcg-boss-contract                   &quot;/bin/sh -c &#x27;java ...&quot;   4 days ago          Up 4 days                               k8s_vcg-boss-contract_vcg-boss-contract-55cd566f74-m2m72_default_7bf56757-b9b6-11e9-afe7-00163e0e2421_0</span><br><span class="line">f372c163217f        registry-vpc.cn-beijing.aliyuncs.com/acs/pause-amd64:3.0                     &quot;/pause&quot;                 4 days ago          Up 4 days                               k8s_POD_vcg-boss-contract-55cd566f74-m2m72_default_7bf56757-b9b6-11e9-afe7-00163e0e2421_0</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; 55b1fdb7a079</span><br><span class="line">9421</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# nsenter -n -t 9421</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# tcpdump -vvv -s0 host 10.10.4.138 -w tcpdump-contract.pcap</span><br><span class="line">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">0 packets captured</span><br><span class="line">0 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Elasticsearch服务安全加固</title>
    <url>/Elasticsearch%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<blockquote>
<p>引用自阿里云<a href="https://help.aliyun.com/knowledge_detail/49913.html">https://help.aliyun.com/knowledge_detail/49913.html</a>&gt;</p>
</blockquote>
<p>Elasticsearch 是一个基于 Lucene 的搜索服务，它提供了 RESTful web 接口的分布式、多用户全文搜索引擎 。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是第二大最流行的企业搜索引擎。</p>
<p>Elasticsearch 应用于云计算中，具有实时搜索、稳定、可靠、快速、安装使用方便等优势；但也存在一些安全隐患：默认安装完成后，Elasticsearch 可以使用 9200 端口通告 web 的方式访问查看数据信息。</p>
<h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><p>Elasticsearch 中存在以下高危漏洞。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">CVE</th>
<th style="text-align:left">受影响版本</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">远程命令执行</td>
<td style="text-align:left">CVE-2014-3120</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Elasticsearch 的脚本执行 (scripting) 功能，可以很方便地对查询出来的数据进行再加工处理。但是，其使用的 MVEL 脚本引擎没有做过任何防护（或者沙盒包装），可以直接执行任意代码。</td>
</tr>
<tr>
<td style="text-align:left">远程代码执行</td>
<td style="text-align:left">-</td>
<td style="text-align:left">1.3.0-1.3.7，1.4.0-1.4</td>
<td style="text-align:left">Elasticsearch 使用 Groovy 作为脚本语言，虽然加入了沙盒进行控制，危险的代码会被拦截。但是由于沙盒限制不严格，仅通过黑白名单来判断，导致攻击者可以绕过沙盒，执行远程代码。</td>
</tr>
<tr>
<td style="text-align:left">未授权访问</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Elasticsearch 在安装了 River 机制之后可以同步多种数据库数据（包括关系型的MySQL、MongoDB 等）。如果 <code>http://localhost:9200/cat/indices</code>中 <code>indices</code> 包含了 <code>_river</code>，则代表 Elasticsearch 已安装 River 机制。而通过泄露的 <code>http://localhost:9200/_rvier/_search</code> URL 地址，攻击者可以获取到敏感信息。</td>
</tr>
</tbody>
</table>
<h3 id="漏洞成因与危害"><a href="#漏洞成因与危害" class="headerlink" title="漏洞成因与危害"></a>漏洞成因与危害</h3><p>由于 Elasticsearch 的 HTTP 连接没有提供任何的权限控制措施，一旦部署在公共网络就容易有数据泄露的风险。</p>
<h3 id="安全加固方案"><a href="#安全加固方案" class="headerlink" title="安全加固方案"></a>安全加固方案</h3><h4 id="使用最新的-Elasticsearch-版本"><a href="#使用最新的-Elasticsearch-版本" class="headerlink" title="使用最新的 Elasticsearch 版本"></a>使用最新的 Elasticsearch 版本</h4><p>通过正规渠道（如 <a href="https://www.elastic.co/downloads">Elastic 官网</a>）下载 Elasticsearch 的最新版本。</p>
<ul>
<li>下载完成后，将下载文件的 sha1 值和下载时官网页面提供的 sha1 值进行对比，避免下载过程中被恶意攻击者拦截破坏文件，甚至注入恶意代码。</li>
<li>不要随便安装第三方的插件，插件有可能引入安全漏洞甚至本身自带后门，需谨慎使用。</li>
<li>关注 Elastic 网站，及时更新 Elasticsearch 至最新版本。Elasticsearch 每次版本发布都会优化和改进一部分功能，尤其是安全漏洞的补丁。同时，仔细阅读 Elasticsearch 的版本更新记录。</li>
</ul>
<p><strong>注意</strong>：更新升级前，建议您先进行快照备份，及本地测试。</p>
<h4 id="（推荐）网络访问控制"><a href="#（推荐）网络访问控制" class="headerlink" title="（推荐）网络访问控制"></a>（推荐）网络访问控制</h4><p>Elasticsearch 默认端口是 9200。</p>
<ul>
<li>不要把 Elasticsearch 的 9200 端口服务发布到互联网上。</li>
<li>使用 <a href="https://help.aliyun.com/document_detail/25475.html">阿里云安全组防火墙</a> 或本地操作系统防火墙对访问源 IP 进行隔离控制。</li>
</ul>
<h4 id="绑定访问源-IP"><a href="#绑定访问源-IP" class="headerlink" title="绑定访问源 IP"></a>绑定访问源 IP</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.bind_host: 192.168.0.1</span><br><span class="line"># 设置绑定的 IP 地址，可以是 IPv4 或 IPv6 地址，默认为 0.0.0.0。</span><br><span class="line">network.publish_host: 192.168.0.1</span><br><span class="line"># 设置其它节点和该节点交互的 IP 地址，如果不设置它会自动判断，值必须是个真实的 IP 地址。</span><br><span class="line">network.host: 192.168.0.1</span><br><span class="line"># 同时设置上述两个参数：bind_host 和 publish_host。</span><br></pre></td></tr></table></figure>
<h4 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ransport.tcp.port: 9300</span><br><span class="line"># 设置节点间交互的 TCP 端口，默认是 9300。</span><br><span class="line">transport.tcp.compress: true</span><br><span class="line"># 设置是否压缩 TCP 传输时的数据，默认为 false，即不压缩。</span><br><span class="line">http.port: 9200</span><br><span class="line"># 设置对外服务的 HTTP 端口，默认为 9200。</span><br></pre></td></tr></table></figure>
<h4 id="关闭-HTTP-访问"><a href="#关闭-HTTP-访问" class="headerlink" title="关闭 HTTP 访问"></a>关闭 HTTP 访问</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.enabled: false</span><br><span class="line"># 是否使用 HTTP 协议对外提供服务，默认为 true，即开启。</span><br></pre></td></tr></table></figure>
<h4 id="使用-Shield-安全插件"><a href="#使用-Shield-安全插件" class="headerlink" title="使用 Shield 安全插件"></a>使用 Shield 安全插件</h4><p>Shield 是 Elastic 公司为 Elasticsearch 开发的一个安全插件。在安装此插件后，Shield 会拦截所有对 Elasticsearch 的请求，并进行认证与加密，保障 Elasticsearch 及相关系统的安全性。Shield 是商业插件，需要 Elasticsearch 的商业许可。第一次安装许可的时候，会提供 30 天的免费试用权限。30 天后，Shield 将会屏蔽 clusterhealth, cluster stats, index stats 等 API，其余功能不受影响。</p>
<h5 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h5><p>使用 Shield 可以定义一系列已知的用户，并用其认证用户请求。这些用户存在于抽象的“域”中。一个“域”可以是下面几种类型：</p>
<ul>
<li>LDAP 服务</li>
<li>ActiveDirectory 服务</li>
<li>本地 <code>esusers</code> 配置文件（类似 <code>/etc/passwd</code>)</li>
</ul>
<h5 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h5><p>Shield 的权限控制包含下面几种元素：</p>
<ul>
<li>被保护的资源 <strong>SecuredResource</strong>：权限所应用到的对象，比如某个 index，cluster 等。</li>
<li>特权 <strong>Priviliege</strong>：角色对对象可以执行的一种或多种操作，比如 read，write 等。还可以是 <code>indicies:/data/read/perlocate</code> 等对某种对象特有的操作。</li>
<li>许可 <strong>Permissions</strong>：对被保护的资源拥有的一个或多个特权，如 <code>read on the&quot;products&quot; index</code>。</li>
<li>角色 <strong>Role</strong>：一组许可的集成，具有独立的名称。</li>
<li>用户 <strong>Users</strong>：用户实体，可以被赋予多种角色，他们可以对被保护的资源执行相应角色所拥有的各种特权。</li>
</ul>
<h5 id="安装-Shield"><a href="#安装-Shield" class="headerlink" title="安装 Shield"></a>安装 Shield</h5><p>执行安装步骤前，请确保满足以下安装环境条件：</p>
<ul>
<li>您安装了 Java7 或更新版本。</li>
<li>您将 Elasticsearch 1.5.0+ 解压安装到了本机上。如果您使用 APT 或 YUM 安装，默认的安装目录可能在 <code>/usr/share/elasticsearch</code>。</li>
</ul>
<p>参照以下步骤完成安装：</p>
<ol>
<li><p>进入 Elasticsearch 安装目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Elasticsearch 许可插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;plugin -i elasticsearch&#x2F;license&#x2F;latest</span><br></p