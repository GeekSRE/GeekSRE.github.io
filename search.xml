<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020新版云效-流水线体验</title>
    <url>/2020%E6%96%B0%E7%89%88%E4%BA%91%E6%95%88-%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a></p>
<h4 id="云效介绍"><a href="#云效介绍" class="headerlink" title="云效介绍"></a>云效介绍</h4><p>「云效」，企业级一站式DevOps解决方案，源于阿里巴巴先进的管理理念和工程实践，致力于成为数字企业的研发效能引擎!云效提供从“需求 -&gt;开发-&gt;测试-&gt;发布-&gt;运维-&gt;运营”端到端的协同服务和研发工具，支持公共云、专有云和混合云多种部署形态，通过人工智能、自动化 技术的应用助力开发者提升研发效能，持续快速交付有效价值。</p>
<p><img src="/2020新版云效-流水线体验/./yunxiao.png" alt></p>
<h4 id="新版流水线体验"><a href="#新版流水线体验" class="headerlink" title="新版流水线体验"></a>新版流水线体验</h4><h5 id="登录云效平台"><a href="#登录云效平台" class="headerlink" title="登录云效平台"></a>登录云效平台</h5><p>新地址：<a href="https://devops.aliyun.com/" target="_blank" rel="noopener">https://devops.aliyun.com/</a></p>
<h5 id="切换至流水线模块"><a href="#切换至流水线模块" class="headerlink" title="切换至流水线模块"></a>切换至<strong>流水线</strong>模块</h5><p><img src="/2020新版云效-流水线体验/./yunxiao1.png" alt></p>
<p>可以看到，流水线创建共分四个步骤：</p>
<ol>
<li>选择模版</li>
<li>选择源</li>
<li>配置任务</li>
<li>运行成功</li>
</ol>
<h5 id><a href="#" class="headerlink" title></a><img src="/2020新版云效-流水线体验/./yunxiao2.png" alt></h5><h5 id="选择模版"><a href="#选择模版" class="headerlink" title="选择模版"></a>选择模版</h5><p>本次演示 服务语言类型为Python，构建Docker镜像后发布到镜像仓库</p>
<p><img src="/2020新版云效-流水线体验/./yunxiao3.png" alt></p>
<h5 id="配置代码源"><a href="#配置代码源" class="headerlink" title="配置代码源"></a>配置代码源</h5><p>镜像源选择公司自建Gitlab，配置个人证书，用于拉取代码</p>
<p><img src="/2020新版云效-流水线体验/./yunxiao4.png" alt></p>
<h5 id="配置镜像仓库信息"><a href="#配置镜像仓库信息" class="headerlink" title="配置镜像仓库信息"></a>配置镜像仓库信息</h5><p>需新建服务授权，拿到镜像服务的授权后，配置仓库地址，镜像Tag信息。</p>
<p><img src="/2020新版云效-流水线体验/./yunxiao5.png" alt></p>
<h5 id="运行流水线"><a href="#运行流水线" class="headerlink" title="运行流水线"></a>运行流水线</h5><p><img src="/2020新版云效-流水线体验/./yunxiao6.png" alt></p>
<h5 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h5><p><img src="/2020新版云效-流水线体验/./yunxiao8.png" alt></p>
<p><img src="/2020新版云效-流水线体验/./yunxiao9.png" alt></p>
<p><img src="/2020新版云效-流水线体验/./yunxiao10.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Ansible-快速添加免密码认证</title>
    <url>/Ansible-%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E5%85%8D%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h4 id="生成管理机的私钥和公钥"><a href="#生成管理机的私钥和公钥" class="headerlink" title="生成管理机的私钥和公钥"></a>生成管理机的私钥和公钥</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 -P '' -f /root/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h4 id="添加主机信息到主机清单中"><a href="#添加主机信息到主机清单中" class="headerlink" title="添加主机信息到主机清单中"></a>添加主机信息到主机清单中</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/hosts</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>添加分组</span><br><span class="line">[test-k8s]</span><br><span class="line">172.20.21.249</span><br><span class="line">172.20.21.250</span><br><span class="line">172.20.21.251</span><br><span class="line">172.20.21.252</span><br><span class="line">172.20.21.253</span><br><span class="line">172.20.21.254</span><br><span class="line">172.20.21.255</span><br><span class="line">172.20.22.0</span><br><span class="line">172.20.22.1</span><br><span class="line">172.20.22.2</span><br></pre></td></tr></table></figure>
<h4 id="配置playbook"><a href="#配置playbook" class="headerlink" title="配置playbook"></a>配置playbook</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ansible/ssh-addkey.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: pro-k8s</span><br><span class="line">  gather_facts: no</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line"></span><br><span class="line">  - name: install ssh key</span><br><span class="line">    authorized_key: user=root</span><br><span class="line">                    key="&#123;&#123; lookup('file', '/root/.ssh/id_rsa.pub') &#125;&#125;"</span><br><span class="line">                    state=present</span><br></pre></td></tr></table></figure>
<h4 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook -i /etc/ansible/hosts -k /etc/ansible/ssh-addkey.yml</span><br></pre></td></tr></table></figure>
<p>输入服务器密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SSH password:</span><br><span class="line"></span><br><span class="line">PLAY [pro-k8s] ***************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [install ssh key] *******************************************************************************************************************</span><br><span class="line">changed: [172.21.5.197]</span><br><span class="line">changed: [172.21.5.196]</span><br><span class="line">changed: [172.21.5.199]</span><br><span class="line">changed: [172.21.5.192]</span><br><span class="line">changed: [172.21.5.195]</span><br><span class="line">changed: [172.21.5.193]</span><br><span class="line">changed: [172.21.2.240]</span><br><span class="line">changed: [172.21.5.198]</span><br><span class="line">changed: [172.21.2.238]</span><br><span class="line">changed: [172.21.5.194]</span><br><span class="line">changed: [172.21.2.236]</span><br><span class="line">changed: [172.21.2.235]</span><br><span class="line">changed: [172.21.2.237]</span><br><span class="line">changed: [172.21.2.239]</span><br><span class="line">changed: [172.21.2.234]</span><br><span class="line">changed: [172.21.0.159]</span><br><span class="line">changed: [172.21.0.155]</span><br><span class="line">changed: [172.21.2.241]</span><br><span class="line">changed: [172.21.0.154]</span><br><span class="line">changed: [172.21.0.153]</span><br><span class="line">changed: [172.21.0.158]</span><br><span class="line">changed: [172.21.0.152]</span><br><span class="line">changed: [172.21.0.160]</span><br><span class="line">changed: [172.21.0.156]</span><br><span class="line">changed: [172.21.0.157]</span><br><span class="line">changed: [172.21.2.232]</span><br><span class="line">changed: [172.21.2.233]</span><br><span class="line">changed: [172.21.0.151]</span><br><span class="line">changed: [172.21.5.191]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************</span><br><span class="line">172.21.0.151               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.152               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.153               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.154               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.155               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.156               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.157               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.158               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.159               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.0.160               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.232               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.233               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.234               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.235               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.236               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.237               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.238               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.239               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.240               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.2.241               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.191               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.192               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.193               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.194               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.195               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.196               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.197               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.198               : ok=1    changed=1    unreachable=0    failed=0</span><br><span class="line">172.21.5.199               : ok=1    changed=1    unreachable=0    failed=0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible-批量修改密码</title>
    <url>/Ansible-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>介绍使用ansible批量修改用户密码的方法，因为在使用ansible修改用户密码的时候不能使用明文的方式，需要先加密，所以就需要使用一个方法对输入的明文的密码进行加密，下面就直接上干货。</p>
<h5 id="更改多个固定域名"><a href="#更改多个固定域名" class="headerlink" title="更改多个固定域名"></a>更改多个固定域名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat changePasswd.yaml</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">- hosts:</span> <span class="string">ops</span></span><br><span class="line"><span class="attr">  gather_facts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tasks:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">change</span> <span class="string">user</span> <span class="string">passwd</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">password=&#123;&#123;</span> <span class="string">item.chpass</span> <span class="string">| password_hash('sha512') &#125;&#125;  update_password=always</span></span><br><span class="line"><span class="string"></span><span class="attr">    with_items:</span></span><br><span class="line"><span class="bullet">         -</span> <span class="string">&#123;</span> <span class="attr">name:</span> <span class="string">'root'</span><span class="string">,</span> <span class="attr">chpass:</span> <span class="string">'***********'</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible-playbook changePasswd.yaml</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Archer</title>
    <url>/Archer-SQL%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="ARCHER-—-自动化SQL操作平台"><a href="#ARCHER-—-自动化SQL操作平台" class="headerlink" title="ARCHER — 自动化SQL操作平台"></a>ARCHER — 自动化SQL操作平台</h1><p>基于inception的自动化SQL操作平台，支持SQL执行、LDAP认证、发邮件、OSC、SQL查询、SQL优化建议、权限管理等功能，支持docker镜像。</p>
<p>GitHub项目地址：<a href="https://github.com/jly8866/archer" target="_blank" rel="noopener">https://github.com/jly8866/archer</a></p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li>自动审核<br>发起SQL上线，工单提交，由inception自动审核，审核通过后需要由审核人进行人工审核</li>
<li>人工审核<br>inception自动审核通过的工单，由其他研发工程师或研发经理来审核，DBA操作执行SQL<br>为什么要有人工审核？<br>这是遵循运维领域线上操作的流程意识，一个工程师要进行线上数据库SQL更新，最好由另外一个工程师来把关<br>很多时候DBA并不知道SQL的业务含义，所以人工审核最好由其他研发工程师或研发经理来审核. 这是archer的设计理念</li>
<li>回滚数据展示<br>工单内可展示回滚语句，支持一键提交回滚工单</li>
<li>定时执行SQL<br>审核通过的工单可由DBA选择定时执行，执行前可修改执行时间，可随时终止</li>
<li>pt-osc执行<br>支持pt-osc执行进度展示，并且可以点击中止pt-osc进程</li>
<li>MySQL查询<br>库、表、关键字自动补全<br>查询结果集限制、查询结果导出、表结构展示、多结果集展示</li>
<li>MySQL查询权限管理<br>基于inception解析查询语句，查询权限支持限制到表级<br>查询权限申请、审核和管理，支持审核流程配置，多级审核</li>
<li>MySQL查询动态脱敏<br>基于inception解析查询语句，配合脱敏字段配置、脱敏规则(正则表达式)实现敏感数据动态脱敏</li>
<li>慢日志管理<br>基于percona-toolkit的pt_query_digest分析和存储慢日志，并在web端展现</li>
<li>邮件通知<br>可配置邮件提醒，对上线申请、权限申请、审核结果等进行通知<br>对异常登录进行通知</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装docker-、git"><a href="#安装docker-、git" class="headerlink" title="安装docker 、git"></a>安装docker 、git</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y docker git</span><br></pre></td></tr></table></figure>
<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull hhyo/inception</span><br><span class="line">docker pull hhyo/archer</span><br><span class="line">docker pull mysql:5.6.35</span><br></pre></td></tr></table></figure>
<h4 id="创建archer配置文件"><a href="#创建archer配置文件" class="headerlink" title="创建archer配置文件"></a>创建archer配置文件</h4><p>服务目录定为 /vcg/archer/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /vcg/archer/</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /vcg/archer/inc.cnf</span><br><span class="line"></span><br><span class="line">[inception]</span><br><span class="line">general_log=1</span><br><span class="line">general_log_file=inception.log</span><br><span class="line">port=6669</span><br><span class="line">socket=/tmp/inc.socket</span><br><span class="line">character-set-client-handshake=0</span><br><span class="line">character-set-server=utf8</span><br><span class="line">inception_remote_system_password=root</span><br><span class="line">inception_remote_system_user=wzf1</span><br><span class="line">inception_remote_backup_port=3306</span><br><span class="line">inception_remote_backup_host=127.0.0.1</span><br><span class="line">inception_support_charset=utf8,utf8mb4</span><br><span class="line">inception_enable_nullable=0</span><br><span class="line">inception_check_primary_key=1</span><br><span class="line">inception_check_column_comment=1</span><br><span class="line">inception_check_table_comment=1</span><br><span class="line">inception_osc_on=OFF</span><br><span class="line">inception_osc_bin_dir=/usr/bin</span><br><span class="line">inception_osc_min_table_size=1</span><br><span class="line">inception_osc_chunk_time=0.1</span><br><span class="line">inception_enable_blob_type=1</span><br><span class="line">inception_check_column_default_value=1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/jly8866/archer/blob/master/archer/settings.py</span><br><span class="line">修改其中的数据库地址、用户名、密码</span><br></pre></td></tr></table></figure>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name inception -v /vcg/archer/inc.cnf:/etc/inc.cnf -p 6669:6669 -dti hhyo/inception</span><br><span class="line"></span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.35</span><br><span class="line"></span><br><span class="line">docker run --name archer -v /vcg/archer/settings.py:/opt/archer/archer/settings.py  -e NGINX_PORT=9123 -p 9123:9123 -dti hhyo/archer</span><br></pre></td></tr></table></figure>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS archer_github DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -ti archer /bin/bash</span><br><span class="line">  cd /opt/archer</span><br><span class="line">  source /opt/venv4archer/bin/activate</span><br><span class="line">  # 初始化数据库</span><br><span class="line">  python3 manage.py makemigrations sql</span><br><span class="line">  python3 manage.py migrate</span><br><span class="line">  # 创建管理员账号</span><br><span class="line">  python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>地址： <a href="http://xxxx::9123/" target="_blank" rel="noopener">http://xxxx::9123/</a></p>
]]></content>
      <categories>
        <category>Archer</category>
      </categories>
      <tags>
        <tag>Archer</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装MariaDB</title>
    <url>/CentOS7%E5%AE%89%E8%A3%85MariaDB/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>CentOS7安装MariaDB</p>
<p><a href="https://mariadb.com/kb/en/library/yum/" target="_blank" rel="noopener">https://mariadb.com/kb/en/library/yum/</a></p>
<h5 id="配置YUM源"><a href="#配置YUM源" class="headerlink" title="配置YUM源"></a>配置YUM源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/MariaDB.repo</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&apos;ll need the current</span><br><span class="line">password for the root user.  If you&apos;ve just installed MariaDB, and</span><br><span class="line">you haven&apos;t set the root password yet, the password will be blank,</span><br><span class="line">so you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password ensures that nobody can log into the MariaDB</span><br><span class="line">root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from &apos;localhost&apos;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line"> ... skipping.</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &apos;test&apos; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] y</span><br><span class="line"> - Dropping test database...</span><br><span class="line"> ... Success!</span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] y</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&apos;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br></pre></td></tr></table></figure>
<h6 id="配置远程登录"><a href="#配置远程登录" class="headerlink" title="配置远程登录"></a>配置远程登录</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录数据库</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'virgo'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>CentOS配置yum源</title>
    <url>/CentOS%E9%85%8D%E7%BD%AEyum%E6%BA%90/</url>
    <content><![CDATA[<p>推荐使用<a href="https://opsx.alibaba.com/?lang=zh-CN" target="_blank" rel="noopener">阿里源</a></p>
<h5 id="基础源"><a href="#基础源" class="headerlink" title="基础源"></a>基础源</h5><h6 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> CentOS 6</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> CentOS 7</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<h6 id="生成缓存"><a href="#生成缓存" class="headerlink" title="生成缓存"></a>生成缓存</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h5 id="EPEL源"><a href="#EPEL源" class="headerlink" title="EPEL源"></a>EPEL源</h5><h6 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</span><br><span class="line">mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</span><br></pre></td></tr></table></figure>
<h6 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> epel(RHEL 7)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> epel(RHEL 6)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> epel(RHEL 5)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-5.repo</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence安装-维护-迁移实践</title>
    <url>/Confluence%E5%AE%89%E8%A3%85-%E7%BB%B4%E6%8A%A4-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><strong>Confluence</strong>介绍</p>
<p><strong>Confluence</strong>是由澳大利亚软件公司<a href="https://en.wikipedia.org/wiki/Atlassian" target="_blank" rel="noopener">Atlassian</a>开发和发布的<a href="https://en.wikipedia.org/wiki/Collaboration_software" target="_blank" rel="noopener">协作软件</a>程序</p>
<p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。</p>
<p>Confluence为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><hr>
<blockquote>
<p><a href="https://confluence.atlassian.com/conf612/installing-confluence-on-linux-from-archive-file-958778538.html" target="_blank" rel="noopener">https://confluence.atlassian.com/conf612/installing-confluence-on-linux-from-archive-file-958778538.html</a></p>
</blockquote>
<h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>Download the <code>tar.gz</code> file for your operating system - <a href="https://www.atlassian.com/software/confluence/download?_ga=2.242479878.561576652.1556502870-546260764.1556502870" target="_blank" rel="noopener">https://www.atlassian.com/software/confluence/download</a>. </p>
<p>本次演示我下载的文件包为：atlassian-confluence-6.12.0.zip</p>
<h5 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br><span class="line">java -version   # 验证</span><br></pre></td></tr></table></figure>
<h5 id="创建Confluence用户"><a href="#创建Confluence用户" class="headerlink" title="创建Confluence用户"></a>创建Confluence用户</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -create-home --comment "Account for running Confluence" --shell /bin/bash confluence</span><br></pre></td></tr></table></figure>
<h5 id="解压安装包、创建配置、配置权限"><a href="#解压安装包、创建配置、配置权限" class="headerlink" title="解压安装包、创建配置、配置权限"></a>解压安装包、创建配置、配置权限</h5><p>目录规划：</p>
<p>​        安装目录：/data/vcg/confluence</p>
<p>​        数据目录：/data/vcg/confluence-home</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /root/atlassian-confluence-6.12.0.zip /data/vcg/</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install unzip -y</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /data/vcg/</span><br><span class="line">unzip atlassian-confluence-6.12.0.zip</span><br><span class="line">mv atlassian-confluence-6.12.0 confluence</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/vcg/confluence-home</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R confluence /data/vcg/confluence/</span><br><span class="line">chmod -R u=rwx,go-rwx /data/vcg/confluence/</span><br><span class="line">chown -R confluence /data/vcg/confluence-home/</span><br><span class="line">chmod -R u=rwx,go-rwx /data/vcg/confluence-home/</span><br></pre></td></tr></table></figure>
<h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p>vcg这边使用的阿里云RDS数据库，未手动安装MySQL</p>
<p>数据库使用MySQL，需安装驱动软件。<br>获取mysql-connector-java的安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.45-bin.jar /data/vcg/confluence/confluence/WEB-INF/lib/</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "confluence.home=/data/vcg/confluence-home/" &gt; confluence/confluence/WEB-INF/classes/confluence-init.properties</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问ip:8090 继续配置Confluence</span><br></pre></td></tr></table></figure>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><h5 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h5><p>登录老Confluence界面，进入”站点管理”—“备份已还原”，点击”备份”，如图</p>
<p>数据备份路径为：/data/vcg/confluence-home/backups/</p>
<p><img src="/Confluence安装-维护-迁移实践/confluence1.png" alt="image-20190429104530362"></p>
<h5 id="拷贝备份数据包到新服务器"><a href="#拷贝备份数据包到新服务器" class="headerlink" title="拷贝备份数据包到新服务器"></a>拷贝备份数据包到新服务器</h5><p>备份必须复制至<code>/data/vcg/confluence-home/restore</code>目录中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /data/vcg/confluence-home/backups/xmlexport-20190225-205713-119.zip  root@'xxxx':/data/vcg/confluence-home/restore/</span><br></pre></td></tr></table></figure>
<h5 id="部署新的Confluence"><a href="#部署新的Confluence" class="headerlink" title="部署新的Confluence"></a>部署新的Confluence</h5><h5 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h5><p>登录新的Confluence的”站点管理”—“备份已还原”。</p>
<p><img src="/Confluence安装-维护-迁移实践/confluence2.png" alt="2"></p>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><h5 id="备份数据定期删除"><a href="#备份数据定期删除" class="headerlink" title="备份数据定期删除"></a>备份数据定期删除</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0 15 * * * find /data/vcg/confluence-home/backups/* -type f -mtime +5 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h5 id="漏洞补丁-被植入挖矿程序"><a href="#漏洞补丁-被植入挖矿程序" class="headerlink" title="漏洞补丁(被植入挖矿程序)"></a>漏洞补丁(被植入挖矿程序)</h5><blockquote>
<p><a href="https://help.aliyun.com/noticelist/articleid/1000128459.html?spm=a2c4g.789213612.n2.10.2a716141mqqJjY" target="_blank" rel="noopener">https://help.aliyun.com/noticelist/articleid/1000128459.html?spm=a2c4g.789213612.n2.10.2a716141mqqJjY</a></p>
</blockquote>
<p>解决办法：<br>升级Widget Connector 组件</p>
<h4 id="培训文档"><a href="#培训文档" class="headerlink" title="培训文档"></a>培训文档</h4>

	<div class="row">
    <embed src="Confluence基础培训_中文版.pdf" width="100%" height="550" type="application/pdf">
	</div>





	<div class="row">
    <embed src="Confluence高级培训_中文版.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence数据库SSL警告</title>
    <url>/Confluence%E6%95%B0%E6%8D%AE%E5%BA%93SSL%E8%AD%A6%E5%91%8A/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a></p>
<h3 id="现象："><a href="#现象：" class="headerlink" title="现象："></a>现象：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f logs/catalina.out</span><br></pre></td></tr></table></figure>
<p><img src="/Confluence数据库SSL警告/image-20191126092908807.png" alt="image-20191126092908807"><br>可以看到有很多报警信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tue Nov 26 09:13:39 CST 2019 WARN: Establishing SSL connection without server&apos;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&apos;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &apos;false&apos;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">警告:在没有SSL连接的情况下建立SSL连接不建议使用服务器的身份验证。根据MySQL5.5.45+、5.6.26+和5.7.6+要求必须建立SSL连接默认情况下，如果没有设置显式选项不使用SSL的应用程序将verifyServerCertificate属性设置为“false”。您需要通过设置useSSL=false显式禁用SSL，或设置useSSL=true，并为服务器证书提供信任存储验证</span><br></pre></td></tr></table></figure>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 1、进入confluence的data-home目录；</span><br><span class="line">cd /data/vcg/confluence-home</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、备份配置文件</span><br><span class="line">cp confluence.cfg.xml confluence.cfg.xml-bak191126</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、修改内容</span><br><span class="line"></span><br><span class="line">vim confluence.cfg.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 数据库连接后增加 ?useSSL=false</span><br><span class="line"><span class="meta">#</span> 如下：</span><br><span class="line">    &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://rm-2zey0d751uapi749y35890.mysql.rds.aliyuncs.com:3306/confluence?useSSL=false&lt;/property&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span> 4、重启confluence</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie &amp; Session</title>
    <url>/Cookie-Session/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.cnblogs.com/liwenzhou/p/8343243.html" target="_blank" rel="noopener">https://www.cnblogs.com/liwenzhou/p/8343243.html</a></p>
</blockquote>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h4 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h4><p>保存在浏览器端的键值对</p>
<h4 id="为什么要有Cookie"><a href="#为什么要有Cookie" class="headerlink" title="为什么要有Cookie"></a>为什么要有Cookie</h4><p>因为HTTP请求是无状态的</p>
<h4 id="Cookie的原理"><a href="#Cookie的原理" class="headerlink" title="Cookie的原理"></a>Cookie的原理</h4><p>服务端可以在返回响应的时候 做手脚<br>在浏览器上写入键值对，就是Cookie，浏览器发送请求的时候会自动携带该网站保存在浏览器中的键值对</p>
<h4 id="Cookie的使用场景"><a href="#Cookie的使用场景" class="headerlink" title="Cookie的使用场景"></a>Cookie的使用场景</h4><ol>
<li>保存登录信息</li>
<li>保存用户的搜索关键词</li>
</ol>
<h4 id="Django中操作Cookie"><a href="#Django中操作Cookie" class="headerlink" title="Django中操作Cookie"></a>Django中操作Cookie</h4><h5 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.COOKIES[<span class="string">'key'</span>]</span><br><span class="line">request.get_signed_cookie(key, default=RAISE_ERROR, salt=<span class="string">''</span>, max_age=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">    default: 默认值</span><br><span class="line">    salt: 加密盐</span><br><span class="line">    max_age: 后台控制过期时间</span><br></pre></td></tr></table></figure>
<h5 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rep = HttpResponse(...)</span><br><span class="line">rep ＝ render(request, ...)</span><br><span class="line"></span><br><span class="line">rep.set_cookie(key,value,...)</span><br><span class="line">rep.set_signed_cookie(key,value,salt=<span class="string">'加密盐'</span>, max_age=<span class="literal">None</span>, ...)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">     key, 键</span><br><span class="line">     value=<span class="string">''</span>, 值</span><br><span class="line">     max_age=<span class="literal">None</span>, 超时时间</span><br><span class="line">     expires=<span class="literal">None</span>, 超时时间(IE requires expires, so set it <span class="keyword">if</span> hasn<span class="string">'t been already.)</span></span><br><span class="line"><span class="string">     path='</span>/<span class="string">', Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问</span></span><br><span class="line"><span class="string">     domain=None, Cookie生效的域名</span></span><br><span class="line"><span class="string">     secure=False, https传输</span></span><br><span class="line"><span class="string">     httponly=False 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure>
<h5 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    rep = redirect(<span class="string">"/login/"</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">"user"</span>)  <span class="comment"># 删除用户浏览器上之前设置的usercookie值</span></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure>
<h5 id="完整views-py示例："><a href="#完整views-py示例：" class="headerlink" title="完整views.py示例："></a>完整views.py示例：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse,HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(request,*args,**kwargs)</span>:</span></span><br><span class="line">        Cookies = request.COOKIES.get(<span class="string">"is_login"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'yes'</span> != Cookies:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/test01/login'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'index界面'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'test01/login.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    rep = redirect(<span class="string">'/test01/login'</span>)</span><br><span class="line">    rep.delete_cookie(<span class="string">'is_login'</span>)</span><br><span class="line">    <span class="keyword">return</span> rep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_username</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>,<span class="literal">None</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'z'</span> <span class="keyword">and</span> password == <span class="string">'z'</span>:</span><br><span class="line">            rep = render(request,<span class="string">'test01/home.html'</span>,&#123;<span class="string">'username'</span>:username&#125;)</span><br><span class="line">            <span class="comment">#rep.set_cookie('is_login','yes')</span></span><br><span class="line">            rep.set_signed_cookie(<span class="string">'is_login'</span>, <span class="string">'yes'</span>, expires=<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rep = redirect(<span class="string">'/test01/login'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rep =  redirect(<span class="string">'/test01/login'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rep</span><br></pre></td></tr></table></figure>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Cookie虽然在一定程度上解决了“保持状态”的需求，但是由于Cookie本身最大支持4096字节，以及Cookie本身保存在客户端，可能被拦截或窃取，因此就需要有一种新的东西，它能支持更多的字节，并且他保存在服务器，有较高的安全性。这就是Session。</p>
<p>问题来了，基于HTTP协议的无状态特征，服务器根本就不知道访问者是“谁”。那么上述的Cookie就起到桥接的作用。</p>
<p>我们可以给每个客户端的Cookie分配一个唯一的id，这样用户在访问时，通过Cookie，服务器就知道来的人是“谁”。然后我们再根据不同的Cookie的id，在服务器上保存一段时间的私密资料，如“账号密码”等等。</p>
<p>总结而言：Cookie弥补了HTTP无状态的不足，让服务器知道来的人是“谁”；但是Cookie以文本的形式保存在本地，自身安全性较差；所以我们就通过Cookie识别不同的用户，对应的在Session里保存私密的信息以及超过4096字节的文本。<br>另外，上述所说的Cookie和Session其实是共通性的东西，不限于语言和框架。</p>
<h4 id="Django中操作Session"><a href="#Django中操作Session" class="headerlink" title="Django中操作Session"></a>Django中操作Session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取、设置、删除Session中数据</span></span><br><span class="line">request.session[<span class="string">'k1'</span>]</span><br><span class="line">request.session.get(<span class="string">'k1'</span>,<span class="literal">None</span>)</span><br><span class="line">request.session[<span class="string">'k1'</span>] = <span class="number">123</span></span><br><span class="line">request.session.setdefault(<span class="string">'k1'</span>,<span class="number">123</span>) <span class="comment"># 存在则不设置</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">'k1'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有 键、值、键值对</span></span><br><span class="line">request.session.keys()</span><br><span class="line">request.session.values()</span><br><span class="line">request.session.items()</span><br><span class="line">request.session.iterkeys()</span><br><span class="line">request.session.itervalues()</span><br><span class="line">request.session.iteritems()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话session的key</span></span><br><span class="line">request.session.session_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有Session失效日期小于当前日期的数据删除</span></span><br><span class="line">request.session.clear_expired()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查会话session的key在数据库中是否存在</span></span><br><span class="line">request.session.exists(<span class="string">"session_key"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前会话的所有Session数据</span></span><br><span class="line">request.session.delete()</span><br><span class="line">　　</span><br><span class="line"><span class="comment"># 删除当前的会话数据并删除会话的Cookie。</span></span><br><span class="line">request.session.flush() </span><br><span class="line">    这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br><span class="line">    例如，django.contrib.auth.logout() 函数中就会调用它。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置会话Session和Cookie的超时时间</span></span><br><span class="line">request.session.set_expiry(value)</span><br><span class="line">    * 如果value是个整数，session会在些秒数后失效。</span><br><span class="line">    * 如果value是个datatime或timedelta，session就会在这个时间后失效。</span><br><span class="line">    * 如果value是<span class="number">0</span>,用户关闭浏览器session就会失效。</span><br><span class="line">    * 如果value是<span class="literal">None</span>,session会依赖全局session失效策略。</span><br></pre></td></tr></table></figure>
<h4 id="Seesion版验证登录"><a href="#Seesion版验证登录" class="headerlink" title="Seesion版验证登录"></a>Seesion版验证登录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">        next_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">"user"</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">"/login/?next=&#123;&#125;"</span>.format(next_url))</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">"user"</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">"pwd"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">"alex"</span> <span class="keyword">and</span> pwd == <span class="string">"alex1234"</span>:</span><br><span class="line">            <span class="comment"># 设置session</span></span><br><span class="line">            request.session[<span class="string">"user"</span>] = user</span><br><span class="line">            <span class="comment"># 获取跳到登陆页面之前的URL</span></span><br><span class="line">            next_url = request.GET.get(<span class="string">"next"</span>)</span><br><span class="line">            <span class="comment"># 如果有，就跳转回登陆之前的URL</span></span><br><span class="line">            <span class="keyword">if</span> next_url:</span><br><span class="line">                <span class="keyword">return</span> redirect(next_url)</span><br><span class="line">            <span class="comment"># 否则默认跳转到index页面</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">"/index/"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 删除所有当前请求相关的session</span></span><br><span class="line">    request.session.delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"/login/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@check_login</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    current_user = request.session.get(<span class="string">"user"</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>, &#123;<span class="string">"user"</span>: current_user&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Django中的Session配置"><a href="#Django中的Session配置" class="headerlink" title="Django中的Session配置"></a>Django中的Session配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数据库Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span>   <span class="comment"># 引擎（默认）</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 缓存Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cache'</span>  <span class="comment"># 引擎</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span>                            <span class="comment"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 文件Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.file'</span>    <span class="comment"># 引擎</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span>                                    <span class="comment"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 缓存+数据库</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cached_db'</span>        <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span>   <span class="comment"># 引擎</span></span><br><span class="line"></span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ <span class="string">"sessionid"</span>                       <span class="comment"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span></span><br><span class="line">SESSION_COOKIE_PATH ＝ <span class="string">"/"</span>                               <span class="comment"># Session的cookie保存的路径（默认）</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span>                             <span class="comment"># Session的cookie保存的域名（默认）</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span>                            <span class="comment"># 是否Https传输cookie（默认）</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span>                           <span class="comment"># 是否Session的cookie只支持http传输（默认）</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>                             <span class="comment"># Session的cookie失效日期（2周）（默认）</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span>                  <span class="comment"># 是否关闭浏览器使得Session过期（默认）</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span>                       <span class="comment"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-Celery异步任务调度工具</title>
    <url>/Django-Celery%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>Django中使用Celery实现异步或定时任务</p>
<p><strong>Celery 官网：<a href="http://www.celeryproject.org/" target="_blank" rel="noopener">http://www.celeryproject.org/</a></strong></p>
<p><strong>Celery 官方文档英文版</strong>：<a href="http://docs.celeryproject.org/en/latest/index.html" target="_blank" rel="noopener"><strong>http://docs.celeryproject.org/en/latest/index.html</strong></a></p>
<p><strong>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/" target="_blank" rel="noopener">http://docs.jinkan.org/docs/celery/</a></strong></p>
<h3 id="Celery简介"><a href="#Celery简介" class="headerlink" title="Celery简介"></a>Celery简介</h3><p>Celery是一个异步任务的调度工具。</p>
<p>Celery 是 Distributed Task Queue，分布式任务队列，分布式决定了可以有多个 worker 的存在，队列表示其是异步操作，即存在一个产生任务提出需求的工头，和一群等着被分配工作的码农。</p>
<p>在 Python 中定义 Celery 的时候，我们要引入 Broker，中文翻译过来就是“中间人”的意思，在这里 Broker 起到一个中间人的角色。在工头提出任务的时候，把所有的任务放到 Broker 里面，在 Broker 的另外一头，一群码农等着取出一个个任务准备着手做。</p>
<p>这种模式注定了整个系统会是个开环系统，工头对于码农们把任务做的怎样是不知情的。所以我们要引入 Backend 来保存每次任务的结果。这个 Backend 有点像我们的 Broker，也是存储任务的信息用的，只不过这里存的是那些任务的返回结果。我们可以选择只让错误执行的任务返回结果到 Backend，这样我们取回结果，便可以知道有多少任务执行失败了。</p>
<p>Celery(芹菜)是一个异步任务队列/基于分布式消息传递的作业队列。它侧重于实时操作，但对调度支持也很好。Celery用于生产系统每天处理数以百万计的任务。Celery是用Python编写的，但该协议可以在任何语言实现。它也可以与其他语言通过webhooks实现。Celery建议的消息队列是RabbitMQ，但提供有限支持Redis, Beanstalk, MongoDB, CouchDB, 和数据库（使用SQLAlchemy的或Django的 ORM） 。Celery是易于集成Django, Pylons and Flask，使用 django-celery, celery-pylons and Flask-Celery 附加包即可。</p>
<h3 id="架构组成"><a href="#架构组成" class="headerlink" title="架构组成"></a>架构组成</h3><p><img src="/Django-Celery异步任务调度工具/./celery00.png" alt="celery00"></p>
<p>Celery的架构由三部分组成，<strong><em>消息中间件</em></strong>（message broker），<strong><em>任务执行单元\</em></strong>（worker）和<strong><em>任务执行结果存储</em></strong>（task result store）组成。</p>
<p><img src="/Django-Celery异步任务调度工具/./celery01.png" alt="celery01"></p>
<p>可以看到，Celery 主要包含以下几个模块：</p>
<ul>
<li><p>任务模块 Task</p>
<p>包含异步任务和定时任务。其中，<strong>异步任务通常在业务逻辑中被触发并发往任务队列，而定时任务由 Celery Beat 进程周期性地将任务发往任务队列</strong>。</p>
</li>
<li><p>消息中间件 Broker</p>
<p>Broker，即为任务调度队列，<strong>接收任务生产者发来的消息（即任务），将任务存入队列</strong>。Celery 本身不提供队列服务，官方推荐使用 RabbitMQ 和 <a href="http://lib.csdn.net/base/redis" target="_blank" rel="noopener">Redis</a> 等。</p>
</li>
<li><p>任务执行单元 Worker</p>
<p>Worker 是执行任务的处理单元，<strong>它实时监控消息队列，获取队列中调度的任务，并执行它</strong>。</p>
</li>
<li><p>任务结果存储 Backend</p>
<p>Backend 用于<strong>存储任务的执行结果</strong>，以供查询。同消息中间件一样，存储也可使用 RabbitMQ, <a href="http://lib.csdn.net/base/redis" target="_blank" rel="noopener">redis</a> 和 <a href="http://lib.csdn.net/base/mongodb" target="_blank" rel="noopener">MongoDB</a> 等。</p>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install django-celery-beta  #任务发送</span><br><span class="line">pip install django-celery-results  #结果存储</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>确保目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- proj/</span><br><span class="line">  - manage.py</span><br><span class="line">  - proj/</span><br><span class="line">    - __init__.py</span><br><span class="line">    - settings.py</span><br><span class="line">    - urls.py</span><br></pre></td></tr></table></figure>
<p>新建<strong>proj/proj/celery.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab, timedelta</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'proj.settings'</span>)</span><br><span class="line">app = Celery(<span class="string">'proj'</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks() <span class="comment"># 自动发现任务文件每个app下的task.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure>
<p>编辑<strong>proj/proj/<strong>init</strong>.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'celery_app'</span>,)</span><br></pre></td></tr></table></figure>
<p>编辑<strong>proj/proj/settings.py</strong>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">'django_celery_beat'</span>,</span><br><span class="line">    <span class="string">'django_celery_results'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Celery</span></span><br><span class="line">CELERY_URL = <span class="string">'redis://:'</span> + configs[<span class="string">'redis'</span>][<span class="string">'RedisPassword'</span>] + <span class="string">'@'</span> + configs[<span class="string">'redis'</span>][<span class="string">'RedisHost'</span>] + <span class="string">':'</span> + str(</span><br><span class="line">    configs[<span class="string">'redis'</span>][<span class="string">'RedisPort'</span>]) + <span class="string">'/'</span> + str(configs[<span class="string">'redis'</span>][<span class="string">'RedisDb'</span>])</span><br><span class="line"><span class="comment"># CELERY_URL = "redis://:&#123; 密码 &#125;@&#123; redis地址 &#125;:6379/4"</span></span><br><span class="line">BROKER_URL = CELERY_URL</span><br><span class="line">CELERY_BROKER_URL = CELERY_URL</span><br><span class="line"><span class="comment"># CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'</span></span><br><span class="line"><span class="comment"># CELERY_RESULT_BACKEND = CELERY_URL</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-db'</span>  <span class="comment"># 使用django orm 作为结果存储</span></span><br><span class="line"></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'application/json'</span>]</span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">CELERY_ENABLE_UTC = <span class="literal">True</span></span><br><span class="line">CELERYD_CONCURRENCY = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4 id="同步数据库"><a href="#同步数据库" class="headerlink" title="同步数据库"></a>同步数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 1. 创建更改的文件</span><br><span class="line">python manage.py makemigrations</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 2. 将生成的py文件应用到数据库</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h4 id="创建超级管理员"><a href="#创建超级管理员" class="headerlink" title="创建超级管理员"></a>创建超级管理员</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 修改 用户密码可以用：</span><br><span class="line">python manage.py changepassword username</span><br></pre></td></tr></table></figure>
<h4 id="增加定时任务"><a href="#增加定时任务" class="headerlink" title="增加定时任务"></a>增加定时任务</h4><p>编辑<strong>proj/proj/celery.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.conf.update(</span><br><span class="line">    CELERYBEAT_SCHEDULE=&#123;</span><br><span class="line">        <span class="string">'task_update_ali_ecs'</span>: &#123;</span><br><span class="line">            <span class="string">'task'</span>: <span class="string">'assets.tasks.task_update_ali_ecs'</span>,</span><br><span class="line">            <span class="string">'schedule'</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'task_update_ali_rds'</span>: &#123;</span><br><span class="line">            <span class="string">'task'</span>: <span class="string">'assets.tasks.task_update_ali_rds'</span>,</span><br><span class="line">            <span class="string">'schedule'</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'task_update_ali_slb'</span>: &#123;</span><br><span class="line">            <span class="string">'task'</span>: <span class="string">'assets.tasks.task_update_ali_slb'</span>,</span><br><span class="line">            <span class="string">'schedule'</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'task_update_tx_cns'</span>: &#123;</span><br><span class="line">            <span class="string">'task'</span>: <span class="string">'assets.tasks.task_update_tx_cns'</span>,</span><br><span class="line">            <span class="string">'schedule'</span>: timedelta(minutes=<span class="number">60</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'add-every-monday-morning'</span>: &#123;</span><br><span class="line">            <span class="string">'task'</span>: <span class="string">'tasks.add'</span>,</span><br><span class="line">            <span class="string">'schedule'</span>: crontab(hour=<span class="number">7</span>, minute=<span class="number">30</span>, day_of_week=<span class="number">1</span>),</span><br><span class="line">            <span class="string">'args'</span>: (<span class="number">16</span>, <span class="number">16</span>),</span><br><span class="line">    		&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#crontab-schedules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># schedule 可以填写timedelta表示循环时间，隔多久执行一次</span></span><br><span class="line"><span class="comment">#          也可以填写 crontab  表示某个时间去执行，例如示例中，表示 Executes every Monday morning at 7:30 a.m.</span></span><br></pre></td></tr></table></figure>
<h4 id="新增任务的代码"><a href="#新增任务的代码" class="headerlink" title="新增任务的代码"></a>新增任务的代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django_celery_beat.models import PeriodicTask, ClockedSchedule</span><br><span class="line"></span><br><span class="line">#比如创建一个发版任务</span><br><span class="line"># 1.新创建时间clockschedule</span><br><span class="line">clock, create = ClockedSchedule.objects.get_or_create(clocked_time=db_deploy_time)</span><br><span class="line"></span><br><span class="line"># 2.创建任务</span><br><span class="line">PeriodicTask.objects.create(</span><br><span class="line">                                clocked=clock,</span><br><span class="line">                                name=&apos;vrigo-deploy_&apos; + db_data[&apos;service_list&apos;] + &apos;-&apos; + str(db_deploy_time),</span><br><span class="line">                                task=&apos;services.tasks.task_build_job&apos;,</span><br><span class="line">                                args=json.dumps([services, int(id)]),</span><br><span class="line">                                start_time=datetime.datetime.now(),</span><br><span class="line">                                one_off=True,</span><br><span class="line">                            )</span><br></pre></td></tr></table></figure>
<p><strong>services/tasks.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> services.api.jenkins <span class="keyword">import</span> JenkinsApi</span><br><span class="line"><span class="keyword">from</span> services.views <span class="keyword">import</span> task_result_to_db</span><br><span class="line"><span class="keyword">from</span> users.api.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_build_job</span><span class="params">(service,id)</span>:</span></span><br><span class="line">    obj = JenkinsApi()</span><br><span class="line">    data = obj.build_job(service)   <span class="comment">#触发jenkins job</span></span><br><span class="line">    <span class="comment"># id = kwargs.get("id", 10)</span></span><br><span class="line">    to_db = task_result_to_db(id, data)  <span class="comment">#将结果存入db中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">celery -A proj beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span><br><span class="line"></span><br><span class="line">celery worker -A virgo -l info</span><br><span class="line"></span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<p><img src="/Django-Celery异步任务调度工具/./celery02.png" alt></p>
<h3 id="flower"><a href="#flower" class="headerlink" title="flower"></a>flower</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery flower -A virgo -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler</span><br></pre></td></tr></table></figure>
<p><img src="/Django-Celery异步任务调度工具/./celery03.png" alt></p>
<p><img src="/Django-Celery异步任务调度工具/./celery04.png" alt></p>
<p><img src="/Django-Celery异步任务调度工具/./celery05.png" alt></p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-LDAP统一认证</title>
    <url>/Django-LDAP%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<ul>
<li><p>LDAP统一认证</p>
<a id="more"></a>
</li>
<li><p>Documentation: <a href="https://django-auth-ldap.readthedocs.io/" target="_blank" rel="noopener">https://django-auth-ldap.readthedocs.io/</a></p>
</li>
<li>PyPI: <a href="https://pypi.org/project/django-auth-ldap/" target="_blank" rel="noopener">https://pypi.org/project/django-auth-ldap/</a></li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django-auth-ldap</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><strong>setting.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Django-auth-ldap 配置部分</span></span><br><span class="line"><span class="keyword">import</span> ldap</span><br><span class="line"><span class="keyword">from</span> django_auth_ldap.config <span class="keyword">import</span> LDAPSearch, GroupOfNamesType, PosixGroupType</span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">'django_auth_ldap.backend.LDAPBackend'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_SERVER_URI = configs[<span class="string">'ldap'</span>][<span class="string">'ldhost'</span>]</span><br><span class="line">AUTH_LDAP_BIND_DN = <span class="string">"cn=root,dc=vcg,dc=com"</span></span><br><span class="line">AUTH_LDAP_BIND_PASSWORD = <span class="string">'*****'</span></span><br><span class="line"></span><br><span class="line">AUTH_LDAP_USER_DN_TEMPLATE = <span class="string">"cn=%(user)s,ou=People,dc=vcg,dc=com"</span></span><br><span class="line"></span><br><span class="line">AUTH_LDAP_USER_ATTR_MAP = &#123;</span><br><span class="line">    <span class="string">"first_name"</span>: <span class="string">"givenName"</span>,</span><br><span class="line">    <span class="string">"last_name"</span>: <span class="string">"sn"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"mail"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_GROUP_SEARCH = LDAPSearch(</span><br><span class="line">    <span class="string">"ou=Group,dc=vcg,dc=com"</span>, ldap.SCOPE_SUBTREE, <span class="string">"(objectClass=posixGroup)"</span></span><br><span class="line">)</span><br><span class="line">AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr=<span class="string">"cn"</span>)</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_REQUIRE_GROUP = <span class="string">"cn=vcg-tech,ou=Group,dc=vcg,dc=com"</span></span><br><span class="line"><span class="comment"># AUTH_LDAP_DENY_GROUP = "cn=disabled,ou=groups,dc=example,dc=com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分组权限分配：可登录、可登录后台、超级管理员</span></span><br><span class="line">AUTH_LDAP_USER_FLAGS_BY_GROUP = &#123;</span><br><span class="line">    <span class="string">"is_active"</span>: <span class="string">"cn=vcg-tech,ou=Group,dc=vcg,dc=com"</span>,</span><br><span class="line">    <span class="string">"is_staff"</span>: <span class="string">"cn=virgo-admin,ou=Group,dc=vcg,dc=com"</span>,</span><br><span class="line">    <span class="string">"is_superuser"</span>: <span class="string">"cn=virgo-admin,ou=Group,dc=vcg,dc=com"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AUTH_LDAP_MIRROR_GROUPS = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_ALWAYS_UPDATE_USER = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_FIND_GROUP_PERMS = <span class="literal">True</span></span><br><span class="line">AUTH_LDAP_CACHE_TIMEOUT = <span class="number">3600</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-镜像image</title>
    <url>/Docker-%E9%95%9C%E5%83%8Fimage/</url>
    <content><![CDATA[<p>Docker镜像是启动容器的基石。</p>
<h4 id="什么是Docker镜像"><a href="#什么是Docker镜像" class="headerlink" title="什么是Docker镜像"></a>什么是Docker镜像</h4><hr>
<p>Docker镜像是由文件系统叠加而成。最底端是一个文件引导系统，即bootfs。Docker用户不会与引导文件系统有直接的交互。Docker镜像的第二层是root文件系统rootfs，通常是一种或多种操作系统，例如ubuntu等。在Docker中，文件系统永远都是只读的，在每次修改时，都是进行拷贝叠加从而形成最终的文件系统。Docker称这样的文件为镜像。一个镜像可以迭代在另一个镜像的顶部。位于下方的镜像称之为父镜像，最底层的镜像称之为<strong>基础镜像</strong>。最后，当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器。</p>
<p><img src="/Docker-镜像image/Docker镜像.JPEG" alt="Docker镜像"></p>
<p>Docker的这种机制我们称之为<strong>写时复制</strong>。</p>
<h4 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>该命令可以用于查找当前系统中所有存在的镜像列表。</p>
<p>Ps：本地镜像默认保存在Docker宿主机的/var/lib/docker目录下。所有的镜像都是保存在仓库中，而仓库位于Registry中。默认的Registry是Docker公司运营的Docker Hub。每个镜像仓库都可以存放很多的镜像。</p>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p>上述命令会拉取镜像到本地。</p>
<p>为了区分同一个仓库中不同的镜像，Docker提供了一种tag的功能。我们可以给每个版本的镜像添加一个唯一的tag来标识该镜像。此时，镜像的名称如下：仓库名称:tag。我们在运行镜像或拉取镜像时，可以直接指定对应的标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull registry-vpc.cn-beijing.aliyuncs.com/vcgcs/jdk8:util</span><br></pre></td></tr></table></figure>
<h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><hr>
<p>从Docker Hub查找有哪些公共的可用镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search keywords</span><br></pre></td></tr></table></figure>
<h4 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h4><hr>
<p><strong>docker build</strong> 命令用于使用 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t runoob/ubuntu:v1 .</span><br></pre></td></tr></table></figure>
<p>使用URL <strong>github.com/creack/docker-firefox</strong> 的 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build github.com/creack/docker-firefox</span><br></pre></td></tr></table></figure>
<p>也可以通过 -f Dockerfile 文件的位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure>
<h4 id="登录镜像仓库"><a href="#登录镜像仓库" class="headerlink" title="登录镜像仓库"></a>登录镜像仓库</h4><p>使用阿里云容器镜像服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login --username="ops@vcg.com" --password="******" registry-vpc.cn-beijing.aliyuncs.com</span><br></pre></td></tr></table></figure>
<h4 id="推送镜像到仓库"><a href="#推送镜像到仓库" class="headerlink" title="推送镜像到仓库"></a>推送镜像到仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcgcs/jdk8:util</span><br></pre></td></tr></table></figure>
<h4 id="修改镜像Tag"><a href="#修改镜像Tag" class="headerlink" title="修改镜像Tag"></a>修改镜像Tag</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images  # 获取ImageId</span><br><span class="line">docker tag [ImageId] registry.cn-beijing.aliyuncs.com/vcg/500px-vcg-com:[镜像版本号]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器网络抓包案例</title>
    <url>/Docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>Docker容器网络抓包案例</p>
<p>使用宿主机上的tcpdump工具对容器进程抓包</p>
<h5 id="获取容器PID"><a href="#获取容器PID" class="headerlink" title="获取容器PID"></a>获取容器PID</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 获取容器ID</span><br><span class="line">docker ps |grep xxx </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取PID</span><br><span class="line">docker inspect --format "&#123;&#123;.State.Pid&#125;&#125;"  container_id/name</span><br></pre></td></tr></table></figure>
<h5 id="使用nsenter切换网络命令空间"><a href="#使用nsenter切换网络命令空间" class="headerlink" title="使用nsenter切换网络命令空间"></a>使用nsenter切换网络命令空间</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nsenter -n -t container_id/name</span><br></pre></td></tr></table></figure>
<h5 id="使用tcpdump抓包"><a href="#使用tcpdump抓包" class="headerlink" title="使用tcpdump抓包"></a>使用tcpdump抓包</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -vvv -s0 -w tcpdump-contract.pcap</span><br><span class="line">tcpdump -vvv -s0 host 10.10.4.63 -w tcpdump-edge2.pcap</span><br></pre></td></tr></table></figure>
<h5 id="完整操作记录："><a href="#完整操作记录：" class="headerlink" title="完整操作记录："></a>完整操作记录：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# docker ps |grep contract</span><br><span class="line">55b1fdb7a079        registry-vpc.cn-beijing.aliyuncs.com/vcg/vcg-boss-contract                   "/bin/sh -c 'java ..."   4 days ago          Up 4 days                               k8s_vcg-boss-contract_vcg-boss-contract-55cd566f74-m2m72_default_7bf56757-b9b6-11e9-afe7-00163e0e2421_0</span><br><span class="line">f372c163217f        registry-vpc.cn-beijing.aliyuncs.com/acs/pause-amd64:3.0                     "/pause"                 4 days ago          Up 4 days                               k8s_POD_vcg-boss-contract-55cd566f74-m2m72_default_7bf56757-b9b6-11e9-afe7-00163e0e2421_0</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# docker inspect --format "&#123;&#123;.State.Pid&#125;&#125;" 55b1fdb7a079</span><br><span class="line">9421</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# nsenter -n -t 9421</span><br><span class="line">[root@iz2zeh8rkwrmvh0e3t9x29z ~]# tcpdump -vvv -s0 host 10.10.4.138 -w tcpdump-contract.pcap</span><br><span class="line">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">0 packets captured</span><br><span class="line">0 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Elasticsearch服务安全加固</title>
    <url>/Elasticsearch%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<blockquote>
<p>引用自阿里云<a href="https://help.aliyun.com/knowledge_detail/49913.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/49913.html</a>&gt;</p>
</blockquote>
<p>Elasticsearch 是一个基于 Lucene 的搜索服务，它提供了 RESTful web 接口的分布式、多用户全文搜索引擎 。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是第二大最流行的企业搜索引擎。</p>
<p>Elasticsearch 应用于云计算中，具有实时搜索、稳定、可靠、快速、安装使用方便等优势；但也存在一些安全隐患：默认安装完成后，Elasticsearch 可以使用 9200 端口通告 web 的方式访问查看数据信息。</p>
<h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><p>Elasticsearch 中存在以下高危漏洞。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">CVE</th>
<th style="text-align:left">受影响版本</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">远程命令执行</td>
<td style="text-align:left">CVE-2014-3120</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Elasticsearch 的脚本执行 (scripting) 功能，可以很方便地对查询出来的数据进行再加工处理。但是，其使用的 MVEL 脚本引擎没有做过任何防护（或者沙盒包装），可以直接执行任意代码。</td>
</tr>
<tr>
<td style="text-align:left">远程代码执行</td>
<td style="text-align:left">-</td>
<td style="text-align:left">1.3.0-1.3.7，1.4.0-1.4</td>
<td style="text-align:left">Elasticsearch 使用 Groovy 作为脚本语言，虽然加入了沙盒进行控制，危险的代码会被拦截。但是由于沙盒限制不严格，仅通过黑白名单来判断，导致攻击者可以绕过沙盒，执行远程代码。</td>
</tr>
<tr>
<td style="text-align:left">未授权访问</td>
<td style="text-align:left">-</td>
<td style="text-align:left">-</td>
<td style="text-align:left">Elasticsearch 在安装了 River 机制之后可以同步多种数据库数据（包括关系型的MySQL、MongoDB 等）。如果 <code>http://localhost:9200/cat/indices</code>中 <code>indices</code> 包含了 <code>_river</code>，则代表 Elasticsearch 已安装 River 机制。而通过泄露的 <code>http://localhost:9200/_rvier/_search</code> URL 地址，攻击者可以获取到敏感信息。</td>
</tr>
</tbody>
</table>
<h3 id="漏洞成因与危害"><a href="#漏洞成因与危害" class="headerlink" title="漏洞成因与危害"></a>漏洞成因与危害</h3><p>由于 Elasticsearch 的 HTTP 连接没有提供任何的权限控制措施，一旦部署在公共网络就容易有数据泄露的风险。</p>
<h3 id="安全加固方案"><a href="#安全加固方案" class="headerlink" title="安全加固方案"></a>安全加固方案</h3><h4 id="使用最新的-Elasticsearch-版本"><a href="#使用最新的-Elasticsearch-版本" class="headerlink" title="使用最新的 Elasticsearch 版本"></a>使用最新的 Elasticsearch 版本</h4><p>通过正规渠道（如 <a href="https://www.elastic.co/downloads" target="_blank" rel="noopener">Elastic 官网</a>）下载 Elasticsearch 的最新版本。</p>
<ul>
<li>下载完成后，将下载文件的 sha1 值和下载时官网页面提供的 sha1 值进行对比，避免下载过程中被恶意攻击者拦截破坏文件，甚至注入恶意代码。</li>
<li>不要随便安装第三方的插件，插件有可能引入安全漏洞甚至本身自带后门，需谨慎使用。</li>
<li>关注 Elastic 网站，及时更新 Elasticsearch 至最新版本。Elasticsearch 每次版本发布都会优化和改进一部分功能，尤其是安全漏洞的补丁。同时，仔细阅读 Elasticsearch 的版本更新记录。</li>
</ul>
<p><strong>注意</strong>：更新升级前，建议您先进行快照备份，及本地测试。</p>
<h4 id="（推荐）网络访问控制"><a href="#（推荐）网络访问控制" class="headerlink" title="（推荐）网络访问控制"></a>（推荐）网络访问控制</h4><p>Elasticsearch 默认端口是 9200。</p>
<ul>
<li>不要把 Elasticsearch 的 9200 端口服务发布到互联网上。</li>
<li>使用 <a href="https://help.aliyun.com/document_detail/25475.html" target="_blank" rel="noopener">阿里云安全组防火墙</a> 或本地操作系统防火墙对访问源 IP 进行隔离控制。</li>
</ul>
<h4 id="绑定访问源-IP"><a href="#绑定访问源-IP" class="headerlink" title="绑定访问源 IP"></a>绑定访问源 IP</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.bind_host: 192.168.0.1</span><br><span class="line"># 设置绑定的 IP 地址，可以是 IPv4 或 IPv6 地址，默认为 0.0.0.0。</span><br><span class="line">network.publish_host: 192.168.0.1</span><br><span class="line"># 设置其它节点和该节点交互的 IP 地址，如果不设置它会自动判断，值必须是个真实的 IP 地址。</span><br><span class="line">network.host: 192.168.0.1</span><br><span class="line"># 同时设置上述两个参数：bind_host 和 publish_host。</span><br></pre></td></tr></table></figure>
<h4 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ransport.tcp.port: 9300</span><br><span class="line"># 设置节点间交互的 TCP 端口，默认是 9300。</span><br><span class="line">transport.tcp.compress: true</span><br><span class="line"># 设置是否压缩 TCP 传输时的数据，默认为 false，即不压缩。</span><br><span class="line">http.port: 9200</span><br><span class="line"># 设置对外服务的 HTTP 端口，默认为 9200。</span><br></pre></td></tr></table></figure>
<h4 id="关闭-HTTP-访问"><a href="#关闭-HTTP-访问" class="headerlink" title="关闭 HTTP 访问"></a>关闭 HTTP 访问</h4><p>进入 <code>config</code> 目录，修改 <code>elasticsearch.yml</code> 配置文件中以下参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.enabled: false</span><br><span class="line"># 是否使用 HTTP 协议对外提供服务，默认为 true，即开启。</span><br></pre></td></tr></table></figure>
<h4 id="使用-Shield-安全插件"><a href="#使用-Shield-安全插件" class="headerlink" title="使用 Shield 安全插件"></a>使用 Shield 安全插件</h4><p>Shield 是 Elastic 公司为 Elasticsearch 开发的一个安全插件。在安装此插件后，Shield 会拦截所有对 Elasticsearch 的请求，并进行认证与加密，保障 Elasticsearch 及相关系统的安全性。Shield 是商业插件，需要 Elasticsearch 的商业许可。第一次安装许可的时候，会提供 30 天的免费试用权限。30 天后，Shield 将会屏蔽 clusterhealth, cluster stats, index stats 等 API，其余功能不受影响。</p>
<h5 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h5><p>使用 Shield 可以定义一系列已知的用户，并用其认证用户请求。这些用户存在于抽象的“域”中。一个“域”可以是下面几种类型：</p>
<ul>
<li>LDAP 服务</li>
<li>ActiveDirectory 服务</li>
<li>本地 <code>esusers</code> 配置文件（类似 <code>/etc/passwd</code>)</li>
</ul>
<h5 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h5><p>Shield 的权限控制包含下面几种元素：</p>
<ul>
<li>被保护的资源 <strong>SecuredResource</strong>：权限所应用到的对象，比如某个 index，cluster 等。</li>
<li>特权 <strong>Priviliege</strong>：角色对对象可以执行的一种或多种操作，比如 read，write 等。还可以是 <code>indicies:/data/read/perlocate</code> 等对某种对象特有的操作。</li>
<li>许可 <strong>Permissions</strong>：对被保护的资源拥有的一个或多个特权，如 <code>read on the&quot;products&quot; index</code>。</li>
<li>角色 <strong>Role</strong>：一组许可的集成，具有独立的名称。</li>
<li>用户 <strong>Users</strong>：用户实体，可以被赋予多种角色，他们可以对被保护的资源执行相应角色所拥有的各种特权。</li>
</ul>
<h5 id="安装-Shield"><a href="#安装-Shield" class="headerlink" title="安装 Shield"></a>安装 Shield</h5><p>执行安装步骤前，请确保满足以下安装环境条件：</p>
<ul>
<li>您安装了 Java7 或更新版本。</li>
<li>您将 Elasticsearch 1.5.0+ 解压安装到了本机上。如果您使用 APT 或 YUM 安装，默认的安装目录可能在 <code>/usr/share/elasticsearch</code>。</li>
</ul>
<p>参照以下步骤完成安装：</p>
<ol>
<li><p>进入 Elasticsearch 安装目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/share/elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Elasticsearch 许可插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/plugin -i elasticsearch/license/latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Shield 插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/plugin -i elasticsearch/shield/latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 Shield 配置文件移动或链接至 <code>/etc/elasticsearch/shield</code> 目录中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /usr/share/elasticsearch/config/shield /etc/elasticsearch/shield</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：Elasticsearch 服务在启动时会在 <code>/etc/elasticsearch/shield</code> 目录下寻找 Shield 配置文件，而这些配置文件在安装 Shield 时会出现在 <code>/usr/share/elasticsearch/config/shield</code> 中，因此需要将配置文件移动或链接至该目录。</p>
</li>
<li><p>重启 Elasticsearch 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service elasticsearch restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一个 Elasticsearch 管理员账户，填写新密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/shield/esusersuseradd es_admin -r admin</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接使用 RESTFUL API 访问 Elasticsearch 的请求都会被拒绝：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XGET&apos;http://localhost:9200/&apos;</span><br></pre></td></tr></table></figure>
<p>需要在请求中添加用户名和密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -u es_admin -XGET &apos;http://localhost:9200/&apos;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>更多信息，请参考：</p>
<ul>
<li><a href="https://www.elastic.co/downloads/shield" target="_blank" rel="noopener">Shield 官方安装指南</a></li>
<li><a href="https://www.elastic.co/guide/en/shield/current/getting-started.html" target="_blank" rel="noopener">Shield 官方使用配置指南</a></li>
</ul>
<h4 id="修改默认的-Elasticsearch-集群名称"><a href="#修改默认的-Elasticsearch-集群名称" class="headerlink" title="修改默认的 Elasticsearch 集群名称"></a>修改默认的 Elasticsearch 集群名称</h4><p>Elasticsearch 默认的集群名称是 elasticsearch，请在您的生产环境中将其修改成其他名称。确保在不同的环境和不同的集群下使用不同的名称；并且在监控集群节点时，如果有未知节点加入，一定要及时预警。</p>
<h4 id="不要以-root-身份运行-Elasticsearch"><a href="#不要以-root-身份运行-Elasticsearch" class="headerlink" title="不要以 root 身份运行 Elasticsearch"></a>不要以 root 身份运行 Elasticsearch</h4><p>不要以 root 身份来运行 Elasticsearch，不要和其他服务共用相同的用户，并把用户的权限最小化。</p>
<p>应用示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -u es-user ES_JAVA_OPTS=&quot;-Xms1024m -Xmx1024m&quot;/opt/elasticsearch/bin/elasticsearc</span><br></pre></td></tr></table></figure>
<h4 id="正确设置-Elasticsearch-的数据目录"><a href="#正确设置-Elasticsearch-的数据目录" class="headerlink" title="正确设置 Elasticsearch 的数据目录"></a>正确设置 Elasticsearch 的数据目录</h4><p>请确保为 Elasticsearch 的目录分配了合理的读写权限，避免使用共享文件系统。确保只有 Elasticsearch 的启动用户才有权访问目录。日志目录也需要正确配置，避免泄露敏感信息。</p>
<h4 id="定期对-Elasticsearch-进行备份"><a href="#定期对-Elasticsearch-进行备份" class="headerlink" title="定期对 Elasticsearch 进行备份"></a>定期对 Elasticsearch 进行备份</h4><p>使用 Elasticsearch 提供的备份还原机制，定期对 Elasticsearch 的数据进行快照备份。</p>
<h4 id="禁用批量删除索引"><a href="#禁用批量删除索引" class="headerlink" title="禁用批量删除索引"></a>禁用批量删除索引</h4><p>Elasticsearch 支持使用全部（<code>_all</code>）和通配符（<code>*</code>）来批量删除索引。在生产环境，该操作存在一定风险，你可以通过设置 <code>action.destructive_requires_name: true</code> 参数来禁用它。</p>
<h4 id="启用日志记录功能"><a href="#启用日志记录功能" class="headerlink" title="启用日志记录功能"></a>启用日志记录功能</h4><p>Elasticsearch 的 <code>config</code> 文件夹里面有两个配置文件：</p>
<ul>
<li><code>elasticsearch.yml</code>：基本配置文件。</li>
<li><code>logging.yml</code>：日志配置文件。由于 Elasticsearch 使用 log4j 来记录日志的，<code>logging.yml</code> 中的设置请按普通 log4j 配置文件进行设置。</li>
</ul>
<p>启用日志功能需要修改 <code>elasticsearch.yml</code> 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.logs: /path/to/logs# 设置日志文件的存储路径，默认是 Elasticsearch 根目录下的 logs 文件夹</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab-管理员密码重置</title>
    <url>/GitLab-%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>官方文档地址：<a href="https://docs.gitlab.com/ce/security/reset_root_password.html" target="_blank" rel="noopener">https://docs.gitlab.com/ce/security/reset_root_password.html</a></p>
<p>操作如下：</p>
<ol>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-rails console production</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user = User.where(id: 1).first</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user.password = &apos;secret_pass&apos;</span><br><span class="line">user.password_confirmation = &apos;secret_pass&apos;</span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">user.password = 123456789</span><br><span class="line">user.password_confirmation = 123456789</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user.save!</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab代码托管</title>
    <url>/GitLab%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/</url>
    <content><![CDATA[<p>GitLab 是一个用于仓库管理系统的开源项目，使用<a href="https://baike.baidu.com/item/Git" target="_blank" rel="noopener">Git</a>作为代码管理工具，并在此基础上搭建起来的web服务。</p>
<p>官网：<a href="https://about.gitlab.com/stages-devops-lifecycle/" target="_blank" rel="noopener">https://about.gitlab.com/stages-devops-lifecycle/</a></p>
<hr>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="配置Yum源"><a href="#配置Yum源" class="headerlink" title="配置Yum源"></a>配置Yum源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab_gitlab-ee.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y postfix</span><br><span class="line">yum install gitlab-ce -y</span><br></pre></td></tr></table></figure>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置文件：/etc/gitlab/gitlab.rb    (建议每次修改前备份此文件)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">	external_url 'https://git.visualchina.com'    # 域名配置</span><br><span class="line">	gitlab_rails['time_zone'] = 'Asia/Shanghai'   # 时区</span><br><span class="line">	</span><br><span class="line">	nginx['redirect_http_to_https'] = true        # SSL证书</span><br><span class="line">	nginx['ssl_certificate'] = "/data/vcg/ssl/visualchina.pem"</span><br><span class="line">	nginx['ssl_certificate_key'] = "/data/vcg/ssl/visualchina.key"</span><br><span class="line">	</span><br><span class="line">	gitlab_rails['ldap_enabled'] = true</span><br><span class="line">gitlab_rails['ldap_servers'] = YAML.load &lt;&lt;-'EOS' # remember to close this block with 'EOS' below</span><br><span class="line">  main: # 'main' is the GitLab 'provider ID' of this LDAP server</span><br><span class="line">    label: 'LDAP'</span><br><span class="line">    host: '172.16.239.3'</span><br><span class="line">    port: 389</span><br><span class="line">    uid: 'cn'</span><br><span class="line">    method: 'plain' # "tls" or "ssl" or "plain"</span><br><span class="line">    bind_dn: 'cn=root,dc=vcg,dc=com'</span><br><span class="line">    password: 'vcg@2018'</span><br><span class="line">    active_directory: true</span><br><span class="line">    allow_username_or_email_login: false</span><br><span class="line">    block_auto_created_users: false</span><br><span class="line">    base: 'ou=People,dc=vcg,dc=com'</span><br><span class="line">    user_filter: ''</span><br><span class="line">    attributes:</span><br><span class="line">      username: ['cn']</span><br><span class="line">      email:    ['mail']</span><br><span class="line">      name:       'cn'</span><br><span class="line">      first_name: 'givenName'</span><br><span class="line">      last_name:  'sn'</span><br><span class="line">EOS</span><br></pre></td></tr></table></figure>
<h5 id="配置完成后进行配置更新"><a href="#配置完成后进行配置更新" class="headerlink" title="配置完成后进行配置更新"></a>配置完成后进行配置更新</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<h5 id="检查是否配置成功"><a href="#检查是否配置成功" class="headerlink" title="检查是否配置成功"></a>检查是否配置成功</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:ldap:check（列出前100个用户）</span><br></pre></td></tr></table></figure>
<h5 id="重启gitlab服务"><a href="#重启gitlab服务" class="headerlink" title="重启gitlab服务"></a>重启gitlab服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<h5 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h5><p>访问ip:80端口 配置root密码，至此部署完成。</p>
<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><h5 id="升级规范和建议"><a href="#升级规范和建议" class="headerlink" title="升级规范和建议"></a>升级规范和建议</h5><p><a href="https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations" target="_blank" rel="noopener">https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations</a></p>
<p>首先升级到主要版本中的最新可用次要版本</p>
<p>例如：8.13.4 升级到 11.3.4 ，升级路径为 8.13.4 -&gt; 8.17.7 -&gt; 9.5.10 -&gt; 10.8.7 -&gt; 11.3.4</p>
<p>​    即：<code>8.17.7</code>是版本<code>8</code>中的最后一个版本, <code>9.5.10</code>是版本<code>9</code>中的最后一个版本, <code>10.8.7</code>是版本<code>10</code>中的最后一个版本</p>
<h5 id="升级操作"><a href="#升级操作" class="headerlink" title="升级操作"></a>升级操作</h5><p>本次升级版本为 10.7.0 ，升级到最新版本 11.9.8 ，注：2019年04月16日</p>
<h6 id="1、下载10-8-7版本的rpm包"><a href="#1、下载10-8-7版本的rpm包" class="headerlink" title="1、下载10.8.7版本的rpm包"></a>1、下载10.8.7版本的rpm包</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h6 id="2、安装升级到10-8-7版本"><a href="#2、安装升级到10-8-7版本" class="headerlink" title="2、安装升级到10.8.7版本"></a>2、安装升级到10.8.7版本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh gitlab-ce-10.8.7-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<h6 id="3、再升级到11-9-8版本"><a href="#3、再升级到11-9-8版本" class="headerlink" title="3、再升级到11.9.8版本"></a>3、再升级到11.9.8版本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce.x86_64</span><br></pre></td></tr></table></figure>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><h5 id="备份源GitLab数据"><a href="#备份源GitLab数据" class="headerlink" title="备份源GitLab数据"></a>备份源GitLab数据</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create RAILS_ENV=production</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Creating backup archive: 1555983152_2019_04_23_11.9.8_gitlab_backup.tar ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 数据保存在 /var/opt/gitlab/backups，自动生成文件名，比如本次的 1555983152_2019_04_23_11.9.8_gitlab_backup.tar</span><br></pre></td></tr></table></figure>
<h5 id="SCP迁移数据"><a href="#SCP迁移数据" class="headerlink" title="SCP迁移数据"></a>SCP迁移数据</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>按需替换目标地址</span><br><span class="line">scp /var/opt/gitlab/backups/1555983152_2019_04_23_11.9.8_gitlab_backup.tar root@1.1.1.1:/root/var/opt/gitlab/backups</span><br></pre></td></tr></table></figure>
<h5 id="安装GitLab"><a href="#安装GitLab" class="headerlink" title="安装GitLab"></a>安装GitLab</h5><p>请参考 安装 章节</p>
<h5 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1555983152_2019_04_23_11.9.8</span><br><span class="line"><span class="meta">#</span> BACKUP的时间点必须与原服务器备份后的文件名一致</span><br></pre></td></tr></table></figure>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><h5 id="定期备份"><a href="#定期备份" class="headerlink" title="定期备份"></a>定期备份</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line">0 14 * * * /usr/bin/gitlab-rake gitlab:backup:create</span><br><span class="line">0 15 * * * find /var/opt/gitlab/backups/* -type f -mtime +3 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
<h5 id="gitlab-ctl命令"><a href="#gitlab-ctl命令" class="headerlink" title="gitlab-ctl命令"></a>gitlab-ctl命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZ2ze4cng635a2k047qus5Z ~]# gitlab-ctl --help</span><br><span class="line">omnibus-ctl: command (subcommand)</span><br><span class="line">check-config</span><br><span class="line">  Check if there are any configuration in gitlab.rb that is removed in specified version</span><br><span class="line">deploy-page</span><br><span class="line">  Put up the deploy page</span><br><span class="line">diff-config</span><br><span class="line">  Compare the user configuration with package available configuration</span><br><span class="line">prometheus-upgrade</span><br><span class="line">  Upgrade the Prometheus data to the latest supported version</span><br><span class="line">remove-accounts</span><br><span class="line">  Delete *all* users and groups used by this package</span><br><span class="line">upgrade</span><br><span class="line">  Run migrations after a package upgrade</span><br><span class="line">General Commands:</span><br><span class="line">  cleanse</span><br><span class="line">    Delete *all* gitlab data, and start from scratch.</span><br><span class="line">  help</span><br><span class="line">    Print this help message.</span><br><span class="line">  reconfigure</span><br><span class="line">    Reconfigure the application.</span><br><span class="line">  show-config</span><br><span class="line">    Show the configuration that would be generated by reconfigure.</span><br><span class="line">  uninstall</span><br><span class="line">    Kill all processes and uninstall the process supervisor (data will be preserved).</span><br><span class="line">Service Management Commands:</span><br><span class="line">  graceful-kill</span><br><span class="line">    Attempt a graceful stop, then SIGKILL the entire process group.</span><br><span class="line">  hup</span><br><span class="line">    Send the services a HUP.</span><br><span class="line">  int</span><br><span class="line">    Send the services an INT.</span><br><span class="line">  kill</span><br><span class="line">    Send the services a KILL.</span><br><span class="line">  once</span><br><span class="line">    Start the services if they are down. Do not restart them if they stop.</span><br><span class="line">  restart</span><br><span class="line">    Stop the services if they are running, then start them again.</span><br><span class="line">  service-list</span><br><span class="line">    List all the services (enabled services appear with a *.)</span><br><span class="line">  start</span><br><span class="line">    Start services if they are down, and restart them if they stop.</span><br><span class="line">  status</span><br><span class="line">    Show the status of all the services.</span><br><span class="line">  stop</span><br><span class="line">    Stop the services, and do not restart them.</span><br><span class="line">  tail</span><br><span class="line">    Watch the service logs of all enabled services.</span><br><span class="line">  term</span><br><span class="line">    Send the services a TERM.</span><br><span class="line">  usr1</span><br><span class="line">    Send the services a USR1.</span><br><span class="line">  usr2</span><br><span class="line">    Send the services a USR2.</span><br><span class="line">Container Registry Commands:</span><br><span class="line">  registry-garbage-collect</span><br><span class="line">    Run Container Registry garbage collection.</span><br><span class="line">Database Commands:</span><br><span class="line">  pg-password-md5</span><br><span class="line">    Generate MD5 Hash of user password in PostgreSQL format</span><br><span class="line">  pg-upgrade</span><br><span class="line">    Upgrade the PostgreSQL DB to the latest supported version</span><br><span class="line">  revert-pg-upgrade</span><br><span class="line">    Run this to revert to the previous version of the database</span><br><span class="line">  set-replication-password</span><br><span class="line">    Set database replication password</span><br><span class="line">Let's Encrypt Commands:</span><br><span class="line">  renew-le-certs</span><br><span class="line">    Renew the existing Let's Encrypt certificates</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab旧版本安装</title>
    <url>/GitLab%E6%97%A7%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>研发需要找老代码，找到备份文件后恢复时报错版本过低</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol>
<li><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><h5 id="https-packages-gitlab-com-gitlab-gitlab-ce"><a href="#https-packages-gitlab-com-gitlab-gitlab-ce" class="headerlink" title="https://packages.gitlab.com/gitlab/gitlab-ce"></a><a href="https://packages.gitlab.com/gitlab/gitlab-ce" target="_blank" rel="noopener">https://packages.gitlab.com/gitlab/gitlab-ce</a></h5><h5 id="找到对应的版本，下载到服务器"><a href="#找到对应的版本，下载到服务器" class="headerlink" title="找到对应的版本，下载到服务器"></a>找到对应的版本，下载到服务器</h5></li>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh gitlab-ce-8.6.6-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore RAILS_ENV=production BACKUP=1561606164</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>GitLab</category>
      </categories>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>Helm-简化应用部署</title>
    <url>/Helm-%E7%AE%80%E5%8C%96%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>参考链接</p>
<p><a href="https://help.aliyun.com/document_detail/86511.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/86511.html</a></p>
<p>在 Kubernetes 中，应用管理是需求最多、挑战最大的领域。Helm 项目提供了一个统一软件打包方式，支持版本控制，可以大大简化 Kubernetes 应用分发与部署中的复杂性。</p>
<p>阿里云容器服务在应用目录管理功能中集成了 Helm 工具，并进行了功能扩展，支持官方 Repository，让您快速部署应用。您可以通过命令行或容器服务控制台界面两种方式进行部署。</p>
<h4 id="Helm-基本概念"><a href="#Helm-基本概念" class="headerlink" title="Helm 基本概念"></a>Helm 基本概念</h4><p>Helm 是由 <a href="https://helm.sh/docs/" target="_blank" rel="noopener">Deis</a> 发起的一个开源工具，有助于简化部署和管理 Kubernetes 应用。</p>
<p>Helm 可以理解为 Kubernetes 的包管理工具，可以方便地发现、共享和使用为 Kubernetes 构建的应用，它包含几个基本概念</p>
<ul>
<li><strong>Chart</strong>：一个 Helm 包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含 Kubernetes 集群中的服务定义，类似 Homebrew 中的 formula、APT 的 dpkg 或者 Yum 的 rpm 文件。</li>
<li><strong>Release</strong>：在 Kubernetes 集群上运行的 Chart 的一个实例。在同一个集群上，一个 Chart 可以安装很多次。每次安装都会创建一个新的 release。例如一个 MySQL Chart，如果想在服务器上运行两个数据库，就可以把这个 Chart 安装两次。每次安装都会生成自己的 Release，会有自己的 Release 名称。</li>
<li><strong>Repository</strong>：用于发布和存储 Chart 的存储库。</li>
</ul>
<h4 id="Helm-组件"><a href="#Helm-组件" class="headerlink" title="Helm 组件"></a>Helm 组件</h4><p>Helm 采用客户端/服务器架构，由如下组件组成：</p>
<ul>
<li>Helm CLI 是 Helm 客户端，可以在 Kubernetes 集群的 master 节点或者本地执行。</li>
<li>Tiller 是服务器端组件，在 Kubernetes 集群上运行，并管理 Kubernetes 应用程序的生命周期。</li>
<li>Repository 是 Chart 存储库，Helm 客户端通过 HTTP 协议来访问存储库中 Chart 的索引文件和压缩包。</li>
</ul>
<h4 id="安装配置-Helm-CLI"><a href="#安装配置-Helm-CLI" class="headerlink" title="安装配置 Helm CLI"></a>安装配置 Helm CLI</h4><ol>
<li><p>安装和配置kubectl</p>
</li>
<li><p>安装heml</p>
<p><a href="https://github.com/helm/helm/releases" target="_blank" rel="noopener">https://github.com/helm/helm/releases</a></p>
<p>安装方法，参见 <a href="https://github.com/kubernetes/helm/blob/master/docs/install.md?spm=a2c4g.11186623.2.27.44516a3fjdfubX&amp;file=install.md" target="_blank" rel="noopener">Install Helm</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 1、获取安装包</span><br><span class="line">wget https://get.helm.sh/helm-v2.14.2-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2、解压</span><br><span class="line">tar zxf helm-v2.14.2-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 3、Find the helm binary in the unpacked directory, and move it to its desired destination</span><br><span class="line">mv linux-amd64/helm /usr/local/bin/helm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 4、验证</span><br><span class="line">helm help</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Helm 的 Repository。这里我们使用了阿里云容器服务提供的 Charts 存储库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm init --client-only --stable-repo-url https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/</span><br><span class="line">helm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Helm基础操作"><a href="#Helm基础操作" class="headerlink" title="Helm基础操作"></a>Helm基础操作</h4><ul>
<li><p>若要查看在集群上安装的 Charts 列表，请键入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm list</span><br></pre></td></tr></table></figure>
<p>或者缩写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要查看存储库配置，请键入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo list</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要查看或搜索存储库中的 Helm charts，请键入以下任一命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm search </span><br><span class="line">helm search 存储库名称 #如 stable 或 incubator</span><br><span class="line">helm search chart名称 #如 wordpress 或 spark</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要更新 charts 列表以获取最新版本，请键入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm delete --purge &quot;myspark&quot;</span><br></pre></td></tr></table></figure>
<p>有关 Helm 使用的详细信息，请参阅 <a href="https://github.com/kubernetes/helm" target="_blank" rel="noopener">Helm项目</a>。</p>
</li>
</ul>
<h4 id="使用第三方的-Chart-存储库"><a href="#使用第三方的-Chart-存储库" class="headerlink" title="使用第三方的 Chart 存储库"></a>使用第三方的 Chart 存储库</h4><p>您除了可以使用预置的阿里云的 Chart 存储库，也可以使用第三方的 Chart 存储库（前提是网络是可达的）。使用如下命令格式添加第三方 Chart 存储库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">helm repo add 存储库名 存储库URL</span><br><span class="line">helm repo update</span><br></pre></td></tr></table></figure>
<p>关于 Helm 相关命令的说明，您可以参阅 <a href="https://docs.helm.sh/helm/#helm-repo-add" target="_blank" rel="noopener">Helm 文档</a></p>
<h4 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h4><p>Helm 催生了社区的发展壮大，越来越多的软件提供商，如 Bitnami 等公司，开始提供高质量的 Charts。您可以在 <code>https://kubeapps.com/</code> 中寻找和发现已有的 Charts。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo-Next主题添加搜索功能</title>
    <url>/Hexo-Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>博客根目录执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h5 id="修改主配置"><a href="#修改主配置" class="headerlink" title="修改主配置"></a>修改主配置</h5><p>编辑配置文件：_config.yaml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<h5 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h5><p>编辑 themes/next/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>
<h5 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/Hexo-%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>快速、简洁且高效的博客框架<br>官网: <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io</a></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h3><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p>
<h3 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h3><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p>
<h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p>
<h3 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h3><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h3><p>hexo支持指令缩写，例如：hexo generate和hexo g是等效的。<br>d = deploy 部署<br>g = generate 生成静态页面<br>l = log 启动日记记录，使用覆盖记录格式<br>n = new 新建文章<br>o = output 设置输出路径<br>p = port 重设端口<br>s = server 启动服务器<br>w = watch 监视文件变动</p>
<h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<h3 id="修改首页博客为预览模式"><a href="#修改首页博客为预览模式" class="headerlink" title="修改首页博客为预览模式"></a>修改首页博客为预览模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim themes/next/_config.yml</span><br><span class="line"></span><br><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span> </span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>将 auto_excerpt的enable参数由false改为true</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-博客中添加图片等资源</title>
    <url>/Hexo-%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E7%AD%89%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<blockquote>
<p>引用于 <a href="https://blog.csdn.net/qq_40265501/article/details/80019774" target="_blank" rel="noopener">https://blog.csdn.net/qq_40265501/article/details/80019774</a></p>
<p>官方介绍：<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders.html</a></p>
</blockquote>
<p>一图胜万言</p>
<p>博客中有时候图片比文字更有说服力，比如：代码运行结果，代码运行效果等</p>
<h5 id="开启’资源文件管理’功能"><a href="#开启’资源文件管理’功能" class="headerlink" title="开启’资源文件管理’功能"></a>开启’资源文件管理’功能</h5><p>将 <code>config.yml</code>文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
<h5 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h5><p>插件地址：<a href="https://github.com/dangxuandev/hexo-asset-image" target="_blank" rel="noopener">https://github.com/dangxuandev/hexo-asset-image</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="在博客中添加图片"><a href="#在博客中添加图片" class="headerlink" title="在博客中添加图片"></a>在博客中添加图片</h5><ol>
<li><p>新建博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n test</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@nginx GeekSRE]# ls -l source/_posts/ |grep test</span><br><span class="line">drwxr-xr-x 2 root root 4096 4月  17 17:29 test</span><br><span class="line">-rw-r--r-- 1 root root   96 4月  17 17:35 test.md</span><br></pre></td></tr></table></figure>
<p>可以看到 会在 source/_posts 目录创建 test.md 和 test目录</p>
<p>与博客同名目录用于存放资源文件，如图片、CSS、JS 文件等</p>
</li>
<li><p>上传图片到”文章资源文件夹”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 比如使用CSDN博客中的图片：</span></span><br><span class="line">cd source/_posts/test</span><br><span class="line">wget https://img-blog.csdn.net/20180420154609543</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim source/_posts/test.md</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ![你想要输入的替代文字](图片文件)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如：</span></span><br><span class="line">![图片](test.jpg)</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证效果<br><img src="/Hexo-博客中添加图片等资源/test.jpg" alt="图片"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客美化添加live2d动画</title>
    <url>/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E6%B7%BB%E5%8A%A0live2d%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener"><strong>hexo-helper-live2d GitHub地址</strong></a></p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><ol>
<li><p>在hexo根目录执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择动画模型</p>
<p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型地址</a></p>
<ul>
<li>live2d-widget-model-chitose</li>
<li>live2d-widget-model-epsilon2_1</li>
<li>live2d-widget-model-gf</li>
<li>live2d-widget-model-haru</li>
<li>live2d-widget-model-haruto</li>
<li>live2d-widget-model-hibiki</li>
<li>live2d-widget-model-hijiki</li>
<li>live2d-widget-model-izumi</li>
<li>live2d-widget-model-koharu</li>
<li>live2d-widget-model-miku</li>
<li>live2d-widget-model-ni-j</li>
<li>live2d-widget-model-nico</li>
<li>live2d-widget-model-nietzsche</li>
<li>live2d-widget-model-nipsilon</li>
<li>live2d-widget-model-nito</li>
<li>live2d-widget-model-shizuku</li>
<li>live2d-widget-model-tororo</li>
<li>live2d-widget-model-tsumiki</li>
<li>live2d-widget-model-unitychan</li>
<li>live2d-widget-model-wanko</li>
<li>live2d-widget-model-z16</li>
</ul>
</li>
<li><p>本次选择安装live2d-widget-model-haruto</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-haruto</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="拷贝资源"><a href="#拷贝资源" class="headerlink" title="拷贝资源"></a>拷贝资源</h5><ol>
<li><p>在hexo根目录live2d_models</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p live2d_models</span><br></pre></td></tr></table></figure>
</li>
<li><p>cp模型文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -r node_modules/live2d-widget-model-haruto/ live2d_models/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="编辑主配置"><a href="#编辑主配置" class="headerlink" title="编辑主配置"></a>编辑主配置</h5><p>编辑_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-haruto</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>
<h5 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>我部署到GitHub上的域名正常，服务器上的没生效，重启进程后生效。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-API</title>
    <url>/Jenkins-API/</url>
    <content><![CDATA[<p>Jenkins-API</p>
<h5 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h5><p>在自动化平台中调用jenkins API，实现程序发版、自定义任务等</p>
<h5 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h5><p><a href="https://python-jenkins.readthedocs.io/en/latest/api.html" target="_blank" rel="noopener">Python API</a></p>
<ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install python-jenkins</span><br></pre></td></tr></table></figure>
</li>
<li><p>examples</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins</span><br><span class="line"></span><br><span class="line">server = jenkins.Jenkins(<span class="string">'http://localhost:8080'</span>, username=<span class="string">'myuser'</span>, password=<span class="string">'mypassword'</span>)</span><br><span class="line">user = server.get_whoami()</span><br><span class="line">version = server.get_version()</span><br><span class="line">print(<span class="string">'Hello %s from Jenkins %s'</span> % (user[<span class="string">'fullName'</span>], version))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jenkins</span><br><span class="line">job_name=<span class="string">'k8s/cicd-test-0613'</span></span><br><span class="line">jenkins_server_url=<span class="string">'http://jenkins.visualchina.com/jenkins'</span></span><br><span class="line">user_id=<span class="string">'vcgdev'</span></span><br><span class="line">api_token=<span class="string">'***************************'</span></span><br><span class="line">server=jenkins.Jenkins(jenkins_server_url, username=user_id, password=api_token)</span><br><span class="line"><span class="comment">#String参数化构建job名为job_name的job, 参数param_dict为字典形式，如：param_dict= &#123;"param1"：“value1”， “param2”：“value2”&#125;</span></span><br><span class="line">param_dict= &#123;<span class="string">"Action"</span>:<span class="string">"程序发版"</span>,<span class="string">"Scope"</span>:<span class="string">"生产环境"</span>,<span class="string">"JenkinsApi"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">server.build_job(job_name, parameters=param_dict)</span><br><span class="line">last_build_number = server.get_job_info(job_name)[<span class="string">'lastCompletedBuild'</span>][<span class="string">'number'</span>]</span><br><span class="line">build_info = server.get_build_info(job_name, last_build_number)</span><br><span class="line">print(build_info)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h5><p><img src="/Jenkins-API/./jenkins.png" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-GitLab_WebHook自动构建</title>
    <url>/Jenkins-GitLab-WebHook%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<p>Jenkins-GitLab_WebHook自动构建</p>
<p>插件：<a href="https://wiki.jenkins-ci.org/display/JENKINS/GitLab+Plugin" target="_blank" rel="noopener">GitLab Plugin</a></p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook1.jpg" alt></p>
<h5 id="开启触发器"><a href="#开启触发器" class="headerlink" title="开启触发器"></a>开启触发器</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook2.jpg" alt></p>
<h5 id="创建只读账号"><a href="#创建只读账号" class="headerlink" title="创建只读账号"></a>创建只读账号</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook3.jpg" alt></p>
<h5 id="创建只读角色"><a href="#创建只读角色" class="headerlink" title="创建只读角色"></a>创建只读角色</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook4.jpg" alt></p>
<p>分配角色给readonly账号</p>
<p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook5.jpg" alt></p>
<h5 id="在GitLab代码项目中配置WebHook"><a href="#在GitLab代码项目中配置WebHook" class="headerlink" title="在GitLab代码项目中配置WebHook"></a>在GitLab代码项目中配置WebHook</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook6.jpg" alt></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook7.jpg" alt></p>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook8.jpg" alt></p>
<p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook9.jpg" alt></p>
<h5 id="实战下构建情况"><a href="#实战下构建情况" class="headerlink" title="实战下构建情况"></a>实战下构建情况</h5><p><img src="/Jenkins-GitLab-WebHook自动构建/./webhook10.jpg" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-Pipeline</title>
    <url>/Jenkins-Pipeline/</url>
    <content><![CDATA[<p>Jenkins-Pipeline</p>
<h4 id="Jenkins-Pipeline总体介绍"><a href="#Jenkins-Pipeline总体介绍" class="headerlink" title="Jenkins Pipeline总体介绍"></a>Jenkins Pipeline总体介绍</h4><ul>
<li>Pipeline，简而言之，就是一台运行于Jenkins上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排与可视化。</li>
<li>Pipeline是Jenkins2.X最核心的特性，帮助Jenkins实现从CI到CD与DevOps的转变。</li>
<li>详细介绍可见<a href="https://jenkins.io/2.0/" target="_blank" rel="noopener">https://jenkins.io/2.0</a></li>
</ul>
<h4 id="Jenkins-Pipeline"><a href="#Jenkins-Pipeline" class="headerlink" title="Jenkins Pipeline"></a>Jenkins Pipeline</h4><ul>
<li>Jenkins Pipeline是一<strong>组插件</strong>，让Jenkins可以<strong>实现持续交付管道</strong>的落地和实施。</li>
<li>持续交付管道（CD Pipeline）是将软件从<strong>版本控制</strong>阶段到<strong>交付给用户或客户</strong>的<strong>完整过程的自动化表现</strong>。</li>
<li>Pipeline提供了一组可扩展的工具，通过Pipeline Domain Specific Language（DSL）syntax可以达到Pipeline as Code的目的</li>
<li>Pipeline as Code： Jenkinsfile 存储在项目的源代码库</li>
</ul>
<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul>
<li><p>Node</p>
<p>Jenkins节点，或是Master，或是Agent，是执行Step的具体运行环境</p>
</li>
<li><p>Stage</p>
<p>阶段，一个Pipeline可以划分为若干个Stage，每个Stage代表一组操作，如：“Build”，“Test”， “Deploy”。</p>
<p>​        <strong>注意</strong>，Stage是一个逻辑分组的概念，可以跨多个Node。</p>
</li>
<li><p>step</p>
<p>步骤，Step是 最基本的操作单元，小到创建一个目录，大到构建一个Docker镜像，由各类 Jenkins Plugin提供，例如：sh ‘make’</p>
</li>
</ul>
<h4 id="Pipeline特性"><a href="#Pipeline特性" class="headerlink" title="Pipeline特性"></a>Pipeline特性</h4><ul>
<li><strong>代码（Code）</strong>: Pipeline以代码的形式实现，通常被检入源代码控制，是团队能够编辑，审查 和迭代其CD流程。</li>
<li><strong>可持续性（Durable）</strong>：Jenkins重启或者中断后都不会影响Pipeline Job。</li>
<li><strong>可停顿（Pausable）</strong>:Pipeline可以选择停止并等待人工输入或者批准，然后再继续Pipeline运行。</li>
<li><strong>多功能（Versatile）</strong>：Pipeline支持实现现实世界的复杂CD要求，包括fork/join子进程，循环和并行执行工作的能力。</li>
<li><strong>可拓展（Extensible）</strong>：Pipeline插件支持其DSL的自定义扩展及与其他插件集成的多个选 项。</li>
</ul>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>官网文档：<a href="https://jenkins.io/doc/book/pipeline/syntax/" target="_blank" rel="noopener">https://jenkins.io/doc/book/pipeline/syntax/</a></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">	agent any</span><br><span class="line">	options &#123;</span><br><span class="line">		timestamps()</span><br><span class="line">	&#125;</span><br><span class="line">	environment &#123;</span><br><span class="line">		TimeStamp=<span class="string">"$&#123;currentBuild.startTimeInMillis&#125;"</span></span><br><span class="line">		Service=<span class="string">"$&#123;JOB_BASE_NAME&#125;"</span></span><br><span class="line">		Branch=<span class="string">"$&#123;env.gitlabTargetBranch&#125;"</span></span><br><span class="line">	&#125;</span><br><span class="line">	parameters &#123;</span><br><span class="line">		choice(<span class="string">name:</span> <span class="string">'Action'</span>,<span class="string">choices:</span> <span class="string">'程序发版\n程序回滚'</span>,<span class="string">description:</span> <span class="string">'请选择操作'</span>)</span><br><span class="line">		choice(<span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">choices:</span> <span class="string">'测试环境\n预发环境\n生产环境\n灾备环境'</span>,<span class="string">description:</span> <span class="string">'请选择部署环境'</span>)</span><br><span class="line">		string(<span class="string">name:</span> <span class="string">'JenkinsApi'</span>, <span class="string">defaultValue:</span> <span class="string">'false'</span>, <span class="string">description:</span> <span class="string">'是否是JenkinsAPI触发'</span>)</span><br><span class="line">		string(<span class="string">name:</span> <span class="string">'BranchOrTag'</span>, <span class="string">defaultValue:</span> <span class="string">''</span>, <span class="string">description:</span> <span class="string">'指定分支或tag发版'</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	stages &#123;</span><br><span class="line">		stage(<span class="string">'PrintEnv'</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">"printenv"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">'Check Out'</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'master'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'test'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'测试环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'预发环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'灾备环境'</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">"sh jenkins.sh 'CheckOut' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;BranchOrTag&#125;'"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">'Build Package'</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'master'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'test'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'测试环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'预发环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'灾备环境'</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">"sh jenkins.sh 'BuildPackage' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">'Build Dockerfile'</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'master'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'test'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'测试环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'预发环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'生产环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'灾备环境'</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">"sh jenkins.sh 'BuildDockerfile' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">'Build K8S Yaml'</span>) &#123;</span><br><span class="line">			when &#123;</span><br><span class="line">				anyOf &#123;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'master'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Branch'</span>,<span class="string">value:</span><span class="string">'test'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'测试环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'预发环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'生产环境'</span>;</span><br><span class="line">					environment <span class="string">name:</span> <span class="string">'Scope'</span>,<span class="string">value:</span><span class="string">'灾备环境'</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			steps &#123;</span><br><span class="line">				sh <span class="string">"sh jenkins.sh 'BuildK8SYaml' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">			steps &#123;</span><br><span class="line">				script &#123;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">"$&#123;Scope&#125;"</span> == <span class="string">"测试环境"</span>) &#123;</span><br><span class="line">						echo <span class="string">"测试环境发版"</span></span><br><span class="line">						sh <span class="string">"sh jenkins.sh 'DockerBuildPush' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">						sh <span class="string">"sh jenkins.sh 'Deploy' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">"$&#123;Scope&#125;"</span> == <span class="string">"预发环境"</span>) &#123;</span><br><span class="line">						echo <span class="string">"预发环境发版"</span></span><br><span class="line">						sh <span class="string">"sh jenkins.sh 'DockerBuildPush' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">						sh <span class="string">"sh jenkins.sh 'Deploy' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">"$&#123;Scope&#125;"</span> == <span class="string">"灾备环境"</span>) &#123;</span><br><span class="line">						echo <span class="string">"灾备环境发版"</span></span><br><span class="line">						sh <span class="string">"sh jenkins.sh 'DockerBuildPush' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">						sh <span class="string">"sh jenkins.sh 'Deploy' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="string">"$&#123;Scope&#125;"</span> == <span class="string">"生产环境"</span>) &#123;</span><br><span class="line">						script &#123;</span><br><span class="line">							<span class="keyword">if</span> (<span class="string">"$&#123;JenkinsApi&#125;"</span> == <span class="string">"true"</span>) &#123;</span><br><span class="line">								sh <span class="string">"sh jenkins.sh 'DockerBuildPush' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">								sh <span class="string">"sh jenkins.sh 'Deploy' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">else</span> &#123;</span><br><span class="line">								script &#123;</span><br><span class="line">									<span class="keyword">if</span> (<span class="string">"$&#123;env.Action&#125;"</span> == <span class="string">"程序回滚"</span>) &#123;</span><br><span class="line">										echo <span class="string">"生产环境回滚,等待领导确认"</span></span><br><span class="line">										script &#123;</span><br><span class="line">											input <span class="string">message:</span> <span class="string">"请确认是否回滚 $&#123;Scope&#125;： "</span>,<span class="string">ok :</span> <span class="string">'确认'</span>,<span class="string">submitter:</span> <span class="string">"admin"</span></span><br><span class="line">										&#125;</span><br><span class="line">										echo <span class="string">'已确认，即将回滚'</span></span><br><span class="line">										sh <span class="string">"sh jenkins.sh 'Deploy' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">									&#125;</span><br><span class="line">									<span class="keyword">else</span> &#123;</span><br><span class="line">										echo <span class="string">"生产环境发版,等待领导确认"</span></span><br><span class="line">										script &#123;</span><br><span class="line">											input <span class="string">message:</span> <span class="string">"请确认是否部署 $&#123;Scope&#125;： "</span>,<span class="string">ok :</span> <span class="string">'确认'</span>,<span class="string">submitter:</span> <span class="string">"admin"</span></span><br><span class="line">										&#125;</span><br><span class="line">										echo <span class="string">'已确认，即将发布'</span></span><br><span class="line">										sh <span class="string">"sh jenkins.sh 'DockerBuildPush' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;' '$&#123;env.Action&#125;'"</span></span><br><span class="line">										sh <span class="string">"sh jenkins.sh 'Deploy' '$&#123;Service&#125;' '$&#123;Branch&#125;' '$&#123;Scope&#125;' '$&#123;TimeStamp&#125;'"</span></span><br><span class="line">									&#125;</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-RobotFramework执行自动化测试</title>
    <url>/Jenkins-RobotFramework%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>Jenkins-RobotFramework执行自动化测试</p>
<h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest1.jpg" alt></p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest2.jpg" alt></p>
<h5 id="添加slave节点"><a href="#添加slave节点" class="headerlink" title="添加slave节点"></a>添加slave节点</h5><p>由于master节点是linux服务器，RobotFramework软件部署在windows服务器上。</p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest3.jpg" alt></p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest4.jpg" alt></p>
<h5 id="新建freestyle项目"><a href="#新建freestyle项目" class="headerlink" title="新建freestyle项目"></a>新建freestyle项目</h5><p>指定slave节点构建</p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest4-1.jpg" alt></p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest5.jpg" alt></p>
<p>配置通过百分比和邮件通知</p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest6.jpg" alt></p>
<h5 id="构建效果"><a href="#构建效果" class="headerlink" title="构建效果"></a>构建效果</h5><p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest7.jpg" alt></p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest8.jpg" alt></p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest9.jpg" alt></p>
<p><img src="/Jenkins-RobotFramework执行自动化测试/./autotest10.jpg" alt></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-创建freestyle风格项目</title>
    <url>/Jenkins-%E5%88%9B%E5%BB%BAfreestyle%E9%A3%8E%E6%A0%BC%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>Jenkins-创建freestyle风格项目</p>
<h4 id="创建第一个Job"><a href="#创建第一个Job" class="headerlink" title="创建第一个Job"></a>创建第一个Job</h4><ol>
<li><p>新建Item</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins1.jpg" alt></p>
</li>
<li><p>输入名称、选择Job类型</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins2.jpg" alt></p>
</li>
<li><p>配置Job，</p>
<p>共六部分：<code>通用</code>、<code>源码管理</code>、<code>构建触发器</code>、<code>构建环境</code>、<code>构建</code>、<code>构建后操作</code></p>
</li>
</ol>
<p>   常用操作：</p>
<p>   通用：配置参数话构建</p>
<p>   源码管理：配置代码仓库地址（git或svn）</p>
<p>   构建触发器：配置GitLab的webhook自动触发</p>
<p>   构建环境：Delete workspace before build starts</p>
<p>   <strong>构建</strong>：shell脚本或者bat脚本执行任务</p>
<p>   构建后操作：邮件通知</p>
<ol start="4">
<li><p>参数化构建</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins3.jpg" alt></p>
</li>
<li><p>Git地址</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins4.jpg" alt></p>
</li>
<li><p>触发器</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins5.jpg" alt></p>
</li>
<li><p>构建-shell脚本</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins6.jpg" alt></p>
</li>
<li><p>保存退出</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins6-1.jpg" alt></p>
</li>
<li><p>构建</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins7.jpg" alt></p>
</li>
<li><p>查看构建状态</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins8.jpg" alt></p>
</li>
<li><p>查看构建日志</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins9.jpg" alt></p>
</li>
</ol>
<h4 id="实战分享"><a href="#实战分享" class="headerlink" title="实战分享"></a>实战分享</h4><h5 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h5><ol>
<li>项目名称为vdam-web-vip</li>
<li>此job会根据环境不同确定git分支</li>
<li>git clone后编译安装nodejs模块</li>
<li>构建docker镜像，push到镜像仓库</li>
<li>触发应用更新</li>
</ol>
<h5 id="部署："><a href="#部署：" class="headerlink" title="部署："></a>部署：</h5><ol>
<li><p>创建自由风格项目</p>
</li>
<li><p>名称输入vdam-web-vip</p>
</li>
<li><p>开启参数化构建</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins12.jpg" alt></p>
</li>
<li><p>配置<code>构建</code>shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 确定 default.conf 和 nginx.conf文件存在</span></span></span><br><span class="line"></span><br><span class="line">Time=`date +%Y%m%d%H%M%S`</span><br><span class="line">WorkDir=`pwd`</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == "测试环境" ]]; then</span><br><span class="line">  Branch="release"</span><br><span class="line">  ScopeName="test"</span><br><span class="line">  JavaServiceDomain="test-vdam-gateway-service.fotomore.com"</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "预发环境" ]]; then</span><br><span class="line">  Branch="master"</span><br><span class="line">  ScopeName="pre"</span><br><span class="line">  JavaServiceDomain="vdam-gateway-service1.fotomore.com"</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "生产环境" ]]; then</span><br><span class="line">  Branch="master"</span><br><span class="line">  ScopeName="pro"</span><br><span class="line">  JavaServiceDomain="vdam-gateway-service.fotomore.com"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">rm -rf vdam-web</span><br><span class="line">mkdir -p vdam-web</span><br><span class="line">cd vdam-web</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.vcg.com:vdam/vue-vip-2019.git</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.vcg.com:vdam/vue-admin.git</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.vcg.com:vdam/vue-saas.git</span><br><span class="line">git clone -b $&#123;Branch&#125;  git@git.visualchina.com:vdam/vue-vip-upload.git</span><br><span class="line"></span><br><span class="line">cd vue-vip-upload</span><br><span class="line">sed -i "s/vdam-gateway.vcg.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line">sed -i "s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line">sed -i "s/vdam-gateway.fotomore.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line">sed -i "s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist upload</span><br><span class="line"></span><br><span class="line">cd vue-vip-2019</span><br><span class="line">sed -i "s/vdam-gateway.vcg.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line">sed -i "s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line">sed -i "s/vdam-gateway.fotomore.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line">sed -i "s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g" setBaseUrl.ts</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist vip</span><br><span class="line"></span><br><span class="line">cd vue-admin</span><br><span class="line">sed -i "s/vdam-gateway.vcg.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway.fotomore.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist admin</span><br><span class="line"></span><br><span class="line">cd vue-saas</span><br><span class="line">sed -i "s/test-vdam.gateway.vcg.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway.vcg.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway-service.fotomore.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway.fotomore.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line">sed -i "s/vdam-gateway-service.caf79ccb624f24a5cabd1de8623b2e617.cn-beijing.alicontainer.com/$JavaServiceDomain/g" src/config/index.js</span><br><span class="line"></span><br><span class="line">npm install --registry https://registry.npm.taobao.org</span><br><span class="line">npm run build</span><br><span class="line">mv dist ../</span><br><span class="line">cd ..</span><br><span class="line">mv dist saas</span><br><span class="line"></span><br><span class="line">rm -rf vue-vip</span><br><span class="line">rm -rf vue-admin</span><br><span class="line">rm -rf vue-saas</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">tar zcf vdam-web-vip.tar.gz vdam-web/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp vdam-web-vip.tar.gz /jenkins/vcgapp/vdam-web-vip/vdam-web-vip.tar.gz-<span class="variable">$&#123;Time&#125;</span></span></span><br><span class="line"></span><br><span class="line">cat &gt; Dockerfile &lt;&lt;EOF</span><br><span class="line">FROM nginx</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">ADD vdam-web-vip.tar.gz /usr/share/nginx/html/</span><br><span class="line">ADD nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">ADD default.conf /etc/nginx/conf.d/</span><br><span class="line">RUN chmod -R 777 /usr/share/nginx/html/</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125; .</span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;-$Time .</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;-$Time</span><br><span class="line">docker rmi -f registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;</span><br><span class="line">docker rmi -f registry-vpc.cn-beijing.aliyuncs.com/vcg/vdam-web-vips:$&#123;ScopeName&#125;-$Time</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == "测试环境" ]]; then</span><br><span class="line">  curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjYWY3OWNjYjYyNGYyNGE1Y2FiZDFkZTg2MjNiMmU2MTciLCJpZCI6IjM5NTI2In0.S9KkUgPkymqsc1xclUHFo9zFyd_iLMrKxxEbsPB06lajpw_YSm7aOXAonq_olgP0SxmL6ydiDE5Bu3LuAXjhMCkojXQx4FlnH8uoaBOr2fT9e_RL-4LCGSQLDvoOFqQQ1csBfPi2UpT6oDh_KkxvaYoF7kqvTmpClF2XQO9X9f4</span><br><span class="line"><span class="meta">  #</span><span class="bash">curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjYWY3OWNjYjYyNGYyNGE1Y2FiZDFkZTg2MjNiMmU2MTciLCJpZCI6IjMyNzQ0In0.afM-iP1cZUVBDdIefzca6SJyIfFBPO3hqcC0HgrJPcaQLkvmFQYuHAgF6OHKgdHLa0rErRvcKgq1t_6g4DhBiql5EN9qQYAiAKEwXTpfc-0tiNfZg4w2Z4mybg-MeiduZCD0Reh1hUy-jdNNg58poR-IeKJZRhT3IlmfIp4Ssis</span></span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "预发环境" ]]; then</span><br><span class="line">  curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjMmFiNDFlZWE0YjgxNDNlZmEwMzg3OWZiNDlhOWEyODIiLCJpZCI6IjM5NTI1In0.nwNJTY-9jPhbnVe1_4fTUuCXPd5JlkRlvGgQC8GD-u1qBqsousj8wsO65s6xhksW0h1PBPVnTn8QelwgCLMLyIvN8Pv_H7uB2x4tGHudZHjrPxKURgU6cwH4SnXhd3VYOdfd-Qc3sMKAe9aG_HoKwQoC2Zj2yT3kTQEB7j7Mlv0</span><br><span class="line"><span class="meta">  #</span><span class="bash">curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjMmFiNDFlZWE0YjgxNDNlZmEwMzg3OWZiNDlhOWEyODIiLCJpZCI6IjM3MDcyIn0.Dxx3lVTAysaRBtI6jcDLMm0M0Yh239eUznxq4dpUIIjhDsKLlgtN-UJt0TIBOmAucj8XnBjI_T-mX7hy6WrHH8bKREyMz6cWrGutfBQqNYQ2j-HyScP-Q8tsqO1q4XZuuS9__BB2-mDoN0xqqFUAAITkDkmw702rfRpbIolvNu4</span></span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "生产环境" ]]; then</span><br><span class="line">  echo ""</span><br><span class="line">  curl https://cs.console.aliyun.com/hook/trigger?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbHVzdGVySWQiOiJjNDY0MTNjYjEzYmIzNDkwZGEzZTQ5NWU0MjY0ZjZkMTkiLCJpZCI6IjM3MTkzIn0.HJfnm1ujwLRYnQpsRpiXLErKi2gE_glnZBcss9c2zmHGv-_Gcl6vYLRPdmnPpvcU2cVkuKgExHUUFGdNqzkKDEeFu8lBez9c2gCWi7l81KNAFhsgtTIEm8YRpi9p92kIsutjD_AEj6UuY_jy58nvIWGeXRtuYAaWJGXFQ6B5ItE</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存退出</p>
</li>
<li><p>参数化构建</p>
<p><img src="/Jenkins-创建freestyle风格项目/./jenkins11.jpg" alt></p>
</li>
<li><p>验证ok</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-域名解析+Nginx代理</title>
    <url>/Jenkins-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-Nginx%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h4 id="配置Jenkins-URL"><a href="#配置Jenkins-URL" class="headerlink" title="配置Jenkins URL"></a>配置Jenkins URL</h4><p><img src="/Jenkins-域名解析-Nginx代理/./yuming1.jpg" alt></p>
<h4 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h4><p><img src="/Jenkins-域名解析-Nginx代理/./yuming2.jpg" alt></p>
<h4 id="添加Nginx解析"><a href="#添加Nginx解析" class="headerlink" title="添加Nginx解析"></a>添加Nginx解析</h4><p>nginx配置文件如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> jenkins.visualchina.com;</span><br><span class="line"> <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://jenkins.visualchina.com/jenkins;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> /jenkins &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/jenkins;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded_For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">	<span class="attribute">server_name</span> jenkins.visualchina.com;</span><br><span class="line">	<span class="attribute">access_log</span>  /var/log/nginx/jenkins.visualchina.com main;</span><br><span class="line">	<span class="attribute">error_log</span>  /var/log/nginx/jenkins.visualchina.com.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">ssl</span> <span class="literal">on</span>;                                                               <span class="comment">#ssl功能开启</span></span><br><span class="line">	<span class="attribute">ssl_certificate</span> sslfile/visualchina.pem;                         <span class="comment">#证书路径</span></span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> sslfile/visualchina.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://jenkins.visualchina.com/jenkins;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">location</span> /jenkins &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/jenkins;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded_For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-安装</title>
    <url>/Jenkins-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Jenkins-安装</p>
<p><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">官方安装文档</a></p>
<h4 id="安装部署："><a href="#安装部署：" class="headerlink" title="安装部署："></a>安装部署：</h4><ol>
<li>jdk + war包</li>
<li>jdk + tomcat + war包</li>
<li>docker</li>
</ol>
<h5 id="JDK-War包"><a href="#JDK-War包" class="headerlink" title="JDK+War包"></a>JDK+War包</h5><ol>
<li><p>安装JDK</p>
<p>源码安装：</p>
<p>oracle<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网</a>获取JDK安装包，jdk-8u211-linux-x64.tar.gz，并上传到服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务器软件目录  /data/vcg/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、解压</span></span><br><span class="line">tar zxf jdk-8u211-linux-x64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、配置环境变量 /etc/profile</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">添加如下内容：</span><br><span class="line"><span class="meta">#</span><span class="bash">jdk</span></span><br><span class="line">export JAVA_HOME=/data/vcg/jdk1.8.0_211</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jar/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、重新加载配置文件</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、验证</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>YUM安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Jenkins war包</p>
<p>Jenkins<a href="https://jenkins.io/zh/download/" target="_blank" rel="noopener">官网</a>获取下载链接，或直接下载程序包，然后scp上传到服务器待用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.176.1/jenkins.war</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动Jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins.war</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">后台启动：</span><br><span class="line">nohup java -jar jenkins.war &amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="4">
<li>访问ip:8080/jenkins</li>
</ol>
<h5 id="JDK-Tomcat-War包"><a href="#JDK-Tomcat-War包" class="headerlink" title="JDK+Tomcat+War包"></a>JDK+Tomcat+War包</h5><ol>
<li><h6 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h6><p>apache<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">官网</a>获取Tomcat安装包，apache-tomcat-8.5.42.tar.gz，并上传到服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务器软件目录  /data/vcg/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget</span></span><br><span class="line">wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.42/bin/apache-tomcat-8.5.42.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar zxf apache-tomcat-8.5.42.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv apache-tomcat-8.5.42 tomcat</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取Jenkins war包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.176.1/jenkins.war</span><br></pre></td></tr></table></figure>
</li>
<li><p>将Jenkins war包放到tomcat下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp jenkins.war /data/vcg/tomcat/webapps</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh /data/vcg/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问ip:8080/jenkins</p>
</li>
</ol>
<h5 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  --rm \  </span><br><span class="line">  -d \ </span><br><span class="line">  -p 8080:8080 \ </span><br><span class="line">  -p 50000:50000 \ </span><br><span class="line">  -v jenkins-data:/var/jenkins_home \ </span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \ </span><br><span class="line">  jenkinsci/blueocean</span><br></pre></td></tr></table></figure>
<h4 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h4><ol>
<li><p>解锁</p>
<p><img src="/Jenkins-安装/./jenkins1.jpg" alt="jenkins1"></p>
</li>
<li><p>安装插件</p>
<p><img src="/Jenkins-安装/./jenkins2.jpg" alt="jenkins2"></p>
<p><img src="/Jenkins-安装/./jenkins3.jpg" alt="jenkins3"></p>
<p>等待插件安装————————</p>
</li>
<li><p>创建管理员用户</p>
<p>一般选择 “使用admin账号继续”</p>
<p><img src="/Jenkins-安装/./jenkins4.jpg" alt="jenkins4"></p>
</li>
<li><p>安装完成</p>
<p><img src="/Jenkins-安装/./jenkins5.jpg" alt="jenkins5"></p>
</li>
</ol>
<h4 id="重置管理员密码"><a href="#重置管理员密码" class="headerlink" title="重置管理员密码"></a>重置管理员密码</h4><p>默认admin密码保存在<code>.jenkins/secrets/initialAdminPassword</code></p>
<p>登录jenkins后，在“用户列表”—&gt;”admin”—&gt;”设置”的配置页中，找到<code>Password</code>配置项，输入新的密码后保存即可。</p>
<p><img src="/Jenkins-安装/./jenkins6.jpg" alt="jenkins6"></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-插件管理</title>
    <url>/Jenkins-%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><h5 id="Web控制台安装"><a href="#Web控制台安装" class="headerlink" title="Web控制台安装"></a>Web控制台安装</h5><ol>
<li><p>进入“插件管理”界面</p>
<p><img src="/Jenkins-插件管理/./chajian1.jpg" alt></p>
</li>
<li><p>搜索插件名称</p>
<p><img src="/Jenkins-插件管理/./chajian2.jpg" alt></p>
</li>
<li><p>勾选插件，选择<code>直接安装</code></p>
<p><img src="/Jenkins-插件管理/./chajian3.jpg" alt></p>
</li>
<li><p>安装完成。（部分插件安装后需重启，勾选重启Jenkins选项即可。）</p>
</li>
</ol>
<h5 id="上传插件"><a href="#上传插件" class="headerlink" title="上传插件"></a>上传插件</h5><p>公司以前使用Swarm管理Docker容器，用到aliyun-container-service-deploy的jenkins插件更新应用</p>
<ol>
<li><p>到清华源下载插件</p>
<p><a href="https://mirror.tuna.tsinghua.edu.cn/jenkins/plugins/aliyun-container-service-deploy/latest/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/jenkins/plugins/aliyun-container-service-deploy/latest/</a></p>
</li>
<li><p>上传插件</p>
<p><img src="/Jenkins-插件管理/./chajian4.jpg" alt></p>
</li>
<li><p>等待安装</p>
<p><img src="/Jenkins-插件管理/./chajian5.jpg" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-日常维护</title>
    <url>/Jenkins-%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<ul>
<li>插件升级</li>
<li>版本升级<a id="more"></a> 
</li>
</ul>
<h4 id="插件升级"><a href="#插件升级" class="headerlink" title="插件升级"></a>插件升级</h4><ol>
<li>当看到Jenkins设置界面显示插件有可用更新时，点击<strong>管理插件</strong><img src="/Jenkins-日常维护/./jenkins维护1.jpg" alt="jenkins维护1"></li>
<li>点击<strong>全选</strong>按钮，再点击<strong>下载待重启后安装</strong><img src="/Jenkins-日常维护/./jenkins维护2.jpg" alt></li>
</ol>
<h4 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h4><ol>
<li><p>当看到右上角<strong>monitor</strong>提示有新版本更新提示后，记录版本号<img src="/Jenkins-日常维护/./jenkins维护3.jpg" alt></p>
</li>
<li><p>登录jenkins服务器终端</p>
</li>
<li><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用清华源加速</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 请对应替换版本号</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.235.1/jenkins.war</span><br></pre></td></tr></table></figure>
<p><img src="/Jenkins-日常维护/./jenkins维护4.jpg" alt></p>
</li>
<li><p>重启tomcat服务即可。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins-用户权限管理</title>
    <url>/Jenkins-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Jenkins-用户权限管理</p>
<p>使用<a href="http://wiki.jenkins-ci.org/display/JENKINS/Role+Strategy+Plugin" target="_blank" rel="noopener">Role-based Authorization Strategy</a>插件实现权限管理</p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p><img src="/Jenkins-用户权限管理/./quanxian1.jpg" alt></p>
<p>确认安装完成</p>
<p><img src="/Jenkins-用户权限管理/./quanxian2.jpg" alt></p>
<h4 id="激活基于角色的策略"><a href="#激活基于角色的策略" class="headerlink" title="激活基于角色的策略"></a>激活基于角色的策略</h4><p><img src="/Jenkins-用户权限管理/./quanxian3.jpg" alt></p>
<h4 id="自定义角色权限"><a href="#自定义角色权限" class="headerlink" title="自定义角色权限"></a>自定义角色权限</h4><p><img src="/Jenkins-用户权限管理/./quanxian4.jpg" alt></p>
<h4 id="分配角色给用户"><a href="#分配角色给用户" class="headerlink" title="分配角色给用户"></a>分配角色给用户</h4><p><img src="/Jenkins-用户权限管理/./quanxian5.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Jenkins-邮件通知</title>
    <url>/Jenkins-%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<p>Jenkins-邮件通知</p>
<h4 id="默认自带邮件功能"><a href="#默认自带邮件功能" class="headerlink" title="默认自带邮件功能"></a>默认自带邮件功能</h4><ol>
<li><h5 id="配置系统管理员邮件地址"><a href="#配置系统管理员邮件地址" class="headerlink" title="配置系统管理员邮件地址"></a>配置<code>系统管理员邮件地址</code></h5><p><img src="/Jenkins-邮件通知/./mail1.jpg" alt></p>
</li>
<li><h5 id="配置邮件通知，并发送测试邮件"><a href="#配置邮件通知，并发送测试邮件" class="headerlink" title="配置邮件通知，并发送测试邮件"></a>配置<code>邮件通知</code>，并发送测试邮件</h5><p><img src="/Jenkins-邮件通知/./mail2.jpg" alt></p>
</li>
<li><h5 id="查收邮件"><a href="#查收邮件" class="headerlink" title="查收邮件"></a>查收邮件</h5><p><img src="/Jenkins-邮件通知/./mail3.jpg" alt></p>
</li>
<li><h5 id="job中配置邮件通知"><a href="#job中配置邮件通知" class="headerlink" title="job中配置邮件通知"></a>job中配置邮件通知</h5><p><img src="/Jenkins-邮件通知/./mail4.jpg" alt></p>
</li>
<li><h5 id="查看job日志"><a href="#查看job日志" class="headerlink" title="查看job日志"></a>查看job日志</h5><p><img src="/Jenkins-邮件通知/./mail5.jpg" alt></p>
</li>
<li><h5 id="查收邮件-1"><a href="#查收邮件-1" class="headerlink" title="查收邮件"></a>查收邮件</h5><p><img src="/Jenkins-邮件通知/./mail6.jpg" alt></p>
</li>
<li><h5 id="再将第四步中错误命令修复好，重新构建"><a href="#再将第四步中错误命令修复好，重新构建" class="headerlink" title="再将第四步中错误命令修复好，重新构建"></a>再将第四步中错误命令修复好，重新构建</h5></li>
<li><h5 id="查看job日志-1"><a href="#查看job日志-1" class="headerlink" title="查看job日志"></a>查看job日志</h5><p><img src="/Jenkins-邮件通知/./mail7.jpg" alt></p>
</li>
<li><h5 id="查收恢复邮件"><a href="#查收恢复邮件" class="headerlink" title="查收恢复邮件"></a>查收恢复邮件</h5><p><img src="/Jenkins-邮件通知/./mail8.jpg" alt></p>
</li>
</ol>
<h4 id="使用Email-ext插件"><a href="#使用Email-ext插件" class="headerlink" title="使用Email-ext插件"></a>使用Email-ext插件</h4><p><a href="https://wiki.jenkins.io/display/JENKINS/Email-ext+plugin" target="_blank" rel="noopener">Email-ext+plugin</a></p>
<ol>
<li><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><p>可以通过系统管理→管理插件→可选插件，选择<strong>Email Extension</strong>插件进行安装：</p>
<p><img src="/Jenkins-邮件通知/./mail9.jpg" alt></p>
</li>
</ol>
<ol start="2">
<li><h5 id="配置发件人账号密码，smtp服务器地址，端口"><a href="#配置发件人账号密码，smtp服务器地址，端口" class="headerlink" title="配置发件人账号密码，smtp服务器地址，端口"></a>配置发件人账号密码，smtp服务器地址，端口</h5><p><img src="/Jenkins-邮件通知/./mail11.jpg" alt></p>
</li>
<li><h5 id="配置邮件文本类型，模板内容"><a href="#配置邮件文本类型，模板内容" class="headerlink" title="配置邮件文本类型，模板内容"></a>配置邮件文本类型，模板内容</h5><p><img src="/Jenkins-邮件通知/./mail12.jpg" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">(本邮件是程序自动下发，请勿回复!)<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">Jenkins地址: $HUDSON_URL<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">项目名称： $PROJECT_NAME<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">构建编号： $BUILD_NUMBER<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">构建状态： $BUILD_STATUS<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">构建日志地址： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">构建地址： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$BUILD_URL"</span>&gt;</span>$BUILD_URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">变更集： $&#123;JELLY_SCRIPT,template="html"&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="配置发送规则"><a href="#配置发送规则" class="headerlink" title="配置发送规则"></a>配置发送规则</h5><p><img src="/Jenkins-邮件通知/./mail13.jpg" alt></p>
</li>
<li><h5 id="开启邮件通知"><a href="#开启邮件通知" class="headerlink" title="开启邮件通知"></a>开启邮件通知</h5><p><code>增加构建后操作步骤</code>，选择<strong>Editable Email Notifiation</strong></p>
<p><img src="/Jenkins-邮件通知/./mail14.jpg" alt></p>
</li>
<li><h5 id="配置收件人、抄送人、是否发送附件（构建日志）等"><a href="#配置收件人、抄送人、是否发送附件（构建日志）等" class="headerlink" title="配置收件人、抄送人、是否发送附件（构建日志）等"></a>配置收件人、抄送人、是否发送附件（构建日志）等</h5><p><img src="/Jenkins-邮件通知/./mail15.jpg" alt></p>
<p><img src="/Jenkins-邮件通知/./mail16.jpg" alt></p>
</li>
<li><h5 id="查看job日志-2"><a href="#查看job日志-2" class="headerlink" title="查看job日志"></a>查看job日志</h5><p><img src="/Jenkins-邮件通知/./mail17.jpg" alt></p>
</li>
<li><h5 id="查收邮件-2"><a href="#查收邮件-2" class="headerlink" title="查收邮件"></a>查收邮件</h5><p><img src="/Jenkins-邮件通知/./mail18.jpg" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-HostAliases</title>
    <url>/Kubernetes-HostAliases/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/</a></p>
</blockquote>
<p>k8s上微服务之间可以通过service的域名来互相访问。域名的解析是一般是通过在集群中的kube-dns来完成的。</p>
<p>如需向Pod的/etc/hosts文件添加条目实现解析需求时，可以使用Pod Spec中的HostAliases字段添加自定义条目。</p>
<p>例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">service/networking/hostaliases-pod.yaml</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hostaliases-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">  hostAliases:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"foo.local"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"bar.local"</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"10.1.2.3"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"foo.remote"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"bar.remote"</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">cat-hosts</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cat</span></span><br><span class="line"><span class="attr">    args:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/etc/hosts"</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vcg-gateway</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vcg-gateway</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">vcg-gateway</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">vcg-gateway</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">aliyun_logs_vcg-gateway</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">stdout</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">&gt;-</span></span><br><span class="line">            <span class="string">registry-vpc.cn-beijing.aliyuncs.com/vcg/vcg-gateway:pro-20190423162116</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">vcg-gateway</span></span><br><span class="line"><span class="attr">          resources:</span></span><br><span class="line"><span class="attr">            limits:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">4</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">            requests:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="number">500</span><span class="string">m</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">1000</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">      hostAliases:</span></span><br><span class="line"><span class="attr">        - hostnames:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">www.vcg.com</span></span><br><span class="line"><span class="attr">          ip:</span> <span class="number">39.97</span><span class="number">.197</span><span class="number">.135</span></span><br><span class="line"><span class="attr">        - hostnames:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">www1.visualchina.com</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">www1.vcg.com</span></span><br><span class="line"><span class="attr">          ip:</span> <span class="number">39.97</span><span class="number">.21</span><span class="number">.16</span></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">registry-vpc.cn-beijing.aliyuncs.com</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">      securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes_Nginx-Ingress</title>
    <url>/Kubernetes-Nginx-Ingress/</url>
    <content><![CDATA[<h2 id="For-example"><a href="#For-example" class="headerlink" title="For example"></a>For example</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/force-ssl-redirect: <span class="string">'true'</span> <span class="comment">#代表其中跳转</span></span><br><span class="line">    nginx.ingress.kubernetes.io/service-weight: <span class="string">''</span></span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-redirect: <span class="string">'true'</span></span><br><span class="line">  creationTimestamp: <span class="string">'2018-12-25T10:29:36Z'</span></span><br><span class="line">  generation: 1</span><br><span class="line">  name: boss</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">'21429383'</span></span><br><span class="line">  selfLink: /apis/extensions/v1beta1/namespaces/default/ingresses/boss</span><br><span class="line">  uid: fa56e2a0-082f-11e9-80cf-00163e0e2421</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: boss1.vcg.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - backend:</span><br><span class="line">              serviceName: node-vcg-boss</span><br><span class="line">              servicePort: 80</span><br><span class="line">            path: /</span><br><span class="line">  tls:</span><br><span class="line">    - hosts:</span><br><span class="line">        - boss1.vcg.com</span><br><span class="line">      secretName: vcg-https</span><br><span class="line">status:</span><br><span class="line">  loadBalancer:</span><br><span class="line">    ingress:</span><br><span class="line">      - ip: 39.97.21.16</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-Secrets</title>
    <url>/Kubernetes-Secrets/</url>
    <content><![CDATA[<h4 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息"></a>背景信息</h4><p>若您需要在 Kubernetes 集群中使用一些敏感的配置，比如密码、证书等信息时，建议使用密钥（secret），即保密字典。</p>
<p>密钥有多种类型，例如：</p>
<ul>
<li>Service Account：用来访问 Kubernetes API，由 Kubernetes 自动创建，并且会自动挂载到 Pod 的/run/secrets/kubernetes.io/serviceaccount目录中。</li>
<li>Opaque：base64 编码格式的 Secret，用来存储密码、证书等敏感信息。</li>
</ul>
<p>Opaque 类型的数据是一个 map 类型，要求value 是 base64 编码格式</p>
<p>您也可通过命令行手动创建密钥，请参见 <a href="https://kubernetes.io/docs/concepts/configuration/secret/" target="_blank" rel="noopener">kubernetes secret</a> 了解更多信息。</p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret</span><br><span class="line"></span><br><span class="line">Create a secret using specified subcommand.</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  docker-registry Create a secret for use with a Docker registry</span><br><span class="line">  generic         Create a secret from a local file, directory or literal value</span><br><span class="line">  tls             Create a TLS secret</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl create secret [flags] [options]</span><br></pre></td></tr></table></figure>
<h5 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ kubectl get secrets</span><br><span class="line">NAME                               TYPE                                  DATA   AGE</span><br><span class="line">default-token-msfm9                kubernetes.io/service-account-token   3      24d</span><br><span class="line">registry.cn-beijing.aliyuncs.com   kubernetes.io/dockerconfigjson        1      24d</span><br><span class="line">veer-https                         kubernetes.io/tls                     2      3h25m</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ kubectl describe secrets veer-https</span><br><span class="line">Name:         veer-https</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/tls</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">tls.crt:  3941 bytes</span><br><span class="line">tls.key:  1676 bytes</span><br></pre></td></tr></table></figure>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete secret $NAME</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="创建SSL证书"><a href="#创建SSL证书" class="headerlink" title="创建SSL证书"></a>创建SSL证书</h5><ol>
<li><h6 id="准备公钥、私钥文件"><a href="#准备公钥、私钥文件" class="headerlink" title="准备公钥、私钥文件"></a>准备公钥、私钥文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ ls</span><br><span class="line">veer.key  veer.pem</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="创建secret"><a href="#创建secret" class="headerlink" title="创建secret"></a>创建secret</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret tls veer-https --cert=./veer.pem --key=./veer.key</span><br></pre></td></tr></table></figure>
</li>
<li><h6 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-jd@ops-jenkins-master ssl]$ kubectl get secrets veer-https</span><br><span class="line">NAME         TYPE                DATA   AGE</span><br><span class="line">veer-https   kubernetes.io/tls   2      3h22m</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes-kubectl</title>
    <url>/Kubernetes-kubectl/</url>
    <content><![CDATA[<p>管理Kubernetes集群的工具</p>
<hr>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol>
<li><h6 id="下载最新版的kubectl客户端"><a href="#下载最新版的kubectl客户端" class="headerlink" title="下载最新版的kubectl客户端"></a>下载最新版的kubectl客户端</h6><p><a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md&gt;" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md&gt;</a></p>
</li>
<li><h6 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h6><p><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/&gt;" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-kubectl/&gt;</a></p>
</li>
<li><p>验证安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kuberctl version</span><br></pre></td></tr></table></figure>
<p><img src="/Kubernetes-kubectl/kubectl-version.jpg" alt="kuberctl-version.jpg"></p>
</li>
<li><h6 id="配置集群凭证"><a href="#配置集群凭证" class="headerlink" title="配置集群凭证"></a>配置集群凭证</h6><p>您可以使用<strong>scp</strong>命令安全地将主节点的配置从 Kubernetes 集群主 VM 中的 <code>/etc/kubernetes/kube.conf</code> 复制到本地计算机的 <code>$HOME/.kube/config</code>（<code>kubectl</code> 预期凭据所在的位置）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir $HOME/.kube</span><br><span class="line">scp root@&lt;master-public-ip&gt;:/etc/kubernetes/kube.conf $HOME/.kube/config</span><br></pre></td></tr></table></figure>
<p>公有云环境也可以在集群配置页面获取到config配置</p>
</li>
<li><p>验证连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubect get all</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h5><h6 id="help-获取帮助信息"><a href="#help-获取帮助信息" class="headerlink" title="help-获取帮助信息"></a>help-获取帮助信息</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaohongye ~ ^-^ #kubectl help</span><br><span class="line">kubectl controls the Kubernetes cluster manager.</span><br><span class="line"></span><br><span class="line">Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/</span><br><span class="line"></span><br><span class="line">Basic Commands (Beginner):</span><br><span class="line">  create         Create a resource from a file or from stdin.</span><br><span class="line">  expose         使用 replication controller, service, deployment 或者 pod</span><br><span class="line">并暴露它作为一个 新的 Kubernetes Service</span><br><span class="line">  run            在集群中运行一个指定的镜像</span><br><span class="line">  set            为 objects 设置一个指定的特征</span><br><span class="line">  run-container  在集群中运行一个指定的镜像. This command is</span><br><span class="line">deprecated, use "run" instead</span><br><span class="line"></span><br><span class="line">Basic Commands (Intermediate):</span><br><span class="line">  get            显示一个或更多 resources</span><br><span class="line">  explain        查看资源的文档</span><br><span class="line">  edit           在服务器上编辑一个资源</span><br><span class="line">  delete         Delete resources by filenames, stdin, resources and names, or</span><br><span class="line">by resources and label selector</span><br><span class="line"></span><br><span class="line">Deploy Commands:</span><br><span class="line">  rollout        Manage the rollout of a resource</span><br><span class="line">  rolling-update 完成指定的 ReplicationController 的滚动升级</span><br><span class="line">  scale          为 Deployment, ReplicaSet, Replication Controller 或者 Job</span><br><span class="line">设置一个新的副本数量</span><br><span class="line">  autoscale      自动调整一个 Deployment, ReplicaSet, 或者</span><br><span class="line">ReplicationController 的副本数量</span><br><span class="line"></span><br><span class="line">Cluster Management Commands:</span><br><span class="line">  certificate    修改 certificate 资源.</span><br><span class="line">  cluster-info   显示集群信息</span><br><span class="line">  top            Display Resource (CPU/Memory/Storage) usage.</span><br><span class="line">  cordon         标记 node 为 unschedulable</span><br><span class="line">  uncordon       标记 node 为 schedulable</span><br><span class="line">  drain          Drain node in preparation for maintenance</span><br><span class="line">  taint          更新一个或者多个 node 上的 taints</span><br><span class="line"></span><br><span class="line">Troubleshooting and Debugging Commands:</span><br><span class="line">  describe       显示一个指定 resource 或者 group 的 resources 详情</span><br><span class="line">  logs           输出容器在 pod 中的日志</span><br><span class="line">  attach         Attach 到一个运行中的 container</span><br><span class="line">  exec           在一个 container 中执行一个命令</span><br><span class="line">  port-forward   Forward one or more local ports to a pod</span><br><span class="line">  proxy          运行一个 proxy 到 Kubernetes API server</span><br><span class="line">  cp             复制 files 和 directories 到 containers</span><br><span class="line">和从容器中复制 files 和 directories.</span><br><span class="line">  auth           Inspect authorization</span><br><span class="line"></span><br><span class="line">Advanced Commands:</span><br><span class="line">  apply          通过文件名或标准输入流(stdin)对资源进行配置</span><br><span class="line">  patch          使用 strategic merge patch 更新一个资源的 field(s)</span><br><span class="line">  replace        通过 filename 或者 stdin替换一个资源</span><br><span class="line">  convert        在不同的 API versions 转换配置文件</span><br><span class="line"></span><br><span class="line">Settings Commands:</span><br><span class="line">  label          更新在这个资源上的 labels</span><br><span class="line">  annotate       更新一个资源的注解</span><br><span class="line">  completion     Output shell completion code for the specified shell (bash or</span><br><span class="line">zsh)</span><br><span class="line"></span><br><span class="line">Other Commands:</span><br><span class="line">  api-versions   Print the supported API versions on the server, in the form of</span><br><span class="line">"group/version"</span><br><span class="line">  config         修改 kubeconfig 文件</span><br><span class="line">  help           Help about any command</span><br><span class="line">  plugin         Runs a command-line plugin</span><br><span class="line">  version        输出 client 和 server 的版本信息</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl [flags] [options]</span><br><span class="line"></span><br><span class="line">Use "kubectl &lt;command&gt; --help" for more information about a given command.</span><br><span class="line">Use "kubectl options" for a list of global command-line options (applies to all</span><br><span class="line">commands).</span><br></pre></td></tr></table></figure>
<h6 id="get-获取信息"><a href="#get-获取信息" class="headerlink" title="get-获取信息"></a>get-获取信息</h6><p>Display one or many resources</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Examples:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all pods <span class="keyword">in</span> ps output format.</span></span><br><span class="line">  kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all pods <span class="keyword">in</span> ps output format with more information (such as node name).</span></span><br><span class="line">  kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List a single replication controller with specified NAME <span class="keyword">in</span> ps output format.</span></span><br><span class="line">  kubectl get replicationcontroller web</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List a single pod <span class="keyword">in</span> JSON output format.</span></span><br><span class="line">  kubectl get -o json pod web-pod-13je7</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List a pod identified by <span class="built_in">type</span> and name specified <span class="keyword">in</span> <span class="string">"pod.yaml"</span> <span class="keyword">in</span> JSON output format.</span></span><br><span class="line">  kubectl get -f pod.yaml -o json</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> Return only the phase value of the specified pod.</span></span><br><span class="line">  kubectl get -o template pod/web-pod-13je7 --template=&#123;&#123;.status.phase&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all replication controllers and services together <span class="keyword">in</span> ps output format.</span></span><br><span class="line">  kubectl get rc,services</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List one or more resources by their <span class="built_in">type</span> and names.</span></span><br><span class="line">  kubectl get rc/web service/frontend pods/web-pod-13je7</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> List all resources with different types.</span></span><br><span class="line">  kubectl get all</span><br></pre></td></tr></table></figure>
<h6 id="scale-扩缩容"><a href="#scale-扩缩容" class="headerlink" title="scale-扩缩容"></a>scale-扩缩容</h6><p>Set a new size for a Deployment, ReplicaSet, Replication Controller, or StatefulSet.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Examples:</span><br><span class="line">  # Scale a replicaset named &apos;foo&apos; to 3.</span><br><span class="line">  kubectl scale --replicas=3 rs/foo</span><br><span class="line"></span><br><span class="line">  # Scale a resource identified by type and name specified in &quot;foo.yaml&quot; to 3.</span><br><span class="line">  kubectl scale --replicas=3 -f foo.yaml</span><br><span class="line"></span><br><span class="line">  # If the deployment named mysql&apos;s current size is 2, scale mysql to 3.</span><br><span class="line">  kubectl scale --current-replicas=2 --replicas=3 deployment/mysql</span><br><span class="line"></span><br><span class="line">  # Scale multiple replication controllers.</span><br><span class="line">  kubectl scale --replicas=5 rc/foo rc/bar rc/baz</span><br><span class="line"></span><br><span class="line">  # Scale statefulset named &apos;web&apos; to 3.</span><br><span class="line">  kubectl scale --replicas=3 statefulset/web</span><br><span class="line">  </span><br><span class="line">  kubectl scale Deployment node-vcg-web --replicas=1</span><br><span class="line">  kubectl scale Deployment node-vcg-web --replicas=10</span><br></pre></td></tr></table></figure>
<p>批量扩缩容    </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in `kubectl get deployment | awk '&#123;print $1&#125;' |grep -v NAME`; do</span><br><span class="line">   kubectl scale Deployment $i --replicas=1</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h6 id="exec-在container中执行命令"><a href="#exec-在container中执行命令" class="headerlink" title="exec-在container中执行命令"></a>exec-在container中执行命令</h6><p>Execute a command in a container.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">  -c, --container='': Container name. If omitted, the first container in the pod will be chosen</span><br><span class="line">  -p, --pod='': Pod name</span><br><span class="line">  -i, --stdin=false: Pass stdin to the container</span><br><span class="line">  -t, --tty=false: Stdin is a TTY</span><br><span class="line">Examples:</span><br><span class="line">  kubectl exec 123456-7890 -c ruby-container -it -- bash -il</span><br><span class="line">Usage:</span><br><span class="line">  kubectl exec POD [-c CONTAINER] -- COMMAND [args...] [options]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-tree命令</title>
    <url>/Linux-tree%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>tree</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>tree命令的中文意思为“树”，功能是以树形结构列出指定目录下的所有内容，包括所有文件、子目录及子目录里的目录和文件。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y tree</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a 显示所有文件和目录。</span><br><span class="line">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">-d 显示目录名称而非内容。</span><br><span class="line">-D 列出文件或目录的更改时间。</span><br><span class="line">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class="line">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot;号。</span><br><span class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class="line">-i 不以阶梯状列出文件或目录名称。</span><br><span class="line">-I 不显示符合范本样式的文件或目录名称。</span><br><span class="line">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class="line">-n 不在文件和目录清单加上色彩。</span><br><span class="line">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class="line">-p 列出权限标示。</span><br><span class="line">-P 只显示符合范本样式的文件或目录名称。</span><br><span class="line">-q 用&quot;?&quot;号取代控制字符，列出文件和目录名称。</span><br><span class="line">-s 列出文件或目录大小。</span><br><span class="line">-t 用文件和目录的更改时间排序。</span><br><span class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ops-jenkins-master test]# tree k8s/</span><br><span class="line">k8s/</span><br><span class="line">└── ingress</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    ├── nginx.tmpl</span><br><span class="line">    └── nginx.tmpl-bak</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Linux操作系统加固</title>
    <url>/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<blockquote>
<p>引自阿里云<a href="https://help.aliyun.com/knowledge_detail/49809.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/49809.html</a>&gt;</p>
</blockquote>
<p>本帮助手册旨在指导系统管理人员或安全检查人员进行Linux操作系统的安全合规性检查和加固。</p>
<hr>
<h3 id="1-账号和口令"><a href="#1-账号和口令" class="headerlink" title="1. 账号和口令"></a>1. 账号和口令</h3><h4 id="1-1-禁用或删除无用账号"><a href="#1-1-禁用或删除无用账号" class="headerlink" title="1.1 禁用或删除无用账号"></a>1.1 禁用或删除无用账号</h4><p>减少系统无用账号，降低安全风险。</p>
<p><strong>操作步骤</strong></p>
<ul>
<li>使用命令 <code>userdel &lt;用户名&gt;</code> 删除不必要的账号。</li>
<li>使用命令 <code>passwd -l &lt;用户名&gt;</code> 锁定不必要的账号。</li>
<li>使用命令 <code>passwd -u &lt;用户名&gt;</code> 解锁必要的账号。</li>
</ul>
<h4 id="1-2-检查特殊账号"><a href="#1-2-检查特殊账号" class="headerlink" title="1.2 检查特殊账号"></a>1.2 检查特殊账号</h4><p>检查是否存在空口令和root权限的账号。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li>查看空口令和root权限账号，确认是否存在异常账号：<ul>
<li>使用命令 <code>awk -F: &#39;($2==&quot;&quot;)&#39; /etc/shadow</code> 查看空口令账号。</li>
<li>使用命令 <code>awk -F: &#39;($3==0)&#39; /etc/passwd</code> 查看UID为零的账号。</li>
</ul>
</li>
<li>加固空口令账号：<ul>
<li>使用命令 <code>passwd &lt;用户名&gt;</code> 为空口令账号设定密码。</li>
<li>确认UID为零的账号只有root账号。</li>
</ul>
</li>
</ol>
<h4 id="1-3-添加口令策略"><a href="#1-3-添加口令策略" class="headerlink" title="1.3 添加口令策略"></a>1.3 添加口令策略</h4><p>加强口令的复杂度等，降低被猜解的可能性。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li><p>使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/login.defs</span><br></pre></td></tr></table></figure>
<p>修改配置文件。</p>
<ul>
<li><code>PASS_MAX_DAYS 90 #新建用户的密码最长使用天数</code></li>
<li><code>PASS_MIN_DAYS 0 #新建用户的密码最短使用天数</code></li>
<li><code>PASS_WARN_AGE 7 #新建用户的密码到期提前提醒天数</code></li>
</ul>
</li>
<li><p>使用chage命令修改用户设置。<br>例如，<code>chage -m 0 -M 30 -E 2000-01-01 -W 7 &lt;用户名&gt;</code>表示将此用户的密码最长使用天数设为30，最短使用天数设为0，密码2000年1月1日过期，过期前七天警告用户。</p>
</li>
<li><p>设置连续输错三次密码，账号锁定五分钟。使用命令 <code>vi /etc/pam.d/common-auth</code>修改配置文件，在配置文件中添加 <code>auth required pam_tally.so onerr=fail deny=3 unlock_time=300</code>。</p>
</li>
</ol>
<h4 id="1-4-限制用户su"><a href="#1-4-限制用户su" class="headerlink" title="1.4 限制用户su"></a>1.4 限制用户su</h4><p>限制能su到root的用户。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/pam.d/su</code>修改配置文件，在配置文件中添加行。例如，只允许test组用户su到root，则添加 <code>auth required pam_wheel.so group=test</code>。</p>
<h4 id="1-4-禁止root用户直接登录"><a href="#1-4-禁止root用户直接登录" class="headerlink" title="1.4 禁止root用户直接登录"></a>1.4 禁止root用户直接登录</h4><p>限制root用户直接登录。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li>创建普通权限账号并配置密码,防止无法远程登录;</li>
<li>使用命令 <code>vi /etc/ssh/sshd_config</code>修改配置文件将PermitRootLogin的值改成no，并保存，然后使用<code>service sshd restart</code>重启服务。</li>
</ol>
<h3 id="2-服务"><a href="#2-服务" class="headerlink" title="2. 服务"></a>2. 服务</h3><h4 id="2-1-关闭不必要的服务"><a href="#2-1-关闭不必要的服务" class="headerlink" title="2.1 关闭不必要的服务"></a>2.1 关闭不必要的服务</h4><p>关闭不必要的服务（如普通服务和xinetd服务），降低风险。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令<code>systemctl disable &lt;服务名&gt;</code>设置服务在开机时不自动启动。</p>
<p><strong>说明</strong>： 对于部分老版本的Linux操作系统（如CentOS 6），可以使用命令<code>chkconfig --level &lt;init级别&gt; &lt;服务名&gt; off</code>设置服务在指定init级别下开机时不自动启动。</p>
<h4 id="2-2-SSH服务安全"><a href="#2-2-SSH服务安全" class="headerlink" title="2.2 SSH服务安全"></a>2.2 SSH服务安全</h4><p>对SSH服务进行安全加固，防止暴力破解成功。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vim /etc/ssh/sshd_config</code> 编辑配置文件。</p>
<ul>
<li>不允许root账号直接登录系统。<br>设置 PermitRootLogin 的值为 no。</li>
<li>修改SSH使用的协议版本。<br>设置 Protocol 的版本为 2。</li>
<li>修改允许密码错误次数（默认6次）。<br>设置 MaxAuthTries 的值为 3。</li>
</ul>
<p>配置文件修改完成后，重启sshd服务生效。</p>
<h3 id="3-文件系统"><a href="#3-文件系统" class="headerlink" title="3. 文件系统"></a>3. 文件系统</h3><h4 id="3-1-设置umask值"><a href="#3-1-设置umask值" class="headerlink" title="3.1 设置umask值"></a>3.1 设置umask值</h4><p>设置默认的umask值，增强安全性。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/profile</code> 修改配置文件，添加行 <code>umask 027</code>， 即新创建的文件属主拥有读写执行权限，同组用户拥有读和执行权限，其他用户无权限。</p>
<h4 id="3-2-设置登录超时"><a href="#3-2-设置登录超时" class="headerlink" title="3.2 设置登录超时"></a>3.2 设置登录超时</h4><p>设置系统登录后，连接超时时间，增强安全性。</p>
<p><strong>操作步骤</strong></p>
<p>使用命令 <code>vi /etc/profile</code> 修改配置文件，将以 <code>TMOUT=</code> 开头的行注释，设置为<code>TMOUT=180</code>，即超时时间为三分钟。</p>
<h3 id="4-日志"><a href="#4-日志" class="headerlink" title="4. 日志"></a>4. 日志</h3><h4 id="4-1-syslogd日志"><a href="#4-1-syslogd日志" class="headerlink" title="4.1 syslogd日志"></a>4.1 syslogd日志</h4><p>启用日志功能，并配置日志记录。</p>
<p><strong>操作步骤</strong></p>
<p>Linux系统默认启用以下类型日志：</p>
<ul>
<li>系统日志（默认）/var/log/messages</li>
<li>cron日志（默认）/var/log/cron</li>
<li>安全日志（默认）/var/log/secure</li>
</ul>
<p><strong>注意</strong>：部分系统可能使用syslog-ng日志，配置文件为：/etc/syslog-ng/syslog-ng.conf。</p>
<p>您可以根据需求配置详细日志。</p>
<h4 id="4-2-记录所有用户的登录和操作日志"><a href="#4-2-记录所有用户的登录和操作日志" class="headerlink" title="4.2 记录所有用户的登录和操作日志"></a>4.2 记录所有用户的登录和操作日志</h4><p>通过脚本代码实现记录所有用户的登录操作日志，防止出现安全事件后无据可查。</p>
<p><strong>操作步骤</strong></p>
<ol>
<li><p>运行 <code>[root@xxx /]# vim /etc/profile</code>打开配置文件。</p>
</li>
<li><p>在配置文件中输入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history</span><br><span class="line">USER=`whoami`</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk '&#123;print $NF&#125;'|sed -e 's/[()]//g'`</span><br><span class="line">if [ "$USER_IP" = "" ]; then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">if [ ! -d /var/log/history ]; then</span><br><span class="line">mkdir /var/log/history</span><br><span class="line">chmod 777 /var/log/history</span><br><span class="line">fi</span><br><span class="line">if [ ! -d /var/log/history/$&#123;LOGNAME&#125; ]; then</span><br><span class="line">mkdir /var/log/history/$&#123;LOGNAME&#125;</span><br><span class="line">chmod 300 /var/log/history/$&#123;LOGNAME&#125;</span><br><span class="line">fi</span><br><span class="line">export HISTSIZE=4096</span><br><span class="line">DT=`date +"%Y%m%d_%H:%M:%S"`</span><br><span class="line">export HISTFILE="/var/log/history/$&#123;LOGNAME&#125;/$&#123;USER&#125;@$&#123;USER_IP&#125;_$DT"</span><br><span class="line">chmod 600 /var/log/history/$&#123;LOGNAME&#125;/*history* 2&gt;/dev/null</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 <code>[root@xxx /]# source /etc/profile</code> 加载配置生效。<br><strong>注意</strong>： /var/log/history 是记录日志的存放位置，可以自定义。</p>
</li>
</ol>
<p>通过上述步骤，可以在 /var/log/history 目录下以每个用户为名新建一个文件夹，每次用户退出后都会产生以用户名、登录IP、时间的日志文件，包含此用户本次的所有操作（root用户除外）。</p>
<p>同时，建议您使用OSS服务收集存储日志。</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题增加动态背景并设置透明化</title>
    <url>/Next%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%80%8F%E6%98%8E%E5%8C%96/</url>
    <content><![CDATA[<h5 id="编辑主题配置"><a href="#编辑主题配置" class="headerlink" title="编辑主题配置"></a>编辑主题配置</h5><p>编辑 themes/next/_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#canvas_nest: false</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &apos;0,0,255&apos; # RGB values, use &apos;,&apos; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # the number of lines</span><br></pre></td></tr></table></figure>
<h5 id="重新部署"><a href="#重新部署" class="headerlink" title="重新部署"></a>重新部署</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus手动上传依赖包</title>
    <url>/Nexus%E6%89%8B%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>Nexus手动上传依赖包</p>
<ol>
<li>选择仓库Repositories</li>
<li>Artifact Upload，填写信息，选择文件</li>
<li>验证</li>
</ol>
<p><img src="/Nexus手动上传依赖包/./WechatIMG1.png" alt="WechatIMG1"></p>
<p><img src="/Nexus手动上传依赖包/./WechatIMG2.png" alt="WechatIMG2"></p>
]]></content>
  </entry>
  <entry>
    <title>Nginx-ingress controller部署</title>
    <url>/Nginx-ingress-controller%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://docs.jdcloud.com/cn/jcs-for-kubernetes/deploy-ingress-nginx-controller" target="_blank" rel="noopener">https://docs.jdcloud.com/cn/jcs-for-kubernetes/deploy-ingress-nginx-controller</a></p>
</blockquote>
<p>Ingress 是从Kubernetes集群外部访问集群内部服务的入口，概念示意可参考下方说明。你可以给Ingress配置提供外部可访问的URL、负载均衡、SSL、基于名称的虚拟主机等。用户通过POST Ingress资源到API server的方式来请求ingress。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure>
<p>Ingress controller负责实现Ingress。Ingress controller在Kubernetes集群中默认不会自动启用，您可以在一个pod中部署任意类型的自定义Ingress Controller。本文将以Nginx-ingress controller为例，说明Controller部署和Ingress定义。更多外部类型的Ingresss Controller参考<a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noopener">Kubernetes官方文档</a>。</p>
<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol>
<li><h5 id="从github下载nginx-ingress-controller最新的安装部署文件-并将部署文件解压缩到本地目录："><a href="#从github下载nginx-ingress-controller最新的安装部署文件-并将部署文件解压缩到本地目录：" class="headerlink" title="从github下载nginx-ingress controller最新的安装部署文件,并将部署文件解压缩到本地目录："></a>从github下载nginx-ingress controller最新的安装部署文件,并将部署文件解压缩到本地目录：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/nginxinc/kubernetes-ingress/archive/v1.4.5.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf v1.4.5.tar.gz</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：本文说明在1.12.3版本的集群上如何部署nginx-ingress controller，如集群版本不同，选择其他适合的ginx-ingress controller安装部署文件。</p>
</li>
</ol>
<ol start="2">
<li><h5 id="进入解压缩后的nginx-ingress-controller安装目录；"><a href="#进入解压缩后的nginx-ingress-controller安装目录；" class="headerlink" title="进入解压缩后的nginx-ingress controller安装目录；"></a>进入解压缩后的nginx-ingress controller安装目录；</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd kubernetes-ingress-1.4.5/deployments</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="安装nginx-ingress-controller"><a href="#安装nginx-ingress-controller" class="headerlink" title="安装nginx-ingress controller"></a>安装nginx-ingress controller</h4><ol>
<li><h5 id="为nginx-ingress-controller创建一个namespace和service-account："><a href="#为nginx-ingress-controller创建一个namespace和service-account：" class="headerlink" title="为nginx-ingress controller创建一个namespace和service account："></a>为nginx-ingress controller创建一个namespace和service account：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f common/ns-and-sa.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中："><a href="#为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中：" class="headerlink" title="为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中："></a>为NGINX默认Server配置TLS证书和key，并将TLS证书和key保存到secret中：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f common/default-server-secret.yaml</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：建议使用合适的TLS证书和key替换default-server-secret.yaml文件中自签发的证书和key。</p>
</li>
</ol>
<ol start="3">
<li><h5 id="创建config-map保存NGINX的自定义配置："><a href="#创建config-map保存NGINX的自定义配置：" class="headerlink" title="创建config map保存NGINX的自定义配置："></a>创建config map保存NGINX的自定义配置：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f common/nginx-config.yaml</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：目前提供的config map中的data为空，您可以按需添加自定义配置。</p>
</li>
</ol>
<ol start="4">
<li><h5 id="为第1步中创建的service-account配置RBAC："><a href="#为第1步中创建的service-account配置RBAC：" class="headerlink" title="为第1步中创建的service account配置RBAC："></a>为第1步中创建的service account配置RBAC：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f rbac/rbac.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="以Deployment的方式部署nginx-ingress-controller"><a href="#以Deployment的方式部署nginx-ingress-controller" class="headerlink" title="以Deployment的方式部署nginx-ingress controller:"></a>以Deployment的方式部署nginx-ingress controller:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment/nginx-ingress.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="执行如下命令，确定部署nginx-ingress-controller的Deployment运行正常："><a href="#执行如下命令，确定部署nginx-ingress-controller的Deployment运行正常：" class="headerlink" title="执行如下命令，确定部署nginx-ingress controller的Deployment运行正常："></a>执行如下命令，确定部署nginx-ingress controller的Deployment运行正常：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> kubectl get deployment -n nginx-ingress</span><br><span class="line"> </span><br><span class="line">NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line"> nginx-ingress   1         1         1            1           24d</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="创建ingress的LoadBalance"><a href="#创建ingress的LoadBalance" class="headerlink" title="创建ingress的LoadBalance"></a>创建ingress的LoadBalance</h5><p>在 Kubernetes集群中，每个Pod都具有唯一的内部 IP 地址，但是Deployment中的Pod随时可能被删除或创建，导致Pod IP地址不断变化。因此需要创建一个Service对外暴露Pod中的应用。Service具有唯一的固定IP地址且能够为后端添加的成员Pod提供负载均衡。在京东云Kubernetes集群中您可以使用LoadBalance类型的Service，为Service关联创建一个应用负载均衡，并通过负载均衡绑定的公网IP，将Service后端关联的nginx-ingress controller应用暴露到公网：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress</span>       <span class="comment">#建议Service使用与nginx-ingress controller对应的Deployment名称相同的名称</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">     targetPort:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">     protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-ingress</span></span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>：本例使用80和443端口绑定nginx-ingress controller应用</p>
<p>将上述Service定义到ingress.yaml文件，执行如下命令创建对应的Service：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create -f ingress.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="获取公网IP"><a href="#获取公网IP" class="headerlink" title="获取公网IP"></a>获取公网IP</h5><p>等待一段时间，确定Service已经配置完成，并获取Service上配置的External IP字段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get svc -n nginx-ingress</span><br><span class="line"></span><br><span class="line">NAME            TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE</span><br><span class="line">nginx-ingress   LoadBalancer   192.168.58.218   114.67.80.218   80:32436/TCP,443:30110/TCP   3h13m</span><br></pre></td></tr></table></figure>
<p> <strong>说明</strong>：Service的External IP将作为nginx-ingress controller的VIP，为集群中使用nginx-ingress controller的Ingress提供公网访问入口</p>
</li>
<li><h5 id="关联的External-IP作为公网入口IP"><a href="#关联的External-IP作为公网入口IP" class="headerlink" title="关联的External IP作为公网入口IP"></a>关联的External IP作为公网入口IP</h5><p>最后，在Ingress controller的Deployment部署文件nginx-ingress.yaml中增加一对环境变量”-args -external-service=nginx-ingress”,配置Ingress controller使用Service名称关联的External IP作为公网入口IP：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">-nginx-configmaps=$(POD_NAMESPACE)/nginx-config</span></span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">-default-server-tls-secret=$(POD_NAMESPACE)/default-server-secret</span></span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">-external-service=nginx-ingress</span>       <span class="comment">#新增内容</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deployment/nginx-ingress.yaml        #重新部署nginx-ingress controller</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="验证Pod"><a href="#验证Pod" class="headerlink" title="验证Pod"></a>验证Pod</h5><p>执行如下命令确定nginx-ingress controller相关的Pod运行正常，即可完成nginx ingress controller部署：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get pod -n nginx-ingress</span><br><span class="line"></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-f67b87b88-5cspd   1/1     Running   0          3h11m</span><br><span class="line">nginx-ingress-f67b87b88-n7qnw   1/1     Running   0          3h13m</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="示例应用"><a href="#示例应用" class="headerlink" title="示例应用"></a>示例应用</h4><p>例如：配置www2.veer.com的ingress配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cms-veer</span>       <span class="comment"># 变量：名字</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">www2.veer.com</span>   <span class="comment"># 变量：url</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">node-vcg-veer-pre</span> <span class="comment"># 变量：后端应用service</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span>      <span class="comment"># 变量：后端应用service端口</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  tls:</span></span><br><span class="line"><span class="attr">    - hosts:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">www2.veer.com</span>       </span><br><span class="line"><span class="attr">      secretName:</span> <span class="string">veer-https</span>    <span class="comment"># 变量：ssl证书</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
        <tag>Ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-日志切割</title>
    <url>/Nginx-%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
    <content><![CDATA[<p>nginx日志按天进行切割，通过写shell脚本，创建以日期命名文件</p>
<hr>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义nginx 日志路径</span></span><br><span class="line">LOG_PATH="/var/gb/logs/"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义nginx 访问日志文件名称</span></span><br><span class="line">ACCESS_LOG="access.log"</span><br><span class="line">ERROR_LOG="error.log"</span><br><span class="line"></span><br><span class="line">for i in `find  $LOG_PATH -name "$ACCESS_LOG"`; do</span><br><span class="line">    cd $(dirname $i)</span><br><span class="line">    # 切割access日志</span><br><span class="line">    if [[ -f $ACCESS_LOG ]]; then</span><br><span class="line">        cp &#123;,$(date +%F)-&#125;$&#123;ACCESS_LOG&#125;</span><br><span class="line">        : &gt; $ACCESS_LOG</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    # 如果error日志&gt;20m，切</span><br><span class="line">    if [[ -f $ERROR_LOG ]]; then</span><br><span class="line">        ERROR_SIZE=`ls -l $ERROR_LOG | awk '&#123; print $5 &#125;'`</span><br><span class="line">        if [[ $ERROR_SIZE -gt 20971520 ]]; then</span><br><span class="line">            cp &#123;,$(date +%F)-&#125;$&#123;ERROR_LOG&#125;</span><br><span class="line">            : &gt; $&#123;ERROR_LOG&#125;</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找nginx 日志目录下7天前的日志并删除</span></span><br><span class="line">find $&#123;LOG_PATH&#125; -type f -name "*-$&#123;ACCESS_LOG&#125;" -mtime +7 -delete</span><br><span class="line">find $&#123;LOG_PATH&#125; -type f -name "*-$&#123;ERROR_LOG&#125;"  -mtime +7 -delete</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Nginx_配置SSL证书</title>
    <url>/Nginx-%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<ol>
<li><h4 id="获取证书并上传到Ngx服务器"><a href="#获取证书并上传到Ngx服务器" class="headerlink" title="获取证书并上传到Ngx服务器"></a>获取证书并上传到Ngx服务器</h4></li>
</ol>
<ol start="2">
<li><h4 id="检查Ngx是否安装–with-http-ssl-module模块"><a href="#检查Ngx是否安装–with-http-ssl-module模块" class="headerlink" title="检查Ngx是否安装–with-http_ssl_module模块"></a>检查Ngx是否安装–with-http_ssl_module模块</h4></li>
</ol>
<ol start="3">
<li><h4 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h4></li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> <span class="regexp">*.zhaohongye.com</span>;</span><br><span class="line">	<span class="comment">#return 301 https://$host$request_uri;</span></span><br><span class="line">	<span class="attribute">return</span> <span class="number">301</span> https://zhaohongye.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">	<span class="attribute">server_name</span> zhaohongye.com www.zhaohongye.com;</span><br><span class="line">	<span class="attribute">access_log</span>  /var/log/nginx/zhy.log main;</span><br><span class="line">	<span class="attribute">error_log</span>  /var/log/nginx/zhy.<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">ssl</span> <span class="literal">on</span>;   <span class="comment">#ssl功能开启</span></span><br><span class="line">	<span class="attribute">ssl_certificate</span> sslfile/2027481_zhaohongye.com.pem;</span><br><span class="line">	<span class="attribute">ssl_certificate_key</span> sslfile/2027481_zhaohongye.com.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">		<span class="attribute">proxy_redirect</span>          http:// https://;</span><br><span class="line">		<span class="attribute">proxy_pass</span>              http://127.0.0.1:4000; </span><br><span class="line">		<span class="attribute">client_max_body_size</span>    <span class="number">10M</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">		<span class="attribute">proxy_set_header</span>        X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">		<span class="comment"># Required for new HTTP-based CLI</span></span><br><span class="line">		<span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">		<span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><h4 id="https访问验证"><a href="#https访问验证" class="headerlink" title="https访问验证"></a>https访问验证</h4></li>
</ol>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-脚本调用阿里SDK实现控制SLB</title>
    <url>/Python-%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8CSDK%E5%AE%9E%E7%8E%B0%E6%8E%A7%E5%88%B6SLB/</url>
    <content><![CDATA[<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>今天哥们提了一个需求，想实现调阿里云SLB的SDK实现脚本调整权重、增加或移除后端ECS实例</p>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#安装python3和pip</span></span><br><span class="line"><span class="comment">#安装以下sdk模块</span></span><br><span class="line"><span class="comment">#pip install aliyun-python-sdk-core-v3</span></span><br><span class="line"><span class="comment">#pip install aliyun-python-sdk-slb</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> DescribeLoadBalancersRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> DescribeLoadBalancerAttributeRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> SetBackendServersRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> AddBackendServersRequest</span><br><span class="line"><span class="keyword">from</span> aliyunsdkslb.request.v20140515 <span class="keyword">import</span> RemoveBackendServersRequest</span><br><span class="line"></span><br><span class="line"><span class="comment">#  需填写ak信息，可用区</span></span><br><span class="line">AccessKey=<span class="string">''</span></span><br><span class="line">AccessKeySecret=<span class="string">''</span></span><br><span class="line">RegionId = <span class="string">"cn-beijing"</span></span><br><span class="line"></span><br><span class="line">client = AcsClient(AccessKey,AccessKeySecret,RegionId);</span><br><span class="line">helpInfo=<span class="string">'''</span></span><br><span class="line"><span class="string">Basic Commands :</span></span><br><span class="line"><span class="string">  get            获取SLB信息</span></span><br><span class="line"><span class="string">  edit           配置SLB的后端权重</span></span><br><span class="line"><span class="string">  add            添加SLB的后端实例</span></span><br><span class="line"><span class="string">  remove         删除SLB的后端实例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    获取所有实例的信息</span></span><br><span class="line"><span class="string">        python slb-0604.py get all</span></span><br><span class="line"><span class="string">    获取某一实例的信息</span></span><br><span class="line"><span class="string">        python slb-0604.py get lb-2zedfhvgznrm7eqbr00uv</span></span><br><span class="line"><span class="string">    编辑单个权重</span></span><br><span class="line"><span class="string">        python slb-0604.py edit lb-2zedfhvgznrm7eqbr00uv [&#123;'ServerId': 'i-2zedna91yczcq12zm60q', 'Weight': 99, 'Type': 'ecs'&#125;]</span></span><br><span class="line"><span class="string">    编辑多个权重（最多20个）</span></span><br><span class="line"><span class="string">        python slb-0604.py edit lb-2zedfhvgznrm7eqbr00uv [&#123;"ServerId":"i-2zej4lxhjoq1icue6kup","Weight":"100"&#125;,&#123;"ServerId":"i-2ze1u9ywulp5pbvvc7hv","Weight":"100"&#125;]</span></span><br><span class="line"><span class="string">    添加单个后端ecs</span></span><br><span class="line"><span class="string">        python slb-0604.py add lb-2zedfhvgznrm7eqbr00uv [&#123;"ServerId":"i-2ze1u9ywulp5pbvvc7hv","Weight":"100"&#125;]</span></span><br><span class="line"><span class="string">    添加多个后端ecs</span></span><br><span class="line"><span class="string">        python slb-0604.py add lb-2zedfhvgznrm7eqbr00uv [&#123;"ServerId":"i-2zej4lxhjoq1icue6kup","Weight":"100"&#125;,&#123;"ServerId":"i-2ze1u9ywulp5pbvvc7hv","Weight":"100"&#125;]</span></span><br><span class="line"><span class="string">    删除后端ecs</span></span><br><span class="line"><span class="string">        python slb-0604.py remove lb-2zedfhvgznrm7eqbr00uv [&#123;"ServerId":"i-2zej4lxhjoq1icue6kup","Weight":"100"&#125;,&#123;"ServerId":"i-2ze1u9ywulp5pbvvc7hv","Weight":"100"&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(helpInfo)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DescribeLoadBalancers</span><span class="params">(resource)</span>:</span></span><br><span class="line">    request = DescribeLoadBalancersRequest.DescribeLoadBalancersRequest()</span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    SLBInfo = json.loads(response)</span><br><span class="line">    LoadBalancerIdList = []</span><br><span class="line">    <span class="keyword">for</span> SLBInstance <span class="keyword">in</span> SLBInfo[<span class="string">'LoadBalancers'</span>][<span class="string">'LoadBalancer'</span>]:</span><br><span class="line">        LoadBalancerIdList.append(SLBInstance[<span class="string">'LoadBalancerId'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resource == <span class="string">'all'</span>:</span><br><span class="line">        Ali_Slb_Info = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> SLBInstance <span class="keyword">in</span> SLBInfo[<span class="string">'LoadBalancers'</span>][<span class="string">'LoadBalancer'</span>]:</span><br><span class="line">            request = DescribeLoadBalancerAttributeRequest.DescribeLoadBalancerAttributeRequest()</span><br><span class="line">            request.set_LoadBalancerId(SLBInstance[<span class="string">'LoadBalancerId'</span>])</span><br><span class="line">            response = client.do_action_with_exception(request)</span><br><span class="line">            Ali_Slb_Info[SLBInstance[<span class="string">'LoadBalancerId'</span>]] = json.loads(response.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        print(LoadBalancerIdList)</span><br><span class="line">    <span class="keyword">elif</span> resource <span class="keyword">in</span> LoadBalancerIdList:</span><br><span class="line">        request = DescribeLoadBalancerAttributeRequest.DescribeLoadBalancerAttributeRequest()</span><br><span class="line">        request.set_LoadBalancerId(resource)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        response = json.loads(response.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        print(response[<span class="string">'BackendServers'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入错误,请输入 all 或 SLB实例ID ！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SetBackendServers</span><span class="params">(resource,BackendServers)</span>:</span></span><br><span class="line">    request = SetBackendServersRequest.SetBackendServersRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line">    request.set_BackendServers(BackendServers)</span><br><span class="line">    request.set_LoadBalancerId(resource)</span><br><span class="line"></span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AddBackendServers</span><span class="params">(resource,BackendServers)</span>:</span></span><br><span class="line">    request = AddBackendServersRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    request.set_BackendServers(BackendServers)</span><br><span class="line">    request.set_LoadBalancerId(resource)</span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoveBackendServers</span><span class="params">(resource,BackendServers)</span>:</span></span><br><span class="line">    request = RemoveBackendServersRequest()</span><br><span class="line">    request.set_accept_format(<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    request.set_BackendServers(BackendServers)</span><br><span class="line">    request.set_LoadBalancerId(resource)</span><br><span class="line">    response = client.do_action_with_exception(request)</span><br><span class="line">    print(str(response, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        userInput = sys.argv[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">'get'</span> <span class="keyword">and</span> userInput[<span class="number">1</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            DescribeLoadBalancers(resource)</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">'edit'</span> <span class="keyword">and</span> userInput[<span class="number">1</span>] <span class="keyword">and</span> userInput[<span class="number">2</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            BackendServers = userInput[<span class="number">2</span>]</span><br><span class="line">            SetBackendServers(resource,BackendServers)</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">'add'</span> <span class="keyword">and</span> userInput[<span class="number">1</span>] <span class="keyword">and</span> userInput[<span class="number">2</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            BackendServers = userInput[<span class="number">2</span>]</span><br><span class="line">            AddBackendServers(resource,BackendServers)</span><br><span class="line">        <span class="keyword">if</span> userInput[<span class="number">0</span>] == <span class="string">'remove'</span> <span class="keyword">and</span> userInput[<span class="number">1</span>] <span class="keyword">and</span> userInput[<span class="number">2</span>]:</span><br><span class="line">            resource = userInput[<span class="number">1</span>]</span><br><span class="line">            BackendServers = userInput[<span class="number">2</span>]</span><br><span class="line">            RemoveBackendServers(resource,BackendServers)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入错误"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python-调用阿里云API实现Swarm集群应用的更新或重启</title>
    <url>/Python-%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E5%AE%9E%E7%8E%B0Swarm%E9%9B%86%E7%BE%A4%E5%BA%94%E7%94%A8%E7%9A%84%E6%9B%B4%E6%96%B0%E6%88%96%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>调用阿里云API实现 根据docker compose文件进行Swarm集群容器应用的更新、重启</p>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#调用阿里容器api</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">alics.py</span></span><br><span class="line"><span class="string">参数1   操作  update  restart</span></span><br><span class="line"><span class="string">参数2   集群名称   pre test pro</span></span><br><span class="line"><span class="string">参数2   应用名称</span></span><br><span class="line"><span class="string">参数3   dockercompose文件的绝对路径</span></span><br><span class="line"><span class="string">参数4   时间戳</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">Action=sys.argv[<span class="number">1</span>]</span><br><span class="line">TimeStamp=str(time.time())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UpdataService</span><span class="params">(ClusterName,Service,File,TimeStamp)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(File) <span class="keyword">as</span> file:</span><br><span class="line">        contents = file.read().replace(<span class="string">'\n'</span>, <span class="string">'\r\n'</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"template"</span>: contents,</span><br><span class="line">        <span class="string">"version"</span>: TimeStamp,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'预发环境的 %s 应用进行更新'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span> + Service + <span class="string">'/update'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'生产环境的 %s 应用进行更新'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span> + Service + <span class="string">'/update'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"test"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'测试环境的 %s 应用进行更新'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/'</span> + Service + <span class="string">'/update'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem'</span>)</span><br><span class="line">    res = requests.post(url,data=json.dumps(data),verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="keyword">print</span> res.text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'202'</span> <span class="keyword">in</span> str(res):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n应用更新请求已发送到阿里云容器服务！\n'</span></span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'更新失败，请查看compose文件是否缺少参数'</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateService</span><span class="params">(ClusterName,Service,File,TimeStamp)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(File) <span class="keyword">as</span> file:</span><br><span class="line">        contents = file.read().replace(<span class="string">'\n'</span>, <span class="string">'\r\n'</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"name"</span>: Service,</span><br><span class="line">        <span class="string">"template"</span>: contents,</span><br><span class="line">        <span class="string">"version"</span>: TimeStamp,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'创建预发环境的 %s 应用'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'创建生产环境的 %s 应用'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"test"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'创建测试环境的 %s 应用'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem'</span>)</span><br><span class="line">    res = requests.post(url,data=json.dumps(data),verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="keyword">print</span> res.text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'201'</span> <span class="keyword">in</span> str(res):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n应用更新请求已发送到阿里云容器服务！\n'</span></span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'更新失败，请查看compose文件是否缺少参数'</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RestartService</span><span class="params">(ClusterName,Service)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'预发环境的 %s 应用进行重启'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span> + Service + <span class="string">'/restart'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'生产环境的 %s 应用进行重启'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span> + Service + <span class="string">'/restart'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"test"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'测试环境的 %s 应用进行重启'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/'</span> + Service + <span class="string">'/restart'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = requests.post(url,verify=verify,cert=cert)</span><br><span class="line">        <span class="keyword">print</span> res</span><br><span class="line">        <span class="keyword">print</span> res.text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'200'</span> <span class="keyword">in</span> str(res):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'\n应用重启完成！\n'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'程序正在更新，10秒后重试！'</span></span><br><span class="line">            time.sleep( <span class="number">10</span> )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetService</span><span class="params">(ClusterName,Service)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取预发环境的 %s 应用的信息'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span> + Service</span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取生产环境的 %s 应用的信息'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span> + Service</span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"test"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取测试环境的 %s 应用的信息'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/'</span> + Service</span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem'</span>)</span><br><span class="line">    res = requests.get(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="keyword">print</span> json.loads(res.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RedeployService</span><span class="params">(ClusterName,Service)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'预发环境的 %s 应用进行重新部署'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span> + Service + <span class="string">'/redeploy'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'生产环境的 %s 应用进行重新部署'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span> + Service  + <span class="string">'/redeploy'</span></span><br><span class="line">        verify = <span class="string">'/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"test"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'测试环境的 %s 应用进行重新部署'</span> % Service</span><br><span class="line">        url = <span class="string">'https://master1g8.cs-cn-hangzhou.aliyun.com:20034/projects/'</span> + Service + <span class="string">'/redeploy'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/test-vcg-com/key.pem'</span>)</span><br><span class="line">    res = requests.post(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="keyword">print</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetComposeService</span><span class="params">(ClusterName,Service)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        File = <span class="string">'/jenkins/vcgapp/compose-back/pre/'</span> + Service</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取预发环境的 %s 应用的Compose文件，保存本地后的文件为 %s'</span> % (Service,File)</span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span> + Service</span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        File = <span class="string">'/jenkins/vcgapp/compose-back/pro/'</span> + Service</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取生产环境的 %s 应用的Compose文件，保存本地后的文件为 %s'</span> % (Service,File)</span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span> + Service</span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    res = requests.get(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">with</span> open(File,<span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(json.loads(res.text).get(<span class="string">'template'</span>).replace(<span class="string">'\r\n'</span>,<span class="string">'\n'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetAllService</span><span class="params">(ClusterName)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取预发环境所有应用的信息'</span></span><br><span class="line">        url = <span class="string">'https://master2g11.cs.cn-beijing.aliyuncs.com:20060/projects/'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/pre-vcg-com/key.pem'</span>)</span><br><span class="line">    <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'获取生产环境所有应用的信息'</span></span><br><span class="line">        url = <span class="string">'https://master4g5.cs-cn-beijing.aliyun.com:20045/projects/'</span></span><br><span class="line">        verify = <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/ca.pem'</span></span><br><span class="line">        cert = (<span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/cert.pem'</span>, <span class="string">'/jenkins/vcgapp/ops/sdk/swarm/vcg-com/key.pem'</span>)</span><br><span class="line">    res = requests.get(url,verify=verify,cert=cert)</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="comment">#print res.text</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> json.loads(res.text):</span><br><span class="line">        <span class="comment">#print i.get('template').replace('\r\n','\n')</span></span><br><span class="line">        <span class="keyword">if</span> ClusterName == <span class="string">"pre"</span>:</span><br><span class="line">            File = <span class="string">'/jenkins/vcgapp/compose-back/pre/'</span> + i.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="keyword">elif</span> ClusterName == <span class="string">"pro"</span>:</span><br><span class="line">            File = <span class="string">'/jenkins/vcgapp/compose-back/pro/'</span> + i.get(<span class="string">'name'</span>)</span><br><span class="line">        composefile = i.get(<span class="string">'template'</span>).replace(<span class="string">'\r\n'</span>,<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">with</span> open(File,<span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(composefile)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s 的 compose 文件已备份到 %s "</span> % (i.get(<span class="string">'name'</span>),File)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Action == <span class="string">"update"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    File = sys.argv[<span class="number">4</span>]</span><br><span class="line">    UpdataService(ClusterName,Service,File,TimeStamp)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">"create"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    File = sys.argv[<span class="number">4</span>]</span><br><span class="line">    CreateService(ClusterName,Service,File,TimeStamp)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">"restart"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    RestartService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">"getinfo"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    GetService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">"redeploy"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    RedeployService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">"getcompose"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    Service = sys.argv[<span class="number">3</span>]</span><br><span class="line">    GetComposeService(ClusterName, Service)</span><br><span class="line"><span class="keyword">elif</span> Action == <span class="string">"getallservice"</span>:</span><br><span class="line">    ClusterName = sys.argv[<span class="number">2</span>]</span><br><span class="line">    GetAllService(ClusterName)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python学习进阶之路</title>
    <url>/Python%E5%AD%A6%E4%B9%A0%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p><img src="/Python学习进阶之路/./python.png" alt></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本-定期删除异常Pod</title>
    <url>/Shell%E8%84%9A%E6%9C%AC-%E5%AE%9A%E6%9C%9F%E5%88%A0%E9%99%A4%E5%BC%82%E5%B8%B8Pod/</url>
    <content><![CDATA[<h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>有的Pod重启次数过多</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[cicd-test@ops-jenkins-master ~]$ kubectl get pods |awk '&#123;if ($4 &gt;= 1) print $0 &#125;'</span><br><span class="line">NAME                                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">cmsservice-vcg-com-57974bc4cf-vq6mk             1/1     Running   1          6m18s</span><br><span class="line">edgeservice-vcg-com-755b96fb78-v96s5            1/1     Running   1          3d23h</span><br><span class="line">edgeserviceweb-vcg-com-5655fc9899-8lxql         1/1     Running   1          3d23h</span><br><span class="line">node-visualchina-web-8575cf78dc-8jr2k           1/1     Running   1          4h11m</span><br><span class="line">vdam-gateway-service-6b7d864d67-rdzrg           1/1     Running   1          3h36m</span><br><span class="line">vdam-passport-service-7c97d84b58-xhn6k          1/1     Running   6          3d22h</span><br></pre></td></tr></table></figure>
<h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Author:zhy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Version:1.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Date:20190603</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#######</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除重启次数超过5次的POD</span></span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">Time=`date +%Y%m%d%H%M%S`</span><br><span class="line"></span><br><span class="line">echo $Time &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line"></span><br><span class="line">if [[ `/usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk '&#123;if ($4 &gt;= 5)  print $0 &#125;' |grep -v 'NAME' |wc -l` -eq 0 ]];then</span><br><span class="line">  echo '无重启次数超过5次的POD'</span><br><span class="line">  echo '无重启次数超过5次的POD'  &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line">else</span><br><span class="line">  echo '将要删除如下pod：'</span><br><span class="line">  echo '将要删除如下pod：' &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line">  /usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk '&#123;if ($4 &gt;= 5)  print $1 &#125;'| grep -v 'NAME'</span><br><span class="line">  echo `/usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk '&#123;if ($4 &gt;= 5)  print $1 &#125;'| grep -v 'NAME'` &gt;&gt; /home/cicd-pro/cron/k8s_pod_restart.log</span><br><span class="line">  for i in `/usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config get pods | awk '&#123;if ($4 &gt;= 5)  print $1 &#125;' | grep -v 'NAME'`;</span><br><span class="line">  do</span><br><span class="line">    echo $i</span><br><span class="line">    /usr/local/bin/kubectl --kubeconfig /home/cicd-pro/.kube/config delete pod $i</span><br><span class="line">  done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>SonarQube-安装部署</title>
    <url>/SonarQube-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><h5 id="Docker方式"><a href="#Docker方式" class="headerlink" title="Docker方式"></a>Docker方式</h5><h6 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker pull sonarqube</span><br></pre></td></tr></table></figure>
<h6 id="启动postgresql"><a href="#启动postgresql" class="headerlink" title="启动postgresql"></a>启动postgresql</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name db -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -d postgres</span><br></pre></td></tr></table></figure>
<h6 id="启动sonarqube"><a href="#启动sonarqube" class="headerlink" title="启动sonarqube"></a>启动sonarqube</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name sq --link db -e SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar -p 9000:9000 -d sonarqube</span><br></pre></td></tr></table></figure>
<h6 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h6><p>启动报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>
<p><img src="/SonarQube-安装部署/./sonarqube1.jpg" alt></p>
<ul>
<li style="list-style: none"><input type="checkbox"> </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加：</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证：</span></span><br><span class="line">sysctl -p | grep vm.max_map_count</span><br></pre></td></tr></table></figure>
<h4 id="访问SonarQube"><a href="#访问SonarQube" class="headerlink" title="访问SonarQube"></a>访问SonarQube</h4><h5 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h5><p>访问ip:9000</p>
<p><img src="/SonarQube-安装部署/./sonarqube2.jpg" alt></p>
<p>登录用户名密码：admin，admin</p>
<p><img src="/SonarQube-安装部署/./sonarqube2-1.jpg" alt></p>
<h5 id="安装中文包"><a href="#安装中文包" class="headerlink" title="安装中文包"></a>安装中文包</h5><p>Administration–Marketplace</p>
<p><img src="/SonarQube-安装部署/./sonarqube3.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>ab-Apache_HTTP压测工具</title>
    <url>/ab-Apache-HTTP%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="官网："><a href="#官网：" class="headerlink" title="官网："></a>官网：</h4><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/2.4/programs/ab.html</a></p>
<h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>网站性能压力测试是服务器网站性能调优过程中必不可缺少的一环。只有让服务器处在高压情况下，才能真正体现出软件、硬件等各种设置不当所暴露出的问题。</p>
<p>性能测试工具目前最常见的有以下几种：ab、http_load、webbench、siege。今天我们专门来介绍ab。</p>
<p>ab是apache自带的压力测试工具。ab非常实用，它不仅可以对apache服务器进行网站访问压力测试，也可以对或其它类型的服务器进行压力测试。比如nginx、tomcat、IIS等。 </p>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>ab是apachebench命令的缩写。</p>
<p>ab的原理：ab命令会创建多个并发访问线程，模拟多个访问者同时对某一URL地址进行访问。它的测试目标是基于URL的，因此，它既可以用来测试apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</p>
<p>ab命令对发出负载的计算机要求很低，它既不会占用很高CPU，也不会占用很多内存。但却会给目标服务器造成巨大的负载，其原理类似CC攻击。自己测试使用也需要注意，否则一次上太多的负载。可能造成目标服务器资源耗完，严重时甚至导致死机。</p>
<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ops-jenkins-master ~]# ab -V</span><br><span class="line"></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab -help</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n  在测试会话中所执行的请求个数。默认时，仅执行一个请求。</span><br><span class="line"></span><br><span class="line">-c  一次产生的请求个数。默认是一次一个。</span><br><span class="line"></span><br><span class="line">-t  测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。</span><br><span class="line"></span><br><span class="line">-p  包含了需要POST的数据的文件。</span><br><span class="line"></span><br><span class="line">-P  对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。</span><br><span class="line"></span><br><span class="line">-T  POST数据所使用的Content-type头信息。</span><br><span class="line"></span><br><span class="line">-v  设置显示信息的详细程度-4或更大值会显示头信息，3或更大值可以显示响应代码(404,200等),2或更大值可以显示警告和其他信息。</span><br><span class="line"></span><br><span class="line">-V  显示版本号并退出。</span><br><span class="line"></span><br><span class="line">-w  以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。</span><br><span class="line"></span><br><span class="line">-i  执行HEAD请求，而不是GET。</span><br><span class="line"></span><br><span class="line">-x  设置&lt;table&gt;属性的字符串。</span><br><span class="line"></span><br><span class="line">-X  对请求使用代理服务器。</span><br><span class="line"></span><br><span class="line">-y  设置&lt;tr&gt;属性的字符串。</span><br><span class="line"></span><br><span class="line">-z  设置&lt;td&gt;属性的字符串。</span><br><span class="line"></span><br><span class="line">-C  对请求附加一个Cookie:行。其典型形式是name=value的一个参数对，此参数可以重复。</span><br><span class="line"></span><br><span class="line">-H  对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,&quot;Accept-Encoding:zip/zop;8bit&quot;)。</span><br><span class="line"></span><br><span class="line">-A  对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。</span><br><span class="line"></span><br><span class="line">-h  显示使用方法。</span><br><span class="line"></span><br><span class="line">-d  不显示&quot;percentage served within XX [ms] table&quot;的消息(为以前的版本提供支持)。</span><br><span class="line"></span><br><span class="line">-e  产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经“二进制化”，所以比&apos;gnuplot&apos;格式更有用。</span><br><span class="line"></span><br><span class="line">-g  把所有测试结果写入一个&apos;gnuplot&apos;或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。</span><br><span class="line"></span><br><span class="line">-i  执行HEAD请求，而不是GET。</span><br><span class="line"></span><br><span class="line">-k  启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。</span><br><span class="line"></span><br><span class="line">-q  如果处理的请求数大于150，ab每处理大约10%或者100个请求时，会在stderr输出一个进度计数。此-q标记可以抑制这些信息。</span><br></pre></td></tr></table></figure>
<h4 id="性能指标："><a href="#性能指标：" class="headerlink" title="性能指标："></a>性能指标：</h4><ul>
<li><p><strong>吞吐率（Requests per second）</strong></p>
<p>概念：服务器并发处理能力的量化描述，单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</p>
<p>计算公式：总请求数 / 处理完成这些请求数所花费的时间，即<br>Request per second = Complete requests / Time taken for tests</p>
</li>
</ul>
<ul>
<li><p><strong>并发连接数（The number of concurrent connections）</strong></p>
<p>概念：某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p>
</li>
</ul>
<ul>
<li><p><strong>并发用户数（The number of concurrent users，Concurrency Level）</strong></p>
<p>概念：要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。</p>
</li>
</ul>
<ul>
<li><p><strong>用户平均请求等待时间（Time per request）</strong></p>
<p>计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即<br>Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</p>
</li>
</ul>
<ul>
<li><p><strong>服务器平均请求等待时间（Time per request: across all concurrent requests）</strong></p>
<p>计算公式：处理完成所有请求数所花费的时间 / 总请求数，即<br>Time taken for / testsComplete requests<br>可以看到，它是吞吐率的倒数。<br>同时，它也=用户平均请求等待时间/并发用户数，即<br>Time per request / Concurrency Level</p>
</li>
</ul>
<h4 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 请求访问 https://www.zhaohongye.com/ ，访问 -n 100次，并发 -c 10次</span></span><br><span class="line"></span><br><span class="line">ab -c 10 -n 100 https://www.zhaohongye.com/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  请求结果</span></span><br><span class="line"></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.zhaohongye.com (be patient).....done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.12.2         # 服务器软件</span><br><span class="line">Server Hostname:        www.zhaohongye.com   # 域名</span><br><span class="line">Server Port:            443                  # 请求端口号</span><br><span class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES256-GCM-SHA384,2048,256</span><br><span class="line"></span><br><span class="line">Document Path:          /                    # 文件路径</span><br><span class="line">Document Length:        68872 bytes          # 页面字节数</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10                   # 请求并发数</span><br><span class="line">Time taken for tests:   14.797 seconds       # 总访问时间</span><br><span class="line">Complete requests:      100                  # 总请求次数</span><br><span class="line">Failed requests:        0                    # 失败请求次数</span><br><span class="line">Write errors:           0            </span><br><span class="line">Total transferred:      6901400 bytes      # 请求总数据大小（包括header头信息）</span><br><span class="line">HTML transferred:       6887200 bytes      # html页面实际总字节数</span><br><span class="line">Requests per second:    6.76 [#/sec] (mean)   # 每秒多少请求，服务器的吞吐量</span><br><span class="line">Time per request:       1479.677 [ms] (mean)   # 用户平均请求等待时间 </span><br><span class="line">Time per request:       147.968 [ms] (mean, across all concurrent requests)                     # 服务器平均处理时间，也就是服务器吞吐量的倒数 </span><br><span class="line">Transfer rate:          455.48 [Kbytes/sec] received   #每秒获取的数据长度</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        5   12   3.3     12      19</span><br><span class="line">Processing:   156 1429 207.5   1462    1626</span><br><span class="line">Waiting:      155 1426 207.2   1449    1623</span><br><span class="line">Total:        165 1441 207.9   1476    1636</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">   1476   <span class="comment">#50%用户请求在1476ms内返回</span></span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">   1489   <span class="comment">#60%用户请求在1489ms内返回</span></span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">   1524</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">   1572</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">   1594</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">   1635</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">   1636</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">   1636</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">   1636 (longest request)</span></span><br></pre></td></tr></table></figure>
<h4 id="示例二："><a href="#示例二：" class="headerlink" title="示例二："></a>示例二：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -k -c 600 -n 100000 -p 1000.txt -T application/x-www-form-urlencoded -H "api-key:d99caed6d0997c4d3f141249c346e9d4" -H "authorization:Bearer xx" 'http://172.16.237.108/ai/search/photo/wps1'</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1000.txt 的内容</span></span><br><span class="line"></span><br><span class="line">img_url=https://goss1.vcg.com/editorial/vcg/400/new/VCG111160779787.jpg&amp;result_size=30&amp;image_type=url</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>nodejs-npm-cnpm</title>
    <url>/nodejs-npm-cnpm/</url>
    <content><![CDATA[<p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像官网</a></p>
<h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><h6 id="node-8-16-0"><a href="#node-8-16-0" class="headerlink" title="node:8.16.0"></a>node:8.16.0</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、创建目录</span></span><br><span class="line">mkdir -p /usr/local/lib/nodejs/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、下载安装包</span></span><br><span class="line">wget https://nodejs.org/dist/v8.16.0/node-v8.16.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、解压</span></span><br><span class="line">tar -xJvf node-v8.16.0-linux-x64.tar.xz -C /usr/local/lib/nodejs/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、配置环境变量</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nodejs</span></span><br><span class="line">VERSION=v8.16.0</span><br><span class="line">DISTRO=linux-x64</span><br><span class="line">export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH</span><br></pre></td></tr></table></figure>
<h5 id="node-10-16-0"><a href="#node-10-16-0" class="headerlink" title="node:10.16.0"></a>node:10.16.0</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、创建目录</span></span><br><span class="line">mkdir -p /usr/local/lib/nodejs/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、下载安装包</span></span><br><span class="line">wget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、解压</span></span><br><span class="line">tar -xJvf node-v10.16.0-linux-x64.tar.xz -C /usr/local/lib/nodejs/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、配置环境变量</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nodejs</span></span><br><span class="line">VERSION=v10.16.0</span><br><span class="line">DISTRO=linux-x64</span><br><span class="line">export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH</span><br></pre></td></tr></table></figure>
<h5 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pip-学习笔记</title>
    <url>/pip-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。<br><a id="more"></a><br>目前如果你在 <a href="https://www.python.org/" target="_blank" rel="noopener">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p>
<p>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p>
<p>pip 官网：<a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">https://pypi.org/project/pip/</a></p>
<p>你可以通过以下命令来判断是否已安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>如果你还未安装，则可以使用以下方法来安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载安装脚本</span></span><br><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><h6 id="显示版本和路径"><a href="#显示版本和路径" class="headerlink" title="显示版本和路径"></a>显示版本和路径</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zhaohongye ~ ^-^ #pip --version</span><br><span class="line">pip 19.2.2 from /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip (python 3.7)</span><br></pre></td></tr></table></figure>
<h6 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a><strong>获取帮助</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip --help</span><br></pre></td></tr></table></figure>
<h6 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -U pip</span><br><span class="line"></span><br><span class="line">easy_install --upgrade pip</span><br></pre></td></tr></table></figure>
<h6 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a><strong>安装包</strong></h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install SomePackage              # 最新版本</span><br><span class="line">pip install SomePackage==1.0.4       # 指定版本</span><br><span class="line">pip install &apos;SomePackage&gt;=1.0.4&apos;     # 最小版本</span><br></pre></td></tr></table></figure>
<h6 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --upgrade SomePackage</span><br></pre></td></tr></table></figure>
<h6 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip uninstall SomePackage</span><br></pre></td></tr></table></figure>
<h5 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h5><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></p>
<p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p>豆瓣 (douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></p>
<p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p>
<p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>
<p><strong>配置方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在文件</span><br><span class="line"></span><br><span class="line">~/.pip/pip.conf</span><br><span class="line">中添加或修改:</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<h5 id="pip-review"><a href="#pip-review" class="headerlink" title="pip-review"></a>pip-review</h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pip-review</span><br></pre></td></tr></table></figure>
<h6 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip-review --auto</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>代码迁移-更改Git远程仓库-从gitlab上迁移到coding</title>
    <url>/%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BB-%E6%9B%B4%E6%94%B9Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-%E4%BB%8Egitlab%E4%B8%8A%E8%BF%81%E7%A7%BB%E5%88%B0coding/</url>
    <content><![CDATA[<h5 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@git.test.com:test/test.git</span><br></pre></td></tr></table></figure>
<h5 id="进入项目"><a href="#进入项目" class="headerlink" title="进入项目"></a>进入项目</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd test</span><br></pre></td></tr></table></figure>
<h5 id="删除-git文件"><a href="#删除-git文件" class="headerlink" title="删除.git文件"></a>删除.git文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<h5 id="绑定远程仓库"><a href="#绑定远程仓库" class="headerlink" title="绑定远程仓库"></a>绑定远程仓库</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@git.coding.net:xxx/test.git</span><br></pre></td></tr></table></figure>
<h5 id="更新到远端"><a href="#更新到远端" class="headerlink" title="更新到远端"></a>更新到远端</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "init"</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title>修复漏洞-提升RDS响应速度</title>
    <url>/%E4%BF%AE%E5%A4%8D%E6%BC%8F%E6%B4%9E-%E6%8F%90%E5%8D%87RDS%E5%93%8D%E5%BA%94%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><ol>
<li>升级linux内核版本，修复SACK Panic”远程DoS漏洞</li>
<li>安装nscd，提升RDS响应速度</li>
</ol>
<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><h5 id="漏洞描述："><a href="#漏洞描述：" class="headerlink" title="漏洞描述："></a>漏洞描述：</h5><p><em>Linux 以及 FreeBSD 等系统内核上存在严重远程DoS漏洞，攻击者可利用该漏洞构造并发送特定的 SACK 序列请求到目标服务器导致服务器崩溃或拒绝服务。</em></p>
<p><em>目前已知受影响版本如下：</em><br> <em>• FreeBSD 12（使用到 RACK TCP 协议栈）</em><br> <em>• CentOS 5（Redhat 官方已停止支持，不再提供补丁）</em><br> <em>• CentOS 6</em><br> <em>• CentOS 7</em><br> <em>• Ubuntu 18.04 LTS</em><br> <em>• Ubuntu 16.04 LTS</em><br> <em>• Ubuntu 19.04</em><br> <em>• Ubuntu 18.10</em><br><em>各大Linux发行厂商已发布内核修复补丁，详细内核修复版本如下：</em><br> <em>• CentOS 6 ：2.6.32-754.15.3</em><br> <em>• CentOS 7 ：3.10.0-957.21.3</em><br> <em>• Ubuntu 18.04 LTS ：4.15.0-52.56</em><br> <em>• Ubuntu 16.04 LTS：4.4.0-151.178</em></p>
<p><em>修复建议：</em><br><em>➤【CentOS 6/7 系列用户】</em><br><em>注：截止文章发布，CentOS官方暂未同步内核修复补丁到软件源，建议用户及时关注补丁更新情况并开展相应升级工作。升级方式如下：</em></p>
<ol>
<li><em>yum clean all &amp;&amp; yum makecache，进行软件源更新；</em></li>
<li><em>yum update kernel  -y，更新当前内核版本;</em></li>
<li><em>reboot，更新后重启系统生效;</em></li>
<li><em>uname -a，检查当前版本是否为上述【安全版本】，如果是，则说明修复成功。</em></li>
</ol>
<p><em>➤【Ubuntu 16.06/18.04 LTS 系列用户】</em></p>
<ol>
<li><em>sudo apt-get update &amp;&amp; sudo apt-get install linux-image-generic，进行软件源更新并安装最新内核版本；</em></li>
<li><em>sudo reboot，更新后重启系统生效；</em></li>
<li><em>uname -a，检查当前版本是否为【安全版本】，如果是，则说明修复成功。</em><br><em>如果用户不方便重启进行内核补丁更新，可选择临时缓解方案：</em><br><em>运行如下命令禁用内核 SACK 配置防范漏洞利用：</em><br><em>sysctl -w net.ipv4.tcp_sack=0</em></li>
</ol>
<h5 id="NSCD服务："><a href="#NSCD服务：" class="headerlink" title="NSCD服务："></a>NSCD服务：</h5><p><em><a href="https://help.aliyun.com/knowledge_detail/41806.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/41806.html</a></em></p>
<p><em>NSCD（Name Service Cache Daemon）是一种能够缓存passwd、group、hosts的本地缓存服务。若您使用短连接的方式连接RDS，请在与RDS相连的ECS实例上进行如下操作开启NSCD，提升RDS响应速度。</em></p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ol>
<li>编写Shell脚本</li>
<li>Ansible分发脚本</li>
<li>Ansible执行脚本</li>
<li>验证脚本执行情况</li>
<li>分批重启主机</li>
</ol>
<h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><h5 id="Shell脚本："><a href="#Shell脚本：" class="headerlink" title="Shell脚本："></a>Shell脚本：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /data/vcg/zhy/ansible/0623.sh</span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line">yum update -y  # 或者 yum update kernel  -y</span><br><span class="line">yum install -y nscd</span><br><span class="line">systemctl enable nscd.service</span><br><span class="line">echo "options timeout:1 attempts:1" &gt;&gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<h5 id="分发脚本"><a href="#分发脚本" class="headerlink" title="分发脚本"></a>分发脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible pre-k8s -m copy -a "src=/data/vcg/zhy/ansible/0623.sh dest=/tmp/0623.sh mode=755"</span><br></pre></td></tr></table></figure>
<h5 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible pre-k8s -m shell -a "/tmp/0623.sh"</span><br></pre></td></tr></table></figure>
<h5 id="验证脚本执行情况"><a href="#验证脚本执行情况" class="headerlink" title="验证脚本执行情况"></a>验证脚本执行情况</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible pre-k8s -m shell -a "cat /etc/resolv.conf |grep options"</span><br></pre></td></tr></table></figure>
<h5 id="分批重启主机"><a href="#分批重启主机" class="headerlink" title="分批重启主机"></a>分批重启主机</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">脚本内容：</span></span><br><span class="line">hosts="</span><br><span class="line">172.20.21.249</span><br><span class="line">172.20.21.250</span><br><span class="line">172.20.21.251</span><br><span class="line">172.20.21.252</span><br><span class="line">172.20.21.253</span><br><span class="line">172.20.21.254</span><br><span class="line">172.20.21.255</span><br><span class="line">172.20.22.0</span><br><span class="line">172.20.22.1</span><br><span class="line">172.20.22.2"</span><br><span class="line">for i in $hosts;</span><br><span class="line">do</span><br><span class="line">  ssh $i uptime</span><br><span class="line">  ssh $i reboot</span><br><span class="line">  sleep 2m</span><br><span class="line">  ssh $i uptime</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>压缩、解压工具-Zip和Tar</title>
    <url>/%E5%8E%8B%E7%BC%A9%E3%80%81%E8%A7%A3%E5%8E%8B%E5%B7%A5%E5%85%B7-Zip%E5%92%8CTar/</url>
    <content><![CDATA[<p>压缩、解压工具-Zip和Tar</p>
<h5 id="ZIP"><a href="#ZIP" class="headerlink" title="ZIP"></a>ZIP</h5><p>zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有”.zip”扩展名的压缩文件。</p>
<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zip -y</span><br></pre></td></tr></table></figure>
<h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">zip +参数 +文件名.zip +原文件</span><br></pre></td></tr></table></figure>
<h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A 调整可执行的自动解压缩文件。</span><br><span class="line">-b&lt;工作目录&gt; 指定暂时存放文件的目录。</span><br><span class="line">-c 替每个被压缩的文件加上注释。</span><br><span class="line">-d 从压缩文件内删除指定的文件。</span><br><span class="line">-D 压缩文件内不建立目录名称。</span><br><span class="line">-f 此参数的效果和指定"-u"参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。</span><br><span class="line">-F 尝试修复已损坏的压缩文件。</span><br><span class="line">-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</span><br><span class="line">-h 在线帮助。</span><br><span class="line">-i&lt;范本样式&gt; 只压缩符合条件的文件。</span><br><span class="line">-j 只保存文件名称及其内容，而不存放任何目录名称。</span><br><span class="line">-J 删除压缩文件前面不必要的数据。</span><br><span class="line">-k 使用MS-DOS兼容格式的文件名称。</span><br><span class="line">-l 压缩文件时，把LF字符置换成LF+CR字符。</span><br><span class="line">-ll 压缩文件时，把LF+CR字符置换成LF字符。</span><br><span class="line">-L 显示版权信息。</span><br><span class="line">-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</span><br><span class="line">-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。</span><br><span class="line">-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</span><br><span class="line">-q 不显示指令执行过程。</span><br><span class="line">-r 递归处理，将指定目录下的所有文件和子目录一并处理。</span><br><span class="line">-S 包含系统和隐藏文件。</span><br><span class="line">-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。</span><br><span class="line">-T 检查备份文件内的每个文件是否正确无误。</span><br><span class="line">-u 更换较新的文件到压缩文件内。</span><br><span class="line">-v 显示指令执行过程或显示版本信息。</span><br><span class="line">-V 保存VMS操作系统的文件属性。</span><br><span class="line">-w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。</span><br><span class="line">-x&lt;范本样式&gt; 压缩时排除符合条件的文件。</span><br><span class="line">-X 不保存额外的文件属性。</span><br><span class="line">-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。</span><br><span class="line">-z 替压缩文件加上注释。</span><br><span class="line"><span class="meta">-$</span><span class="bash"> 保存第一个被压缩文件所在磁盘的卷册名称。</span></span><br><span class="line">-&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。</span><br></pre></td></tr></table></figure>
<h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><ul>
<li><p>将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -q -r html.zip /home/html</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果在我们在 /home/html 目录下，可以执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -q -r html.zip *</span><br></pre></td></tr></table></figure>
</li>
<li><p>从压缩文件 cp.zip 中删除文件 a.c</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip -dv cp.zip a.c</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="UNZIP"><a href="#UNZIP" class="headerlink" title="UNZIP"></a>UNZIP</h5><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install unzip -y</span><br></pre></td></tr></table></figure>
<h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><ul>
<li><p>解压test.zip 文件到当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压test.zip 文件到/root/目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip test.zip -d /root</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="TAR"><a href="#TAR" class="headerlink" title="TAR"></a>TAR</h5><h6 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 <span class="built_in">test</span> 目录压缩为 test.tar.gz </span></span><br><span class="line">tar zcvf test.tar.gz test/</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zxvf test.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>域名SSL证书</title>
    <url>/%E5%9F%9F%E5%90%8DSSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><ul>
<li><p>什么是数字证书？</p>
<p>数字证书是一个经权威授权机构数字签名、包含公开密钥拥有者信息以及公开密钥的文件，是权威机构颁发给网站的可信凭证。最简单的证书包含一个公开密钥、证书名称以及证书授权中心的数字签名。</p>
<p>数字证书还有一个重要的特征：只在特定的时间段内有效。</p>
</li>
<li><p>什么是SSL？</p>
<p>SSL协议是一种可实现网络通信加密的安全协议，可在浏览器和网站之间建立加密通道，保障数据在传输的过程中不被篡改或窃取。</p>
</li>
<li><p>什么是SSL证书？</p>
<p>SSL证书采用SSL协议进行通信，是由权威机构颁发给网站的可信凭证。</p>
<p>SSL证书采用SSL协议进行通信。SSL证书部署到Web服务器后，Web服务器访问将启用HTTPS协议。您的网站将会通过 HTTPS 加密协议来传输数据，可帮助Web服务器和网站间建立可信的加密链接，从而保证网络数据传输的安全。</p>
</li>
<li><p>什么是HTTPS？</p>
<p>HTTPS是一种基于SSL协议的网站加密传输协议。</p>
<p>网站安装SSL证书后，使用HTTPS加密协议访问，可激活客户端浏览器到网站服务器之间的<strong>SSL加密通道</strong>（SSL协议），从而实现高强度双向加密传输，防止传输数据被泄露或篡改。HTTPS 也就是HTTP + SSL，是HTTP的安全版。</p>
</li>
<li><p>什么是CA认证中心？</p>
<p>CA认证中心（CA机构），即证书授权中心（Certificate Authority），或称证书授权机构。</p>
<p>CA认证中心作为电子商务交易中受信任的第三方，承担公钥体系中公钥合法性检验的责任。</p>
</li>
</ul>
<h2 id="SSL证书类型配置表"><a href="#SSL证书类型配置表" class="headerlink" title="SSL证书类型配置表"></a>SSL证书类型配置表</h2><p>证书根据不同的验证级别，分为以下三类：</p>
<ul>
<li>域名型SSL（DV SSL）</li>
<li>企业型SSL（OV SSL）</li>
<li>增强型SSL（EV SSL）</li>
</ul>
<p>根据保护域名的数量需求，SSL 证书又分为：</p>
<ul>
<li>单域名版：只保护一个域名，例如 <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a> 或者 login.abc.com 之类的单个域名</li>
<li>多域名版：一张证书可以保护多个域名，例如同时保护 <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a> , <a href="http://www.bcd.com" target="_blank" rel="noopener">www.bcd.com</a>, pay.efg.com 等</li>
<li>通配符版：一张证书保护同一个主域名下同一级的所有子域名，不限个数，形如 *.abc.com 。注意，通配符版只有 DVSSL 和 OVSSL 具有， EVSSL 不具有通配符版本。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">证书品牌</th>
<th style="text-align:left">证书类型</th>
<th style="text-align:left">保护域名的类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GeoTrust</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">1个带通配符的域名1个明细域名多个明细域名</td>
<td style="text-align:left">提供加密功能，对申请者的身份进行严格的审核验证，可提供可信身份证明。多个域名例上限为300个。如: buy1.example.com, buy2.example.com, next.buy.example2.com, 上述3个明细子域名计算为3个域名。</td>
</tr>
<tr>
<td style="text-align:left">高级版EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">GlobalSign</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">通配符域名</td>
<td style="text-align:left">提供加密功能，对申请者进行严格的身份审核验证，提供可信身份证明。</td>
</tr>
<tr>
<td style="text-align:left">CFCA</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">通配符域名1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者进行严格的身份审核验证，提供可信身份证明。</td>
</tr>
<tr>
<td style="text-align:left">高级版EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Symantec</td>
<td style="text-align:left">专业版OV SSL</td>
<td style="text-align:left">通配符域名1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者进行严格的身份审核验证，提供可信身份证明。</td>
</tr>
<tr>
<td style="text-align:left">通配符DV SSL</td>
<td style="text-align:left">通配符域名</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">增强型OV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供站点加密功能，需要核验组织注册信息，证书中会显示组织名称。组织信息验证通过后，3个工作日内颁发证书。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">高级版EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">增强型EV SSL</td>
<td style="text-align:left">1个域名多个域名</td>
<td style="text-align:left">增强型EV SSL提供站点加密功能，浏览器绿色地址栏显示组织信息强化信任。组织信息验证通过后7个工作日内颁发证书。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">免费型DV SSL</td>
<td style="text-align:left">1个域名</td>
<td style="text-align:left">免费新根证书，切入DigiCert PKI体系，兼容性操作系统版本IOS 5.0+、Android 2.3.3+、JRE 1.6.5+、WIN 7+。最多保护一个明细子域名，不支持通配符，一个阿里云帐户最多签发20张免费证书。</td>
</tr>
</tbody>
</table>
<h2 id="SSL证书购买"><a href="#SSL证书购买" class="headerlink" title="SSL证书购买"></a>SSL证书购买</h2><p>登录阿里云控制台，进入SSL证书服务。</p>
<p><img src="/域名SSL证书/免费SSL证书购买.jpg" alt="免费SSL证书购买"></p>
<h2 id="SSL证书更新"><a href="#SSL证书更新" class="headerlink" title="SSL证书更新"></a>SSL证书更新</h2><p>公司域名SSL证书即将到期，替换SSL证书需知道哪些二级域名使用了HTTPS访问，并且获取SSL证书过期时间，来验证证书是否更新。</p>
<h5 id="获取域名下的解析信息"><a href="#获取域名下的解析信息" class="headerlink" title="获取域名下的解析信息"></a>获取域名下的解析信息</h5><p>登录域名服务商控制条—云解析—域名解析列表—导出解析记录</p>
<p>将二级域名的记录写入domains.txt文件备用</p>
<h5 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for domain in `cat domains.txt` #读取存储了需要监测的域名的文件</span><br><span class="line">do</span><br><span class="line">    curl $domain.vcg.com:443 1&gt;/dev/null 2&gt;/dev/null --connect-timeout 3</span><br><span class="line">    if [[ $? -eq 0  ]]; then</span><br><span class="line">      END_TIME=$(echo | openssl s_client -servername $domain.vcg.com  -connect $domain.vcg.com:443 2&gt;/dev/null | openssl x509 -noout -dates |grep 'After'| awk -F '=' '&#123;print $2&#125;'| awk -F ' +' '&#123;print $1,$2,$4 &#125;' )</span><br><span class="line">      echo "$domain.vcg.com 的SSL证书到期时间为 $END_TIME  "  &gt;&gt; result1.txt</span><br><span class="line">    else</span><br><span class="line">      echo "$domain.vcg.com 没https " &gt;&gt; result1.txt</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h5 id="根据输出文件查看SSL证书过期时间，进行证书替换工作"><a href="#根据输出文件查看SSL证书过期时间，进行证书替换工作" class="headerlink" title="根据输出文件查看SSL证书过期时间，进行证书替换工作"></a>根据输出文件查看SSL证书过期时间，进行证书替换工作</h5><h5 id="SSL证书更新的配置路径"><a href="#SSL证书更新的配置路径" class="headerlink" title="SSL证书更新的配置路径"></a>SSL证书更新的配置路径</h5><ul>
<li>阿里云OSS-对象存储</li>
<li>阿里云WAF-Web防火墙</li>
<li>阿里云SLB-负载均衡</li>
<li>Nginx</li>
</ul>
<p>##### </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>SSL证书</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSL证书</tag>
      </tags>
  </entry>
  <entry>
    <title>奇葩需求-jenkins脚本</title>
    <url>/%E5%A5%87%E8%91%A9%E9%9C%80%E6%B1%82-jenkins%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>jenkins 项目中的shell脚本：</p>
<p>实现 自动构建后 访问微服务可以获取 Kubernetes pod镜像地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -e</span><br><span class="line"></span><br><span class="line">Time=`date +%Y%m%d%H%M%S`</span><br><span class="line">WorkDir=`pwd`</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == "测试环境" ]]; then</span><br><span class="line">  Branch="release"</span><br><span class="line">  ScopeName="test"</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "预发环境" ]]; then</span><br><span class="line">  Branch="master"</span><br><span class="line">  ScopeName="pre"</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "生产环境" ]]; then</span><br><span class="line">  Branch="master"</span><br><span class="line">  ScopeName="pro"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &gt; Dockerfile &lt;&lt;EOF</span><br><span class="line">FROM registry-vpc.cn-beijing.aliyuncs.com/vcgcs/flask</span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line">ADD . .</span><br><span class="line">CMD python manager.py</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt; manager.py &lt;&lt;EOF</span><br><span class="line">from flask import Flask</span><br><span class="line">from flask import request</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route('/',methods=["GET"])</span><br><span class="line">def cicd_test():</span><br><span class="line">    if request.method == 'GET':</span><br><span class="line">        test = os.popen("/usr/src/app/kubectl --kubeconfig /usr/src/app/test-config get deployment cicd-test -o yaml |grep image |grep aliyuncs |awk -F '- image:' '&#123;print \$2&#125;'").read()</span><br><span class="line">        pre = os.popen("/usr/src/app/kubectl --kubeconfig /usr/src/app/pre-config get deployment cicd-test -o yaml |grep image |grep aliyuncs |awk -F '- image:' '&#123;print \$2&#125;'").read()</span><br><span class="line">        pro = os.popen("/usr/src/app/kubectl --kubeconfig /usr/src/app/pro-config get deployment cicd-test -o yaml |grep image |grep aliyuncs |awk -F '- image:' '&#123;print \$2&#125;'").read()</span><br><span class="line">        return "test环境的镜像地址: %s ,pre环境的镜像地址: %s , pro环境的镜像地址: %s"  % (test,pre,pro)</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    app.run(host='0.0.0.0',port='5001',debug=True)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker build -t registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time .</span><br><span class="line">docker push registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time</span><br><span class="line">docker rmi -f registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time</span><br><span class="line"></span><br><span class="line">if [[ $&#123;Scope&#125; == "测试环境" ]]; then</span><br><span class="line">  su - cicd-test -c "kubectl set image deployment cicd-test cicd-test=registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time"</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "预发环境" ]]; then</span><br><span class="line">  su - cicd-pre -c "kubectl set image deployment cicd-test cicd-test=registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time"</span><br><span class="line">fi</span><br><span class="line">if [[ $&#123;Scope&#125; == "生产环境" ]]; then</span><br><span class="line">  su - cicd-pro -c "kubectl set image deployment cicd-test cicd-test=registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:$&#123;ScopeName&#125;-$Time"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>效果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test环境的镜像地址: registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:test-20190530160557 ,pre环境的镜像地址: registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:pre-20190530162226 , pro环境的镜像地址: registry-vpc.cn-beijing.aliyuncs.com/vcg/cicd-test:pro-20190530162233</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Jenkins</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力破解攻击和防御</title>
    <url>/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%94%BB%E5%87%BB%E5%92%8C%E9%98%B2%E5%BE%A1/</url>
    <content><![CDATA[<blockquote>
<p>引用自阿里云<a href="https://help.aliyun.com/knowledge_detail/56269.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/56269.html</a></p>
</blockquote>
<h3 id="什么是暴力破解攻击"><a href="#什么是暴力破解攻击" class="headerlink" title="什么是暴力破解攻击"></a>什么是暴力破解攻击</h3><p>暴力破解攻击是指攻击者通过系统地组合并尝试所有的可能性以破解用户的用户名、密码等敏感信息。攻击者往往借助自动化脚本工具来发动暴力破解攻击。</p>
<h4 id="攻击行为类型"><a href="#攻击行为类型" class="headerlink" title="攻击行为类型"></a>攻击行为类型</h4><p>根据暴力破解的穷举方式，其攻击行为可以分为：</p>
<ul>
<li><strong>字典攻击法</strong>。大多攻击者并没有高性能的破解算法和CPU/GPU，为节省时间和提高效率，会利用社会工程学或其它方式建立破译字典，使用字典中已存在的用户名、密码进行猜破。</li>
<li><strong>穷举法</strong>。攻击者首先列出密码组合的可能性（如数字、大写字母、小写字母、特殊字符等），然后按密码长度从1位、2位….构成不同的账号和密码对，然后逐个猜试。该方法需要高性能的破解算法和CPU/GPU作支持。</li>
<li><strong>组合式攻击法</strong>。使用字典攻击和穷举法的组合攻击方式。</li>
</ul>
<p>理论上，只要拥有性能足够强的计算机和足够长的时间，大多密码均可以被破解出来。</p>
<h4 id="攻击业务类型"><a href="#攻击业务类型" class="headerlink" title="攻击业务类型"></a>攻击业务类型</h4><ul>
<li>针对Windows操作系统的远程桌面管理协议（RDP）、Linux操作系统的管理协议（SSH）的暴力破解攻击</li>
<li>针对具有登录认证机制的软件服务（如Mysql、SQLserver、FTP、Web前后端登录接口等应用服务）的暴力破解攻击</li>
</ul>
<p>对于防御者而言，给攻击者留得时间越长，其组合出正确的用户名和密码的可能性就越大。因此，时间在检测暴力破解攻击时很重要。</p>
<h3 id="暴力破解攻击有什么危害"><a href="#暴力破解攻击有什么危害" class="headerlink" title="暴力破解攻击有什么危害"></a>暴力破解攻击有什么危害</h3><p>通过自动化工具发起的暴力破解攻击可以获取用户账号和密码。</p>
<h3 id="如何防御暴力破解攻击"><a href="#如何防御暴力破解攻击" class="headerlink" title="如何防御暴力破解攻击"></a>如何防御暴力破解攻击</h3><ul>
<li>制定密码复杂度策略，并进行服务加固。密码的长度要大于 8 位，且最好大于 20 位；密码应由数字、大小写字母和特殊符号混合组成；密码的最长有效期为 90 天。</li>
<li>配置好网络访问控制。严格限制将高危服务管理端口直接发布到互联网；建议您使用 VPN 和堡垒机的方式集中管理和审计。</li>
<li>提高内部全员安全意识，禁止借用或共享使用账号。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出Kubernetes</title>
    <url>/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAKubernetes/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>

	<div class="row">
    <embed src="./深入浅出Kubernetes.pdf" width="100%" height="550" type="application/pdf">
	</div>


</p>
]]></content>
  </entry>
  <entry>
    <title>申请Confluence和Jira的试用版license</title>
    <url>/%E7%94%B3%E8%AF%B7Confluence%E5%92%8CJira%E7%9A%84%E8%AF%95%E7%94%A8%E7%89%88license/</url>
    <content><![CDATA[<ol>
<li><p>访问<a href="https://www.atlassian.com/，登录账号" target="_blank" rel="noopener">https://www.atlassian.com/，登录账号</a></p>
<p><img src="/申请Confluence和Jira的试用版license/./image2019-7-23_16-56-18.png" alt></p>
<p><img src="/申请Confluence和Jira的试用版license/./image2019-7-23_16-58-42.png" alt></p>
</li>
<li><p>点击“licenses”，url为<a href="https://my.atlassian.com/product" target="_blank" rel="noopener">https://my.atlassian.com/product</a></p>
<p><img src="/申请Confluence和Jira的试用版license/./image2019-7-23_17-0-29.png" alt></p>
</li>
<li><p>创建新的认证：</p>
<p><img src="/申请Confluence和Jira的试用版license/./image2019-7-23_17-2-25.png" alt></p>
</li>
<li><p>获取service ID</p>
<p>使用admin账号登录系统，<strong>系统</strong>-<strong>系统信息</strong>可以获取service ID</p>
<p><img src="/申请Confluence和Jira的试用版license/./1563872961498.jpg" alt></p>
<p><img src="/申请Confluence和Jira的试用版license/./1563872994300.jpg" alt></p>
</li>
<li><p>激活license</p>
<p><img src="/申请Confluence和Jira的试用版license/./1563873215131.jpg" alt></p>
<p><img src="/申请Confluence和Jira的试用版license/./1563873261297.jpg" alt></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>神策logagent收集Kubernetes-Pod日志</title>
    <url>/%E7%A5%9E%E7%AD%96logagent%E6%94%B6%E9%9B%86Kubernetes-Pod%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>神策logagent收集Kubernetes Pod日志</p>
<hr>
<h4 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h4><p>神策logagent需要收集到java程序输出的日志，用于分析用户行为等</p>
<p>想到两种方案</p>
<ol>
<li>pod指定部署到某台宿主机上，日志目录挂载到宿主机，宿主机上启动logagent程序。</li>
<li>sidecar的形式</li>
</ol>
<p>目前使用第一种方案，比较稳妥，后续技术扎实后会替换成第二种，更稳定高效。</p>
<h4 id="部署logagent"><a href="#部署logagent" class="headerlink" title="部署logagent"></a>部署logagent</h4><p><a href="https://www.sensorsdata.cn/manual/log_agent.html" target="_blank" rel="noopener">官方部署文档</a></p>
<h5 id="安装Jdk"><a href="#安装Jdk" class="headerlink" title="安装Jdk"></a>安装Jdk</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>
<h5 id="下载LogAgent部署包和解压"><a href="#下载LogAgent部署包和解压" class="headerlink" title="下载LogAgent部署包和解压"></a>下载LogAgent部署包和解压</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.sensorsdata.cn/release/logagent/logagent_20190605.tgz</span><br><span class="line">tar zxvf logagent_20190605.tgz</span><br></pre></td></tr></table></figure>
<h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim logagent/logagent.conf</span><br><span class="line"></span><br><span class="line">path=/var/log/veercms      #本地路径</span><br><span class="line">logagent_id=veerservice_2_241    #id</span><br><span class="line">pattern=cms.veerservice.log*     #log名称格式</span><br><span class="line">project=production</span><br><span class="line">pid_file=/data/vcg/logagent/logagent.pid</span><br><span class="line">host=172.16.249.136    #server端地址</span><br><span class="line">port=8106</span><br></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup bin/logagent &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f /data/vcg/logagent/log/logagent.log</span><br></pre></td></tr></table></figure>
<h4 id="配置节点标签"><a href="#配置节点标签" class="headerlink" title="配置节点标签"></a>配置节点标签</h4><p>两种方式实现：</p>
<ol>
<li><p>控制台上添加标签</p>
<p><img src="/神策logagent收集Kubernetes-Pod日志/./1560925678009.jpg" alt="image-20190619142748161"></p>
</li>
<li><p>命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如给 cn-beijing.i-2ze7nm52ylwxd8j4d0lq 这个node添加标签：</span></span><br><span class="line">kubectl label nodes cn-beijing.i-2ze7nm52ylwxd8j4d0lq test-key=test-value</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看标签：</span></span><br><span class="line">kubectl get node --show-labels</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="配置k8s-yaml"><a href="#配置k8s-yaml" class="headerlink" title="配置k8s yaml"></a>配置k8s yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">      securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">registry-vpc.cn-beijing.aliyuncs.com</span>   <span class="comment">## 保密字典中的仓储认证</span></span><br><span class="line"><span class="attr">      affinity:</span></span><br><span class="line"><span class="attr">        nodeAffinity:</span></span><br><span class="line"><span class="attr">          preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">            - preference:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">              weight:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">          requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">            nodeSelectorTerms:</span></span><br><span class="line"><span class="attr">              - matchExpressions:</span></span><br><span class="line"><span class="attr">                  - key:</span> <span class="string">vcgapp</span></span><br><span class="line"><span class="attr">                    operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">                    values:</span></span><br><span class="line"><span class="bullet">                      -</span> <span class="string">veerlogagent</span>     <span class="comment">## node节点亲和性</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">'registry-vpc.cn-beijing.aliyuncs.com/vcg/com-veer-veerservice:pro-20190610183629'</span>   <span class="comment">## 镜像地址</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">aliyun_logs_com-veer-veerservice</span>     <span class="comment">## 日志服务</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">stdout</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - mountPath:</span> <span class="string">/var/log/veerservice_log</span>   <span class="comment"># 容器内路径</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">volume-veerservice</span></span><br><span class="line"><span class="attr">          resources:</span></span><br><span class="line"><span class="attr">            limits:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="string">'1'</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">4</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">            requests:</span></span><br><span class="line"><span class="attr">              cpu:</span> <span class="number">500</span><span class="string">m</span></span><br><span class="line"><span class="attr">              memory:</span> <span class="number">1000</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          livenessProbe:</span>        <span class="comment">## 存活检测</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            tcpSocket:</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">          readinessProbe:</span>         <span class="comment">## 就绪检测</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">            tcpSocket:</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/var/log/veerservice</span>  <span class="comment"># 主机路径</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">volume-veerservice</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">com-veer-veerservice</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>记一次Java微服务容器化维护工作</title>
    <url>/%E8%AE%B0%E4%B8%80%E6%AC%A1Java%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%8C%96%E7%BB%B4%E6%8A%A4%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h4><hr>
<p>容器架构由Swarm迁移到Kubernetes</p>
<p>Swarm集群中服务发现、服务注册使用Consul，迁移到K8s后注册发现是的K8s的kube-dns基础组件实现。</p>
<p>utilservice-vcg-com这个微服务部署在两台ecs上，java -jar 启动后  手动注册到consul中，这样实现Swarm集群中的应用可以通过Consul访问util服务。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><hr>
<p>与相关研发沟通，确定utilservice程序一些基础信息：比如</p>
<p>​    需要哪些基础组件，在ecs上部署遇到什么问题，如何处理的</p>
<p>​    git仓库地址、服务启动命令、服务端口、是否连接数据库、服务调用关系。</p>
<p>确定使用jdk环境，需要使用到 wkhtmltopdf 这个命令，用于生成pdf；</p>
<p>生成的pdf过程会有 字体和语言的问题，需提前处理。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><hr>
<h5 id="确定基础镜像"><a href="#确定基础镜像" class="headerlink" title="确定基础镜像"></a>确定基础镜像</h5><p>访问<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a>，搜索 wkhtmltopdf 关键词</p>
<p><img src="/记一次Java微服务容器化维护工作/1.png" alt="1"></p>
<p>确定基础镜像使用 buildo/java8-wkhtmltopdf 。</p>
<h6 id="Dockerfile-第一版"><a href="#Dockerfile-第一版" class="headerlink" title="Dockerfile (第一版)"></a>Dockerfile (第一版)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br></pre></td></tr></table></figure>
<h5 id="下载JCE"><a href="#下载JCE" class="headerlink" title="下载JCE"></a>下载JCE</h5><p>需要使用到JCE，在oracle官网下载。</p>
<p>JDK7的下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a><br>JDK8的下载地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>
<p>Java Cryptography Extension (JCE) 无限强度权限策略文件 8 下载</p>
<h6 id="Dockerfile-第二版"><a href="#Dockerfile-第二版" class="headerlink" title="Dockerfile (第二版)"></a>Dockerfile (第二版)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br></pre></td></tr></table></figure>
<h5 id="处理程序报错"><a href="#处理程序报错" class="headerlink" title="处理程序报错"></a>处理程序报错</h5><h6 id="1、找到不到-iSignature-pfx-证书："><a href="#1、找到不到-iSignature-pfx-证书：" class="headerlink" title="1、找到不到 iSignature.pfx 证书："></a>1、找到不到 iSignature.pfx 证书：</h6><p>报错截图：</p>
<h5 id><a href="#" class="headerlink" title></a><img src="/记一次Java微服务容器化维护工作/2.png" alt="2"></h5><p>可以看到找不到/media/providerstamp/signature/iSignature.pfx 证书文件，简单，从老服务器上找到对应文件，拷贝过来。</p>
<h6 id="Dockerfile-第三版"><a href="#Dockerfile-第三版" class="headerlink" title="Dockerfile (第三版)"></a>Dockerfile (第三版)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/signature/  &amp;&amp; \</span><br><span class="line">        cp iSignature.pfx /media/providerstamp/signature/ &amp;&amp; \</span><br></pre></td></tr></table></figure>
<h6 id="2、tmpDic不是文件夹"><a href="#2、tmpDic不是文件夹" class="headerlink" title="2、tmpDic不是文件夹"></a>2、tmpDic不是文件夹</h6><p><img src="/记一次Java微服务容器化维护工作/3.png" alt="3"></p>
<p>研发查看代码后确定是要使用 /media/providerstamp/temp/ 目录，索性登录老服务器上查看/media/providerstamp下所有目录，都创建好，并将需要的文件scp拷贝过来。</p>
<p><img src="/记一次Java微服务容器化维护工作/4.png" alt="4"></p>
<p>看到还有 done 、unitrust目录，并且unitrust目录中的unitrust.key 程序也会用到。</p>
<h6 id="Dockerfile-第四版"><a href="#Dockerfile-第四版" class="headerlink" title="Dockerfile (第四版)"></a>Dockerfile (第四版)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/signature/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/done/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/unitrust/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/temp/  &amp;&amp; \</span><br><span class="line">        cp unitrust.key /media/providerstamp/unitrust &amp;&amp; \</span><br><span class="line">        cp iSignature.pfx /media/providerstamp/signature/ &amp;&amp; \</span><br></pre></td></tr></table></figure>
<h6 id="3、pdf内容乱码"><a href="#3、pdf内容乱码" class="headerlink" title="3、pdf内容乱码"></a>3、pdf内容乱码</h6><p>乱码是由于字体问题，简单直接，直接从老服务器上拷贝 /usr/share/fonts 目录。</p>
<h6 id="Dockerfile-第五版"><a href="#Dockerfile-第五版" class="headerlink" title="Dockerfile (第五版)"></a>Dockerfile (第五版)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM buildo/java8-wkhtmltopdf</span><br><span class="line">MAINTAINER hongye.zhao@vcg.com</span><br><span class="line">RUN mkdir -p /application/</span><br><span class="line">WORKDIR /application/</span><br><span class="line">ADD . .</span><br><span class="line">RUN unzip jce_policy-8.zip &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/US_export_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        cp UnlimitedJCEPolicyJDK8/local_policy.jar /docker-java-home/jre/lib/security &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/signature/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/done/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/unitrust/  &amp;&amp; \</span><br><span class="line">        mkdir -p /media/providerstamp/temp/  &amp;&amp; \</span><br><span class="line">        cp unitrust.key /media/providerstamp/unitrust &amp;&amp; \</span><br><span class="line">        cp iSignature.pfx /media/providerstamp/signature/ &amp;&amp; \</span><br><span class="line">        rm -f /usr/local/bin/wkhtmltopdf &amp;&amp; \</span><br><span class="line">        rm -rf /usr/share/fonts &amp;&amp; \</span><br><span class="line">        cp wkhtmltopdf /usr/local/bin/ &amp;&amp; \</span><br><span class="line">        tar zxf fonts.tar.gz &amp;&amp; \</span><br><span class="line">        mv fonts/ /usr/share/</span><br></pre></td></tr></table></figure>
<p>至此，此微服务容器化已完成。👏👏👏</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS对象存储中的图片数据迁移到京东云OSS</title>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%AC%E4%B8%9C%E4%BA%91OSS/</url>
    <content><![CDATA[<p>阿里云OSS对象存储中的图片数据迁移到京东云OSS</p>
<h4 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h4><p>使用阿里云提供的 <a href="https://help.aliyun.com/document_detail/50452.html" target="_blank" rel="noopener">ossutil</a> 工具进行下载操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ossutil cp oss://static-vcg/veer/static/ veer/static/</span><br></pre></td></tr></table></figure>
<h4 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h4><p>使用Amazon提供的 <a href="https://docs.jdcloud.com/cn/object-storage-service/s3cmd" target="_blank" rel="noopener">s3cmd</a> 工具进行上传操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">s3cmd put --recursive static/ s3://vcg-veer-static/static/</span><br></pre></td></tr></table></figure>
<h4 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h4><p>上传到京东云后发现浏览器访问oss里的图片，会以下载的形式展示，需要更改为在线展示。</p>
<p>询问京东技术后重新上传，增加 <strong>–content-type=”image/svg+xml”</strong>参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup s3cmd put --recursive --content-type=&quot;image/svg+xml&quot;   static/ s3://vcg-veer-static/static/ &amp;</span><br></pre></td></tr></table></figure>
<p>重新上传后，清除本地缓存，刷新CDN目录或指定资源即可正常访问。</p>
<h4 id="调用京东云SDK获取OSS文件的属性"><a href="#调用京东云SDK获取OSS文件的属性" class="headerlink" title="调用京东云SDK获取OSS文件的属性"></a>调用京东云SDK获取OSS文件的属性</h4><p><a href="https://docs.jdcloud.com/cn/object-storage-service/sdk-python" target="_blank" rel="noopener">SDK-Python</a></p>
<h5 id="安装pip和boto3"><a href="#安装pip和boto3" class="headerlink" title="安装pip和boto3"></a>安装pip和boto3</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install boto3</span><br></pre></td></tr></table></figure>
<p>创建client</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3  </span><br><span class="line">        </span><br><span class="line">ACCESS_KEY = <span class="string">'your accesskey'</span>  </span><br><span class="line">SECRET_KEY = <span class="string">'your secretkey'</span>  </span><br><span class="line">s3 = boto3.client(  </span><br><span class="line">    <span class="string">'s3'</span>,  </span><br><span class="line">    aws_access_key_id=ACCESS_KEY,  </span><br><span class="line">    aws_secret_access_key=SECRET_KEY,  </span><br><span class="line">    <span class="comment">#下面给出一个endpoint_url的例子  </span></span><br><span class="line">    endpoint_url=<span class="string">'https://s3.cn-north-1.jdcloud-oss.com'</span>  </span><br><span class="line">    )  </span><br><span class="line">s3.head_object(Bucket=<span class="string">'vcg-veer-static'</span>,Key=<span class="string">'static/landing/icon_search_white.svg'</span>)</span><br></pre></td></tr></table></figure>
<p>返回值如下：</p>
<p><img src="/阿里云OSS对象存储中的图片数据迁移到京东云OSS/./jd-sdk-python.jpg" alt="jd-sdk-python.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>阿里云WAF + Kubernetes Ingress 架构下无法拿到客户端真实IP的问题处理</title>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91WAF-Kubernetes-Ingress-%E6%9E%B6%E6%9E%84%E4%B8%8B%E6%97%A0%E6%B3%95%E6%8B%BF%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9EIP%E7%9A%84%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h5 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h5><p>2019年04月19日晚21:10分进行网络维护，内容如下：</p>
<p>​    将域名CNAME到阿里云的Web防火墙（以下简称为WAF），业务请求经防火墙解析到Kubernetes 的 Ingress 的负载均衡（SLB）地址</p>
<h5 id="故障现象："><a href="#故障现象：" class="headerlink" title="故障现象："></a>故障现象：</h5><p>​    后端应用通过获取请求中的X-Forwarded-For字段，拿到的IP地址为WAF回源地址，非客户端真实IP。</p>
<h5 id="排查记录"><a href="#排查记录" class="headerlink" title="排查记录:"></a>排查记录:</h5><ol>
<li><p>21:15 查看Ingress日志，发现Ingress拿到的IP就是WAF回源地址，为错误IP，确定非前端nodejs代码bug。</p>
</li>
<li><p>21:33  联系阿里云技术团队一起排查问题。</p>
</li>
<li><p>22:20  确认Ingress的模板文件中 the_real_ip 变量是拿的 remote_addr 字段，等待阿里技术联系Ingree研发同学，给出回复。</p>
</li>
<li><p>23:23 Ingree研发同学联系上后确认Ingress没问题，可能是WAF没传真实IP到Ingress。</p>
</li>
<li><p>23:50 在Ingress容器和前端nodejs所在宿主机tcpdump工具抓包后分析得出：</p>
<p>(1)、WAF已经将真实客户端地址放到了 x-Forwarded-For 的字段中传给了ECS<br>(2)、ECS(容器的ingress)将真实的客户端IP，放到了x-Original-Forwarded-For；而将WAF的回源地址放到了 x-Forwarded-For</p>
</li>
<li><p>4月20日 00:29 将compute-full-forwarded-for配置到Ingress的ConfigMap中，问题解决。</p>
</li>
</ol>
<h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl -n kube-system edit cm nginx-configuration</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在data标签下添加如下：</span><br><span class="line">compute-full-forwarded-for: &quot;true&quot;</span><br><span class="line">forwarded-for-header: &quot;X-Forwarded-For&quot;</span><br><span class="line">use-forwarded-headers: &quot;true&quot;</span><br></pre></td></tr></table></figure>
<h5 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h5><p>阿里云容器服务Kubernetes集群的Ingress默认ConfigMap中未配置 compute-full-forwarded-for参数，导致将ingress拿到的WAF回源IP替换为XFF，而非附加到XFF中。</p>
<p><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#compute-full-forwarded-for" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#compute-full-forwarded-for</a></p>
<h5 id="反思："><a href="#反思：" class="headerlink" title="反思："></a>反思：</h5><ol>
<li><p>预览环境和线上环境架构不一致：</p>
<p>此次故障中，预览环境未使用WAF防护，直接解析到K8S集群，未提前发现此次问题，已修正，以后尽量维持环境统一，避免此类问题出现。</p>
</li>
<li><p>故障点定位速度慢：</p>
<p>网络请求问题优先抓包分析，提升故障定位速度，后续夯实基础知识，提升问题排查能力。</p>
</li>
<li><p>Kubernetes专业知识掌握程度较低</p>
<p>目前仅仅在使用层面上能力ok，但是其实现原理、组件实现方式等知识点薄弱，后续还需在K8S学习中多总结，多学习，争取减少故障，提升运维能力。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云产品我想退款如何操作</title>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%A7%E5%93%81%E6%88%91%E6%83%B3%E9%80%80%E6%AC%BE%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>阿里云产品退款工单怎么填</p>
<h5 id="进入“工单系统”"><a href="#进入“工单系统”" class="headerlink" title="进入“工单系统”"></a>进入“工单系统”</h5><p><img src="/阿里云产品我想退款如何操作/./1564537171046.jpg" alt></p>
<h5 id="选择相关产品，点击“提问”"><a href="#选择相关产品，点击“提问”" class="headerlink" title="选择相关产品，点击“提问”"></a>选择相关产品，点击“提问”</h5><p><strong>本次演示为ECS实例退款</strong></p>
<p><img src="/阿里云产品我想退款如何操作/./1564537202981.jpg" alt></p>
<h5 id="选择“续费-配置变更”-创建工单"><a href="#选择“续费-配置变更”-创建工单" class="headerlink" title="选择“续费/配置变更”-创建工单"></a>选择“续费/配置变更”-创建工单</h5><p><img src="/阿里云产品我想退款如何操作/./1564537232860.jpg" alt></p>
<h5 id="填写工单"><a href="#填写工单" class="headerlink" title="填写工单"></a>填写工单</h5><p><img src="/阿里云产品我想退款如何操作/./1564537617373.jpg" alt></p>
<p>问题描述内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）退款原因（以便我方改进产品不足）： 业务不再需要</span><br><span class="line">（2）申请退款的产品实例ID：</span><br><span class="line">i-2ze73nwbpiwe8oy2s8fd</span><br><span class="line">i-2zeeif4aj2ietoreexyz</span><br><span class="line">i-2zebsfqkvhcijbbtuqqj</span><br><span class="line">i-2zeixwbfspqnyju4qvdk</span><br><span class="line">i-2zeacxjlg8xlgh1kp053</span><br><span class="line">i-2zeawy8pclj79pt1amvx</span><br><span class="line">i-2ze095o6ifge7szwor5j</span><br><span class="line">i-2zea9n9e5ru6ebvf4nuv</span><br><span class="line">i-2zea410j2fhwth7wp0s6</span><br><span class="line">i-25z4mycbd</span><br><span class="line">i-25m8j9t4v</span><br><span class="line">i-251nzqk8t</span><br><span class="line">i-25zq6kyad</span><br><span class="line">i-25yentipk</span><br><span class="line">（3）已使用时长所对应的费用不退回，请您确认已知晓； 确认</span><br><span class="line">（4）代金券支付部分无法退回，请您确认已知晓： 确认</span><br><span class="line">（5）主机或实例是否已备份？若已备份，请回复“数据已备份”；若无需备份，请回复“数据无需备份” 。（退款后服务器实例立即被清除，数据不再保留，请提前备份数据）  数据已备份。</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>阿里巴巴DevOps实践手册</title>
    <url>/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4DevOps%E5%AE%9E%E8%B7%B5%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>do what you loveeee<br><a id="more"></a><br>

	<div class="row">
    <embed src="./阿里巴巴DevOps实践手册.pdf" width="100%" height="550" type="application/pdf">
	</div>


</p>
]]></content>
  </entry>
</search>
